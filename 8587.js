"use strict";(this.webpackChunkpswidersk_page=this.webpackChunkpswidersk_page||[]).push([[8587],{8587:e=>{e.exports='<h1>Intro</h1><p>This post is more like a notebook for setting up the home lab server.</p><h1>Networking</h1><h2>Firewall</h2><h3>Setting correct default zone</h3><p>When listing all zones:</p><pre><code class="language-shell">firewall-cmd --list-all-zones\n</code></pre><p>the <code>public</code> default zone is not connected to <code>enp2s0</code> in <code>firewall-cmd</code> so it is useful to change it to a correct \n(<code>FedoraServer</code>) one:</p><pre><code class="language-shell">firewall-cmd --set-default-zone=FedoraServer\n</code></pre><h3>Allowing denied logs to appear in <code>journalctl</code></h3><ul><li><p>Change line <code>LogDenied=off</code> to <code>LogDenied=all</code> in <code>vi /etc/firewalld/firewalld.conf</code> file.</p></li><li><p>Restart service: <code>systemctl restart firewalld</code></p></li><li><p>View rejected request logs (last 20 records): <code>journalctl --lines=20 --grep=\'REJECT\'</code> or in follow mode:\n  <code>journalctl -f --grep=\'REJECT\'</code></p></li></ul><h3>Adding Wireguard service to allow VPN connection</h3><pre><code class="language-shell">firewall-cmd --add-service=wireguard\n</code></pre><p>Add other conf options, so that it will look like:</p><pre><code class="language-text">FedoraServer (default, active)\n  target: default\n  ingress-priority: 0\n  egress-priority: 0\n  icmp-block-inversion: no\n  interfaces: enp2s0\n  sources: \n  services: wireguard\n  ports: \n  protocols: \n  forward: yes\n  masquerade: yes\n  forward-ports: \n  source-ports: \n  icmp-blocks: \n  rich rules: \n\nhome (active)\n  target: ACCEPT\n  ingress-priority: 0\n  egress-priority: 0\n  icmp-block-inversion: no\n  interfaces: wg0\n  sources: \n  services: ssh\n  ports: \n  protocols: \n  forward: yes\n  masquerade: no\n  forward-ports: \n  source-ports: \n  icmp-blocks: \n  rich rules: \n</code></pre><h3>Adding <code>/etc/wireguard/wg0.conf</code> config file</h3><ul><li>Save the following content</li></ul><pre><code class="language-shell">[Interface]\nAddress = 10.0.0.1/24\nPrivateKey = &lt;home_lab_private_key&gt;\nListenPort = 51820\nMTU = 1280\n\n[Peer]\nPublicKey = &lt;first_device_pub_key&gt;\nAllowedIPs = 10.0.0.2/32\n\n[Peer]\nPublicKey = &lt;second_device_pub_key&gt;\nAllowedIPs = 10.0.0.3/32\n</code></pre><ul><li>add new interface to Wireguard: </li></ul><pre><code class="language-shell">wg-quick up wg0\n</code></pre><ul><li>create persistent service:</li></ul><pre><code class="language-shell">wg-quick down wg0\nsystemctl enable wg-quick@wg0\nsystemctl start wg-quick@wg0\n</code></pre><ul><li>to connect from the client install client and add connection with the following conf:</li></ul><pre><code class="language-shell">[Interface]\nPrivateKey = &lt;first_device_private_key&gt;\nListenPort = 51820\nAddress = 10.0.0.3/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = &lt;home_lab_public_key&gt;\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nEndpoint = homelab.pswidersk.com:51820\n\n</code></pre><h1>Docker</h1><p>Exporting existing containers to compose format:</p><pre><code class="language-shell">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/red5d/docker-autocompose $(docker ps -aq) &gt; compose.yaml\n</code></pre>'}}]);