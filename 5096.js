"use strict";(globalThis.webpackChunkpswidersk_page=globalThis.webpackChunkpswidersk_page||[]).push([[5096],{5096:n=>{n.exports="(function (factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', '@js-joda/core', './kotlin-kotlin-stdlib.js', './kotlinx-serialization-kotlinx-serialization-core.js'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('@js-joda/core'), require('./kotlin-kotlin-stdlib.js'), require('./kotlinx-serialization-kotlinx-serialization-core.js'));\n  else {\n    if (typeof globalThis['@js-joda/core'] === 'undefined') {\n      throw new Error(\"Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency '@js-joda/core' was not found. Please, check whether '@js-joda/core' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.\");\n    }\n    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {\n      throw new Error(\"Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.\");\n    }\n    if (typeof globalThis['kotlinx-serialization-kotlinx-serialization-core'] === 'undefined') {\n      throw new Error(\"Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency 'kotlinx-serialization-kotlinx-serialization-core' was not found. Please, check whether 'kotlinx-serialization-kotlinx-serialization-core' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.\");\n    }\n    globalThis['Kotlin-DateTime-library-kotlinx-datetime'] = factory(typeof globalThis['Kotlin-DateTime-library-kotlinx-datetime'] === 'undefined' ? {} : globalThis['Kotlin-DateTime-library-kotlinx-datetime'], globalThis['@js-joda/core'], globalThis['kotlin-kotlin-stdlib'], globalThis['kotlinx-serialization-kotlinx-serialization-core']);\n  }\n}(function (_, $module$_js_joda_core_gcv2k, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core) {\n  'use strict';\n  //region block: imports\n  var imul = Math.imul;\n  var ZoneId = $module$_js_joda_core_gcv2k.ZoneId;\n  var ZoneRulesProvider = $module$_js_joda_core_gcv2k.ZoneRulesProvider;\n  var protoOf = kotlin_kotlin.$_$.r9;\n  var initMetadataForCompanion = kotlin_kotlin.$_$.u8;\n  var Long = kotlin_kotlin.$_$.zb;\n  var compare = kotlin_kotlin.$_$.m7;\n  var toString = kotlin_kotlin.$_$.t9;\n  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.d1;\n  var Unit_instance = kotlin_kotlin.$_$.t3;\n  var fromInt = kotlin_kotlin.$_$.s7;\n  var modulo = kotlin_kotlin.$_$.t7;\n  var divide = kotlin_kotlin.$_$.q7;\n  var equalsLong = kotlin_kotlin.$_$.r7;\n  var convertToInt = kotlin_kotlin.$_$.o7;\n  var shiftRight = kotlin_kotlin.$_$.y7;\n  var initMetadataForClass = kotlin_kotlin.$_$.t8;\n  var VOID = kotlin_kotlin.$_$.b;\n  var enumEntries = kotlin_kotlin.$_$.g7;\n  var Enum = kotlin_kotlin.$_$.vb;\n  var IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.b1;\n  var objectCreate = kotlin_kotlin.$_$.q9;\n  var captureStack = kotlin_kotlin.$_$.e8;\n  var IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.c1;\n  var IllegalArgumentException_init_$Init$_1 = kotlin_kotlin.$_$.e1;\n  var IllegalArgumentException = kotlin_kotlin.$_$.yb;\n  var IllegalArgumentException_init_$Init$_2 = kotlin_kotlin.$_$.a1;\n  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.i1;\n  var RuntimeException_init_$Init$_0 = kotlin_kotlin.$_$.k1;\n  var RuntimeException = kotlin_kotlin.$_$.cc;\n  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.v;\n  var initMetadataForInterface = kotlin_kotlin.$_$.w8;\n  var toString_0 = kotlin_kotlin.$_$.q1;\n  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.f1;\n  var THROW_CCE = kotlin_kotlin.$_$.dc;\n  var isInterface = kotlin_kotlin.$_$.g9;\n  var isArray = kotlin_kotlin.$_$.z8;\n  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.e;\n  var KProperty0 = kotlin_kotlin.$_$.ia;\n  var getPropertyCallableRef = kotlin_kotlin.$_$.q8;\n  var hashCode = kotlin_kotlin.$_$.s8;\n  var KMutableProperty1 = kotlin_kotlin.$_$.ha;\n  var initMetadataForObject = kotlin_kotlin.$_$.y8;\n  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.n1;\n  var lazy = kotlin_kotlin.$_$.wc;\n  var equals = kotlin_kotlin.$_$.n8;\n  var padStart = kotlin_kotlin.$_$.qa;\n  var listOf = kotlin_kotlin.$_$.o5;\n  var abs = kotlin_kotlin.$_$.u9;\n  var noWhenBranchMatchedException = kotlin_kotlin.$_$.xc;\n  var getBooleanHashCode = kotlin_kotlin.$_$.o8;\n  var bitwiseAnd = kotlin_kotlin.$_$.j7;\n  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.f;\n  var listOf_0 = kotlin_kotlin.$_$.n5;\n  var emptyList = kotlin_kotlin.$_$.z4;\n  var toString_1 = kotlin_kotlin.$_$.ad;\n  var getStringHashCode = kotlin_kotlin.$_$.r8;\n  var charSequenceLength = kotlin_kotlin.$_$.j8;\n  var charCodeAt = kotlin_kotlin.$_$.h8;\n  var substring = kotlin_kotlin.$_$.za;\n  var substring_0 = kotlin_kotlin.$_$.ya;\n  var get_lastIndex = kotlin_kotlin.$_$.pa;\n  var toSet = kotlin_kotlin.$_$.i6;\n  var collectionSizeOrDefault = kotlin_kotlin.$_$.l4;\n  var distinct = kotlin_kotlin.$_$.x4;\n  var to = kotlin_kotlin.$_$.bd;\n  var joinToString = kotlin_kotlin.$_$.i5;\n  var single = kotlin_kotlin.$_$.y5;\n  var Collection = kotlin_kotlin.$_$.v3;\n  var Char = kotlin_kotlin.$_$.sb;\n  var charSequenceSubSequence = kotlin_kotlin.$_$.k8;\n  var charSequenceGet = kotlin_kotlin.$_$.i8;\n  var numberRangeToNumber = kotlin_kotlin.$_$.n9;\n  var mutableListOf = kotlin_kotlin.$_$.r5;\n  var removeLastOrNull = kotlin_kotlin.$_$.v5;\n  var sortWith = kotlin_kotlin.$_$.z5;\n  var FunctionAdapter = kotlin_kotlin.$_$.b8;\n  var Comparator = kotlin_kotlin.$_$.ub;\n  var compareValues = kotlin_kotlin.$_$.m6;\n  var Exception = kotlin_kotlin.$_$.xb;\n  var Exception_init_$Init$ = kotlin_kotlin.$_$.y;\n  var StringBuilder_init_$Create$_0 = kotlin_kotlin.$_$.u;\n  var joinTo = kotlin_kotlin.$_$.j5;\n  var plus = kotlin_kotlin.$_$.t5;\n  var toMutableList = kotlin_kotlin.$_$.h6;\n  var addAll = kotlin_kotlin.$_$.h4;\n  var firstOrNull = kotlin_kotlin.$_$.c5;\n  var drop = kotlin_kotlin.$_$.y4;\n  var repeat = kotlin_kotlin.$_$.sa;\n  var checkCountOverflow = kotlin_kotlin.$_$.k4;\n  var compareTo = kotlin_kotlin.$_$.l8;\n  var removePrefix = kotlin_kotlin.$_$.ra;\n  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.m1;\n  var Comparable = kotlin_kotlin.$_$.tb;\n  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.o1;\n  var buildClassSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1;\n  var getKClass = kotlin_kotlin.$_$.ea;\n  var arrayOf = kotlin_kotlin.$_$.qc;\n  var createKType = kotlin_kotlin.$_$.ca;\n  var serializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v1;\n  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r1;\n  var LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.c;\n  var lazy_0 = kotlin_kotlin.$_$.vc;\n  var KProperty1 = kotlin_kotlin.$_$.ja;\n  var MissingFieldException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a;\n  var SealedClassSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s1;\n  var AbstractPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g1;\n  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.h3;\n  var SerializationException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c;\n  var STRING_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f;\n  var PrimitiveSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v;\n  var toNumber = kotlin_kotlin.$_$.a8;\n  var numberToInt = kotlin_kotlin.$_$.p9;\n  var throwOnFailure = kotlin_kotlin.$_$.yc;\n  var _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.v1;\n  var charArrayOf = kotlin_kotlin.$_$.f8;\n  var split = kotlin_kotlin.$_$.ua;\n  var startsWith = kotlin_kotlin.$_$.wa;\n  var numberToLong = kotlin_kotlin.$_$.w7;\n  var multiply = kotlin_kotlin.$_$.u7;\n  var add = kotlin_kotlin.$_$.i7;\n  var getOrNull = kotlin_kotlin.$_$.e5;\n  var Companion_instance = kotlin_kotlin.$_$.o3;\n  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.o;\n  var take = kotlin_kotlin.$_$.b6;\n  var _Result___init__impl__xyqfz8 = kotlin_kotlin.$_$.r1;\n  var createFailure = kotlin_kotlin.$_$.rc;\n  var subtract = kotlin_kotlin.$_$.z7;\n  var negate = kotlin_kotlin.$_$.v7;\n  var get_ONE = kotlin_kotlin.$_$.h7;\n  var bitwiseXor = kotlin_kotlin.$_$.l7;\n  var bitwiseOr = kotlin_kotlin.$_$.k7;\n  var ClosedRange = kotlin_kotlin.$_$.v9;\n  var contains = kotlin_kotlin.$_$.y9;\n  var ArithmeticException = kotlin_kotlin.$_$.rb;\n  var shiftRightUnsigned = kotlin_kotlin.$_$.x7;\n  var Companion_getInstance = kotlin_kotlin.$_$.k3;\n  var startsWith_0 = kotlin_kotlin.$_$.va;\n  var take_0 = kotlin_kotlin.$_$.ab;\n  var compareValuesBy = kotlin_kotlin.$_$.l6;\n  var lastOrNull = kotlin_kotlin.$_$.l5;\n  var last = kotlin_kotlin.$_$.m5;\n  var binarySearch = kotlin_kotlin.$_$.j4;\n  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.w;\n  var toList = kotlin_kotlin.$_$.f6;\n  //endregion\n  //region block: pre-declaration\n  initMetadataForCompanion(Companion);\n  initMetadataForCompanion(Companion_0);\n  initMetadataForCompanion(Companion_1);\n  initMetadataForCompanion(Companion_2);\n  initMetadataForClass(DateTimeUnit, 'DateTimeUnit', VOID, VOID, VOID, VOID, VOID, {0: DateTimeUnitSerializer_getInstance});\n  initMetadataForClass(TimeBased, 'TimeBased', VOID, DateTimeUnit, VOID, VOID, VOID, {0: TimeBasedDateTimeUnitSerializer_getInstance});\n  initMetadataForClass(DateBased, 'DateBased', VOID, DateTimeUnit, VOID, VOID, VOID, {0: DateBasedDateTimeUnitSerializer_getInstance});\n  initMetadataForClass(DayBased, 'DayBased', VOID, DateBased, VOID, VOID, VOID, {0: DayBasedDateTimeUnitSerializer_getInstance});\n  initMetadataForClass(MonthBased, 'MonthBased', VOID, DateBased, VOID, VOID, VOID, {0: MonthBasedDateTimeUnitSerializer_getInstance});\n  initMetadataForCompanion(Companion_3);\n  initMetadataForClass(DayOfWeek, 'DayOfWeek', VOID, Enum);\n  initMetadataForClass(DateTimeFormatException, 'DateTimeFormatException', DateTimeFormatException_init_$Create$, IllegalArgumentException);\n  initMetadataForClass(IllegalTimeZoneException, 'IllegalTimeZoneException', IllegalTimeZoneException_init_$Create$, IllegalArgumentException);\n  initMetadataForClass(DateTimeArithmeticException, 'DateTimeArithmeticException', DateTimeArithmeticException_init_$Create$, RuntimeException);\n  initMetadataForClass(Month, 'Month', VOID, Enum);\n  initMetadataForCompanion(Companion_4);\n  initMetadataForClass(OverloadMarker, 'OverloadMarker');\n  initMetadataForClass(AbstractDateTimeFormat, 'AbstractDateTimeFormat');\n  initMetadataForClass(Padding, 'Padding', VOID, Enum);\n  function year$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.g16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.g16.call(this, padding);\n    }\n    return tmp;\n  }\n  function monthNumber$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.i16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.i16.call(this, padding);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(WithYearMonth, 'WithYearMonth');\n  function day$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.l16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.l16.call(this, padding);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(WithDate, 'WithDate', VOID, VOID, [WithYearMonth]);\n  function hour$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.o16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.o16.call(this, padding);\n    }\n    return tmp;\n  }\n  function minute$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.q16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.q16.call(this, padding);\n    }\n    return tmp;\n  }\n  function second$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.s16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.s16.call(this, padding);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(WithTime, 'WithTime');\n  function offsetHours$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.w16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.w16.call(this, padding);\n    }\n    return tmp;\n  }\n  function offsetMinutesOfHour$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.y16(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.y16.call(this, padding);\n    }\n    return tmp;\n  }\n  function offsetSecondsOfMinute$default(padding, $super) {\n    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;\n    var tmp;\n    if ($super === VOID) {\n      this.a17(padding);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.a17.call(this, padding);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(WithUtcOffset, 'WithUtcOffset');\n  function appendAlternativeParsingImpl(otherFormats, mainFormat) {\n    // Inline function 'kotlin.collections.map' call\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(otherFormats.length);\n    var inductionVariable = 0;\n    var last = otherFormats.length;\n    while (inductionVariable < last) {\n      var item = otherFormats[inductionVariable];\n      inductionVariable = inductionVariable + 1 | 0;\n      // Inline function 'kotlin.also' call\n      var this_0 = this.f17();\n      item(this_0);\n      var tmp$ret$2 = this_0.e17().h17();\n      destination.j(tmp$ret$2);\n    }\n    var others = destination;\n    // Inline function 'kotlin.also' call\n    var this_1 = this.f17();\n    mainFormat(this_1);\n    var main = this_1.e17().h17();\n    this.e17().i17(new AlternativesParsingFormatStructure(main, others));\n  }\n  function appendOptionalImpl(onZero, format) {\n    var tmp = this.e17();\n    // Inline function 'kotlin.also' call\n    var this_0 = this.f17();\n    format(this_0);\n    tmp.i17(new OptionalFormatStructure(onZero, this_0.e17().h17()));\n  }\n  function chars(value) {\n    return this.e17().i17(new ConstantFormatStructure(value));\n  }\n  function build() {\n    return new CachedFormatStructure(this.e17().h17().j17_1);\n  }\n  initMetadataForInterface(AbstractDateTimeFormatBuilder, 'AbstractDateTimeFormatBuilder');\n  initMetadataForClass(IncompleteLocalDate, 'IncompleteLocalDate', IncompleteLocalDate);\n  initMetadataForCompanion(Companion_5);\n  function year(padding) {\n    return this.l18(new BasicFormatStructure(new YearDirective(padding)));\n  }\n  function monthNumber(padding) {\n    return this.l18(new BasicFormatStructure(new MonthDirective(padding)));\n  }\n  initMetadataForInterface(AbstractWithYearMonthBuilder, 'AbstractWithYearMonthBuilder', VOID, VOID, [WithYearMonth]);\n  function addFormatStructureForYearMonth(structure) {\n    this.k18(structure);\n  }\n  function day(padding) {\n    return this.k18(new BasicFormatStructure(new DayDirective(padding)));\n  }\n  function date(format) {\n    var tmp;\n    if (format instanceof LocalDateFormat) {\n      this.k18(format.m18_1);\n      tmp = Unit_instance;\n    }\n    return tmp;\n  }\n  initMetadataForInterface(AbstractWithDateBuilder, 'AbstractWithDateBuilder', VOID, VOID, [AbstractWithYearMonthBuilder, WithDate]);\n  initMetadataForClass(Builder, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithDateBuilder]);\n  initMetadataForClass(LocalDateFormat, 'LocalDateFormat', VOID, AbstractDateTimeFormat);\n  initMetadataForClass(UnsignedIntFieldFormatDirective, 'UnsignedIntFieldFormatDirective');\n  initMetadataForClass(DayDirective, 'DayDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForObject(DateFields, 'DateFields');\n  initMetadataForCompanion(Companion_6);\n  function hour(padding) {\n    return this.k17(new BasicFormatStructure(new HourDirective(padding)));\n  }\n  function minute(padding) {\n    return this.k17(new BasicFormatStructure(new MinuteDirective(padding)));\n  }\n  function second(padding) {\n    return this.k17(new BasicFormatStructure(new SecondDirective(padding)));\n  }\n  function secondFraction(minLength, maxLength) {\n    return this.k17(new BasicFormatStructure(new FractionalSecondDirective(minLength, maxLength)));\n  }\n  function time(format) {\n    var tmp;\n    if (format instanceof LocalTimeFormat) {\n      this.k17(format.r1a_1);\n      tmp = Unit_instance;\n    }\n    return tmp;\n  }\n  initMetadataForInterface(AbstractWithTimeBuilder, 'AbstractWithTimeBuilder', VOID, VOID, [WithTime]);\n  function addFormatStructureForDate(structure) {\n    this.e19(structure);\n  }\n  function addFormatStructureForTime(structure) {\n    this.e19(structure);\n  }\n  initMetadataForInterface(AbstractWithDateTimeBuilder, 'AbstractWithDateTimeBuilder', VOID, VOID, [AbstractWithDateBuilder, AbstractWithTimeBuilder, WithDate, WithTime]);\n  initMetadataForClass(Builder_0, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithDateTimeBuilder]);\n  initMetadataForClass(LocalDateTimeFormat, 'LocalDateTimeFormat', VOID, AbstractDateTimeFormat);\n  function set_fractionOfSecond(value) {\n    this.y19(value == null ? null : value.k1a(9));\n  }\n  function get_fractionOfSecond() {\n    var tmp0_safe_receiver = this.z19();\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp = new DecimalFraction(tmp0_safe_receiver, 9);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(TimeFieldContainer, 'TimeFieldContainer');\n  initMetadataForClass(IncompleteLocalDateTime, 'IncompleteLocalDateTime', IncompleteLocalDateTime, VOID, [TimeFieldContainer]);\n  initMetadataForClass(IncompleteLocalTime, 'IncompleteLocalTime', IncompleteLocalTime, VOID, [TimeFieldContainer]);\n  initMetadataForClass(AmPmMarker, 'AmPmMarker', VOID, Enum);\n  initMetadataForCompanion(Companion_7);\n  initMetadataForClass(Builder_1, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithTimeBuilder]);\n  initMetadataForClass(LocalTimeFormat, 'LocalTimeFormat', VOID, AbstractDateTimeFormat);\n  initMetadataForClass(HourDirective, 'HourDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForClass(MinuteDirective, 'MinuteDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForClass(SecondDirective, 'SecondDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForCompanion(Companion_8);\n  initMetadataForClass(DecimalFractionFieldFormatDirective, 'DecimalFractionFieldFormatDirective');\n  initMetadataForClass(FractionalSecondDirective, 'FractionalSecondDirective', VOID, DecimalFractionFieldFormatDirective);\n  initMetadataForObject(TimeFields, 'TimeFields');\n  initMetadataForInterface(UtcOffsetFieldContainer, 'UtcOffsetFieldContainer');\n  initMetadataForClass(IncompleteUtcOffset, 'IncompleteUtcOffset', IncompleteUtcOffset, VOID, [UtcOffsetFieldContainer]);\n  initMetadataForClass(UtcOffsetWholeHoursDirective, 'UtcOffsetWholeHoursDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForCompanion(Companion_9);\n  function offsetHours(padding) {\n    return this.b1d(new SignedFormatStructure(new BasicFormatStructure(new UtcOffsetWholeHoursDirective(padding)), true));\n  }\n  function offsetMinutesOfHour(padding) {\n    return this.b1d(new BasicFormatStructure(new UtcOffsetMinuteOfHourDirective(padding)));\n  }\n  function offsetSecondsOfMinute(padding) {\n    return this.b1d(new BasicFormatStructure(new UtcOffsetSecondOfMinuteDirective(padding)));\n  }\n  initMetadataForInterface(AbstractWithOffsetBuilder, 'AbstractWithOffsetBuilder', VOID, VOID, [WithUtcOffset]);\n  initMetadataForClass(Builder_2, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithOffsetBuilder]);\n  initMetadataForClass(UtcOffsetFormat, 'UtcOffsetFormat', VOID, AbstractDateTimeFormat);\n  initMetadataForClass(OffsetFields$sign$1);\n  initMetadataForObject(OffsetFields, 'OffsetFields');\n  initMetadataForClass(UtcOffsetMinuteOfHourDirective, 'UtcOffsetMinuteOfHourDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForClass(UtcOffsetSecondOfMinuteDirective, 'UtcOffsetSecondOfMinuteDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForClass(WhenToOutput, 'WhenToOutput', VOID, Enum);\n  initMetadataForClass(IncompleteYearMonth, 'IncompleteYearMonth', IncompleteYearMonth);\n  initMetadataForCompanion(Companion_10);\n  initMetadataForClass(Builder_3, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithYearMonthBuilder]);\n  initMetadataForClass(YearMonthFormat, 'YearMonthFormat', VOID, AbstractDateTimeFormat);\n  initMetadataForClass(SignedIntFieldFormatDirective, 'SignedIntFieldFormatDirective');\n  initMetadataForClass(YearDirective, 'YearDirective', VOID, SignedIntFieldFormatDirective);\n  initMetadataForClass(MonthDirective, 'MonthDirective', VOID, UnsignedIntFieldFormatDirective);\n  initMetadataForObject(YearMonthFields, 'YearMonthFields');\n  initMetadataForClass(AppendableFormatStructure, 'AppendableFormatStructure', AppendableFormatStructure);\n  initMetadataForClass(AbstractFieldSpec, 'AbstractFieldSpec');\n  initMetadataForClass(GenericFieldSpec, 'GenericFieldSpec', VOID, AbstractFieldSpec);\n  function getterNotNull(container) {\n    var tmp0_elvis_lhs = this.p1f(container);\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      throw IllegalStateException_init_$Create$('Field ' + this.e1f() + ' is not set');\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    return tmp;\n  }\n  initMetadataForInterface(Accessor, 'Accessor');\n  initMetadataForClass(PropertyAccessor, 'PropertyAccessor', VOID, VOID, [Accessor]);\n  initMetadataForClass(UnsignedFieldSpec, 'UnsignedFieldSpec', VOID, AbstractFieldSpec);\n  initMetadataForClass(ConcatenatedFormatStructure, 'ConcatenatedFormatStructure');\n  initMetadataForClass(CachedFormatStructure, 'CachedFormatStructure', VOID, ConcatenatedFormatStructure);\n  initMetadataForInterface(NonConcatenatedFormatStructure, 'NonConcatenatedFormatStructure');\n  initMetadataForClass(BasicFormatStructure, 'BasicFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);\n  initMetadataForClass(ConstantFormatStructure, 'ConstantFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);\n  initMetadataForClass(SignedFormatStructure, 'SignedFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);\n  initMetadataForCompanion(Companion_11);\n  initMetadataForClass(PropertyWithDefault, 'PropertyWithDefault');\n  initMetadataForClass(OptionalFormatStructure, 'OptionalFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);\n  initMetadataForClass(AlternativesParsingFormatStructure, 'AlternativesParsingFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);\n  initMetadataForClass(ComparisonPredicate, 'ComparisonPredicate');\n  initMetadataForObject(Truth, 'Truth');\n  initMetadataForClass(ConjunctionPredicate, 'ConjunctionPredicate');\n  function format$default(obj, builder, minusNotRequired, $super) {\n    minusNotRequired = minusNotRequired === VOID ? false : minusNotRequired;\n    var tmp;\n    if ($super === VOID) {\n      this.i1g(obj, builder, minusNotRequired);\n      tmp = Unit_instance;\n    } else {\n      tmp = $super.i1g.call(this, obj, builder, minusNotRequired);\n    }\n    return tmp;\n  }\n  initMetadataForInterface(FormatterStructure, 'FormatterStructure');\n  initMetadataForClass(SpacePaddedFormatter, 'SpacePaddedFormatter', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(SignedFormatter, 'SignedFormatter', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(ConditionalFormatter, 'ConditionalFormatter', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(ConcatenatedFormatter, 'ConcatenatedFormatter', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(UnsignedIntFormatterStructure, 'UnsignedIntFormatterStructure', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(DecimalFractionFormatterStructure, 'DecimalFractionFormatterStructure', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(SignedIntFormatterStructure, 'SignedIntFormatterStructure', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(ConstantStringFormatterStructure, 'ConstantStringFormatterStructure', VOID, VOID, [FormatterStructure]);\n  initMetadataForClass(NumberConsumer, 'NumberConsumer');\n  initMetadataForClass(FractionPartConsumer, 'FractionPartConsumer', VOID, NumberConsumer);\n  initMetadataForClass(ConstantNumberConsumer, 'ConstantNumberConsumer', VOID, NumberConsumer);\n  initMetadataForObject(ExpectedInt, 'ExpectedInt');\n  initMetadataForClass(TooManyDigits, 'TooManyDigits');\n  initMetadataForClass(TooFewDigits, 'TooFewDigits');\n  initMetadataForClass(WrongConstant, 'WrongConstant');\n  initMetadataForClass(Conflicting, 'Conflicting');\n  initMetadataForClass(UnsignedIntConsumer, 'UnsignedIntConsumer', VOID, NumberConsumer);\n  initMetadataForClass(ParseError, 'ParseError');\n  initMetadataForCompanion(Companion_12);\n  initMetadataForClass(ParserState, 'ParserState');\n  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);\n  initMetadataForClass(Parser, 'Parser');\n  initMetadataForClass(ParserStructure, 'ParserStructure');\n  initMetadataForClass(ParseException, 'ParseException', VOID, Exception);\n  initMetadataForClass(NumberSpanParserOperation, 'NumberSpanParserOperation');\n  initMetadataForClass(PlainStringParserOperation, 'PlainStringParserOperation');\n  initMetadataForClass(SignParser, 'SignParser');\n  initMetadataForClass(UnconditionalModification, 'UnconditionalModification');\n  initMetadataForClass(DecimalFraction, 'DecimalFraction', VOID, VOID, [Comparable]);\n  initMetadataForObject(TimeBasedDateTimeUnitSerializer, 'TimeBasedDateTimeUnitSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(DateBasedDateTimeUnitSerializer, 'DateBasedDateTimeUnitSerializer', VOID, AbstractPolymorphicSerializer);\n  initMetadataForObject(DayBasedDateTimeUnitSerializer, 'DayBasedDateTimeUnitSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(MonthBasedDateTimeUnitSerializer, 'MonthBasedDateTimeUnitSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(DateTimeUnitSerializer, 'DateTimeUnitSerializer', VOID, AbstractPolymorphicSerializer);\n  initMetadataForObject(LocalDateSerializer, 'LocalDateSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(LocalDateTimeSerializer, 'LocalDateTimeSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(LocalTimeSerializer, 'LocalTimeSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(UtcOffsetSerializer, 'UtcOffsetSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(FixedOffsetTimeZoneSerializer, 'FixedOffsetTimeZoneSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(TimeZoneSerializer, 'TimeZoneSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForObject(YearMonthSerializer, 'YearMonthSerializer', VOID, VOID, [KSerializer]);\n  initMetadataForClass(TimeZone, 'TimeZone', VOID, VOID, VOID, VOID, VOID, {0: TimeZoneSerializer_getInstance});\n  initMetadataForObject(SystemTimeZone, 'SystemTimeZone', VOID, TimeZone);\n  initMetadataForClass(tzdb$1);\n  initMetadataForCompanion(Companion_13);\n  initMetadataForObject(Formats, 'Formats');\n  initMetadataForClass(LocalDate, 'LocalDate', VOID, VOID, [Comparable], VOID, VOID, {0: LocalDateSerializer_getInstance});\n  initMetadataForCompanion(Companion_14);\n  initMetadataForObject(Formats_0, 'Formats');\n  initMetadataForClass(LocalDateTime, 'LocalDateTime', VOID, VOID, [Comparable], VOID, VOID, {0: LocalDateTimeSerializer_getInstance});\n  initMetadataForCompanion(Companion_15);\n  initMetadataForObject(Formats_1, 'Formats');\n  initMetadataForClass(LocalTime, 'LocalTime', VOID, VOID, [Comparable], VOID, VOID, {0: LocalTimeSerializer_getInstance});\n  initMetadataForCompanion(Companion_16);\n  initMetadataForClass(FixedOffsetTimeZone, 'FixedOffsetTimeZone', VOID, TimeZone, VOID, VOID, VOID, {0: FixedOffsetTimeZoneSerializer_getInstance});\n  initMetadataForCompanion(Companion_17);\n  initMetadataForCompanion(Companion_18);\n  initMetadataForObject(Formats_2, 'Formats');\n  initMetadataForClass(UtcOffset, 'UtcOffset', VOID, VOID, VOID, VOID, VOID, {0: UtcOffsetSerializer_getInstance});\n  initMetadataForCompanion(Companion_19);\n  initMetadataForObject(Formats_3, 'Formats');\n  initMetadataForClass(YearMonth, 'YearMonth', VOID, VOID, [Comparable], VOID, VOID, {0: YearMonthSerializer_getInstance});\n  initMetadataForObject(WallClockOffset, 'WallClockOffset');\n  initMetadataForClass(FixedOffset, 'FixedOffset');\n  initMetadataForClass(RegionTimeZone, 'RegionTimeZone', VOID, TimeZone);\n  initMetadataForClass(TimeZoneRulesCommon, 'TimeZoneRulesCommon');\n  initMetadataForClass(Rule, 'Rule');\n  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);\n  //endregion\n  function todayIn(_this__u8e3s4, timeZone) {\n    return toLocalDateTime_0(_this__u8e3s4.if(), timeZone).v14_1;\n  }\n  function Companion() {\n  }\n  var Companion_instance_0;\n  function Companion_getInstance_0() {\n    return Companion_instance_0;\n  }\n  function Companion_0() {\n  }\n  var Companion_instance_1;\n  function Companion_getInstance_1() {\n    return Companion_instance_1;\n  }\n  function Companion_1() {\n  }\n  var Companion_instance_2;\n  function Companion_getInstance_2() {\n    return Companion_instance_2;\n  }\n  function Companion_2() {\n  }\n  var Companion_instance_3;\n  function Companion_getInstance_3() {\n    return Companion_instance_3;\n  }\n  function TimeBased(nanoseconds) {\n    DateTimeUnit.call(this);\n    this.x14_1 = nanoseconds;\n    // Inline function 'kotlin.require' call\n    if (!(compare(this.x14_1, new Long(0, 0)) > 0)) {\n      var message = 'Unit duration must be positive, but was ' + this.x14_1.toString() + ' ns.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    if (equalsLong(modulo(this.x14_1, new Long(817405952, 838)), new Long(0, 0))) {\n      this.y14_1 = 'HOUR';\n      this.z14_1 = divide(this.x14_1, new Long(817405952, 838));\n    } else {\n      if (equalsLong(modulo(this.x14_1, new Long(-129542144, 13)), new Long(0, 0))) {\n        this.y14_1 = 'MINUTE';\n        this.z14_1 = divide(this.x14_1, new Long(-129542144, 13));\n      } else {\n        var tmp0 = this.x14_1;\n        // Inline function 'kotlin.Long.rem' call\n        var other = 1000000000;\n        var tmp$ret$2 = modulo(tmp0, fromInt(other));\n        if (equalsLong(tmp$ret$2, new Long(0, 0))) {\n          this.y14_1 = 'SECOND';\n          var tmp = this;\n          var tmp0_0 = this.x14_1;\n          // Inline function 'kotlin.Long.div' call\n          var other_0 = 1000000000;\n          tmp.z14_1 = divide(tmp0_0, fromInt(other_0));\n        } else {\n          // Inline function 'kotlin.Long.rem' call\n          var this_0 = this.x14_1;\n          var tmp$ret$4 = modulo(this_0, fromInt(1000000));\n          if (equalsLong(tmp$ret$4, new Long(0, 0))) {\n            this.y14_1 = 'MILLISECOND';\n            var tmp_0 = this;\n            // Inline function 'kotlin.Long.div' call\n            var this_1 = this.x14_1;\n            tmp_0.z14_1 = divide(this_1, fromInt(1000000));\n          } else {\n            // Inline function 'kotlin.Long.rem' call\n            var this_2 = this.x14_1;\n            var tmp$ret$6 = modulo(this_2, fromInt(1000));\n            if (equalsLong(tmp$ret$6, new Long(0, 0))) {\n              this.y14_1 = 'MICROSECOND';\n              var tmp_1 = this;\n              // Inline function 'kotlin.Long.div' call\n              var this_3 = this.x14_1;\n              tmp_1.z14_1 = divide(this_3, fromInt(1000));\n            } else {\n              this.y14_1 = 'NANOSECOND';\n              this.z14_1 = this.x14_1;\n            }\n          }\n        }\n      }\n    }\n  }\n  protoOf(TimeBased).a15 = function (scalar) {\n    return new TimeBased(safeMultiply(this.x14_1, fromInt(scalar)));\n  };\n  protoOf(TimeBased).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof TimeBased) {\n        tmp_0 = equalsLong(this.x14_1, other.x14_1);\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(TimeBased).hashCode = function () {\n    return convertToInt(this.x14_1) ^ convertToInt(shiftRight(this.x14_1, 32));\n  };\n  protoOf(TimeBased).toString = function () {\n    return this.b15(this.z14_1, this.y14_1);\n  };\n  function DateBased() {\n    DateTimeUnit.call(this);\n  }\n  function DayBased(days) {\n    DateBased.call(this);\n    this.d15_1 = days;\n    // Inline function 'kotlin.require' call\n    if (!(this.d15_1 > 0)) {\n      var message = 'Unit duration must be positive, but was ' + this.d15_1 + ' days.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n  }\n  protoOf(DayBased).a15 = function (scalar) {\n    return new DayBased(safeMultiply_0(this.d15_1, scalar));\n  };\n  protoOf(DayBased).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof DayBased) {\n        tmp_0 = this.d15_1 === other.d15_1;\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(DayBased).hashCode = function () {\n    return this.d15_1 ^ 65536;\n  };\n  protoOf(DayBased).toString = function () {\n    return (this.d15_1 % 7 | 0) === 0 ? this.c15(this.d15_1 / 7 | 0, 'WEEK') : this.c15(this.d15_1, 'DAY');\n  };\n  function MonthBased(months) {\n    DateBased.call(this);\n    this.e15_1 = months;\n    // Inline function 'kotlin.require' call\n    if (!(this.e15_1 > 0)) {\n      var message = 'Unit duration must be positive, but was ' + this.e15_1 + ' months.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n  }\n  protoOf(MonthBased).a15 = function (scalar) {\n    return new MonthBased(safeMultiply_0(this.e15_1, scalar));\n  };\n  protoOf(MonthBased).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof MonthBased) {\n        tmp_0 = this.e15_1 === other.e15_1;\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(MonthBased).hashCode = function () {\n    return this.e15_1 ^ 131072;\n  };\n  protoOf(MonthBased).toString = function () {\n    return (this.e15_1 % 1200 | 0) === 0 ? this.c15(this.e15_1 / 1200 | 0, 'CENTURY') : (this.e15_1 % 12 | 0) === 0 ? this.c15(this.e15_1 / 12 | 0, 'YEAR') : (this.e15_1 % 3 | 0) === 0 ? this.c15(this.e15_1 / 3 | 0, 'QUARTER') : this.c15(this.e15_1, 'MONTH');\n  };\n  function Companion_3() {\n    Companion_instance_4 = this;\n    this.f15_1 = new TimeBased(new Long(1, 0));\n    this.g15_1 = this.f15_1.a15(1000);\n    this.h15_1 = this.g15_1.a15(1000);\n    this.i15_1 = this.h15_1.a15(1000);\n    this.j15_1 = this.i15_1.a15(60);\n    this.k15_1 = this.j15_1.a15(60);\n    this.l15_1 = new DayBased(1);\n    this.m15_1 = this.l15_1.a15(7);\n    this.n15_1 = new MonthBased(1);\n    this.o15_1 = this.n15_1.a15(3);\n    this.p15_1 = this.n15_1.a15(12);\n    this.q15_1 = this.p15_1.a15(100);\n  }\n  var Companion_instance_4;\n  function Companion_getInstance_4() {\n    if (Companion_instance_4 == null)\n      new Companion_3();\n    return Companion_instance_4;\n  }\n  function DateTimeUnit() {\n    Companion_getInstance_4();\n  }\n  protoOf(DateTimeUnit).c15 = function (value, unit) {\n    return value === 1 ? unit : '' + value + '-' + unit;\n  };\n  protoOf(DateTimeUnit).b15 = function (value, unit) {\n    return equalsLong(value, new Long(1, 0)) ? unit : value.toString() + '-' + unit;\n  };\n  function get_isoDayNumber(_this__u8e3s4) {\n    return _this__u8e3s4.a2_1 + 1 | 0;\n  }\n  var DayOfWeek_MONDAY_instance;\n  var DayOfWeek_TUESDAY_instance;\n  var DayOfWeek_WEDNESDAY_instance;\n  var DayOfWeek_THURSDAY_instance;\n  var DayOfWeek_FRIDAY_instance;\n  var DayOfWeek_SATURDAY_instance;\n  var DayOfWeek_SUNDAY_instance;\n  function values() {\n    return [DayOfWeek_MONDAY_getInstance(), DayOfWeek_TUESDAY_getInstance(), DayOfWeek_WEDNESDAY_getInstance(), DayOfWeek_THURSDAY_getInstance(), DayOfWeek_FRIDAY_getInstance(), DayOfWeek_SATURDAY_getInstance(), DayOfWeek_SUNDAY_getInstance()];\n  }\n  function get_entries() {\n    if ($ENTRIES == null)\n      $ENTRIES = enumEntries(values());\n    return $ENTRIES;\n  }\n  var DayOfWeek_entriesInitialized;\n  function DayOfWeek_initEntries() {\n    if (DayOfWeek_entriesInitialized)\n      return Unit_instance;\n    DayOfWeek_entriesInitialized = true;\n    DayOfWeek_MONDAY_instance = new DayOfWeek('MONDAY', 0);\n    DayOfWeek_TUESDAY_instance = new DayOfWeek('TUESDAY', 1);\n    DayOfWeek_WEDNESDAY_instance = new DayOfWeek('WEDNESDAY', 2);\n    DayOfWeek_THURSDAY_instance = new DayOfWeek('THURSDAY', 3);\n    DayOfWeek_FRIDAY_instance = new DayOfWeek('FRIDAY', 4);\n    DayOfWeek_SATURDAY_instance = new DayOfWeek('SATURDAY', 5);\n    DayOfWeek_SUNDAY_instance = new DayOfWeek('SUNDAY', 6);\n  }\n  var $ENTRIES;\n  function DayOfWeek(name, ordinal) {\n    Enum.call(this, name, ordinal);\n  }\n  function DayOfWeek_0(isoDayNumber) {\n    // Inline function 'kotlin.require' call\n    if (!(1 <= isoDayNumber ? isoDayNumber <= 7 : false)) {\n      var message = 'Expected ISO day-of-week number in 1..7, got ' + isoDayNumber;\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    return get_entries().p(isoDayNumber - 1 | 0);\n  }\n  function DayOfWeek_MONDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_MONDAY_instance;\n  }\n  function DayOfWeek_TUESDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_TUESDAY_instance;\n  }\n  function DayOfWeek_WEDNESDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_WEDNESDAY_instance;\n  }\n  function DayOfWeek_THURSDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_THURSDAY_instance;\n  }\n  function DayOfWeek_FRIDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_FRIDAY_instance;\n  }\n  function DayOfWeek_SATURDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_SATURDAY_instance;\n  }\n  function DayOfWeek_SUNDAY_getInstance() {\n    DayOfWeek_initEntries();\n    return DayOfWeek_SUNDAY_instance;\n  }\n  function DateTimeFormatException_init_$Init$($this) {\n    IllegalArgumentException_init_$Init$($this);\n    DateTimeFormatException.call($this);\n    return $this;\n  }\n  function DateTimeFormatException_init_$Create$() {\n    var tmp = DateTimeFormatException_init_$Init$(objectCreate(protoOf(DateTimeFormatException)));\n    captureStack(tmp, DateTimeFormatException_init_$Create$);\n    return tmp;\n  }\n  function DateTimeFormatException_init_$Init$_0(message, $this) {\n    IllegalArgumentException_init_$Init$_0(message, $this);\n    DateTimeFormatException.call($this);\n    return $this;\n  }\n  function DateTimeFormatException_init_$Create$_0(message) {\n    var tmp = DateTimeFormatException_init_$Init$_0(message, objectCreate(protoOf(DateTimeFormatException)));\n    captureStack(tmp, DateTimeFormatException_init_$Create$_0);\n    return tmp;\n  }\n  function DateTimeFormatException_init_$Init$_1(message, cause, $this) {\n    IllegalArgumentException_init_$Init$_1(message, cause, $this);\n    DateTimeFormatException.call($this);\n    return $this;\n  }\n  function DateTimeFormatException_init_$Create$_1(message, cause) {\n    var tmp = DateTimeFormatException_init_$Init$_1(message, cause, objectCreate(protoOf(DateTimeFormatException)));\n    captureStack(tmp, DateTimeFormatException_init_$Create$_1);\n    return tmp;\n  }\n  function DateTimeFormatException() {\n    captureStack(this, DateTimeFormatException);\n  }\n  function IllegalTimeZoneException_init_$Init$($this) {\n    IllegalArgumentException_init_$Init$($this);\n    IllegalTimeZoneException.call($this);\n    return $this;\n  }\n  function IllegalTimeZoneException_init_$Create$() {\n    var tmp = IllegalTimeZoneException_init_$Init$(objectCreate(protoOf(IllegalTimeZoneException)));\n    captureStack(tmp, IllegalTimeZoneException_init_$Create$);\n    return tmp;\n  }\n  function IllegalTimeZoneException_init_$Init$_0(message, $this) {\n    IllegalArgumentException_init_$Init$_0(message, $this);\n    IllegalTimeZoneException.call($this);\n    return $this;\n  }\n  function IllegalTimeZoneException_init_$Create$_0(message) {\n    var tmp = IllegalTimeZoneException_init_$Init$_0(message, objectCreate(protoOf(IllegalTimeZoneException)));\n    captureStack(tmp, IllegalTimeZoneException_init_$Create$_0);\n    return tmp;\n  }\n  function IllegalTimeZoneException_init_$Init$_1(cause, $this) {\n    IllegalArgumentException_init_$Init$_2(cause, $this);\n    IllegalTimeZoneException.call($this);\n    return $this;\n  }\n  function IllegalTimeZoneException_init_$Create$_1(cause) {\n    var tmp = IllegalTimeZoneException_init_$Init$_1(cause, objectCreate(protoOf(IllegalTimeZoneException)));\n    captureStack(tmp, IllegalTimeZoneException_init_$Create$_1);\n    return tmp;\n  }\n  function IllegalTimeZoneException_init_$Init$_2(message, cause, $this) {\n    IllegalArgumentException_init_$Init$_1(message, cause, $this);\n    IllegalTimeZoneException.call($this);\n    return $this;\n  }\n  function IllegalTimeZoneException_init_$Create$_2(message, cause) {\n    var tmp = IllegalTimeZoneException_init_$Init$_2(message, cause, objectCreate(protoOf(IllegalTimeZoneException)));\n    captureStack(tmp, IllegalTimeZoneException_init_$Create$_2);\n    return tmp;\n  }\n  function IllegalTimeZoneException() {\n    captureStack(this, IllegalTimeZoneException);\n  }\n  function DateTimeArithmeticException_init_$Init$($this) {\n    RuntimeException_init_$Init$($this);\n    DateTimeArithmeticException.call($this);\n    return $this;\n  }\n  function DateTimeArithmeticException_init_$Create$() {\n    var tmp = DateTimeArithmeticException_init_$Init$(objectCreate(protoOf(DateTimeArithmeticException)));\n    captureStack(tmp, DateTimeArithmeticException_init_$Create$);\n    return tmp;\n  }\n  function DateTimeArithmeticException_init_$Init$_0(message, cause, $this) {\n    RuntimeException_init_$Init$_0(message, cause, $this);\n    DateTimeArithmeticException.call($this);\n    return $this;\n  }\n  function DateTimeArithmeticException_init_$Create$_0(message, cause) {\n    var tmp = DateTimeArithmeticException_init_$Init$_0(message, cause, objectCreate(protoOf(DateTimeArithmeticException)));\n    captureStack(tmp, DateTimeArithmeticException_init_$Create$_0);\n    return tmp;\n  }\n  function DateTimeArithmeticException() {\n    captureStack(this, DateTimeArithmeticException);\n  }\n  function plus_0(_this__u8e3s4, value, unit) {\n    return plus_1(_this__u8e3s4, fromInt(value), unit);\n  }\n  function getIsoDateFormat() {\n    return Formats_getInstance().s15();\n  }\n  function format(_this__u8e3s4, format) {\n    return format.t15(_this__u8e3s4);\n  }\n  function atTime(_this__u8e3s4, time) {\n    return new LocalDateTime(_this__u8e3s4, time);\n  }\n  function getIsoDateTimeFormat() {\n    return Formats_getInstance_0().u15_1;\n  }\n  function format_0(_this__u8e3s4, format) {\n    return format.t15(_this__u8e3s4);\n  }\n  function getIsoTimeFormat() {\n    return Formats_instance_1.s15();\n  }\n  function format_1(_this__u8e3s4, format) {\n    return format.t15(_this__u8e3s4);\n  }\n  function get_number(_this__u8e3s4) {\n    return _this__u8e3s4.a2_1 + 1 | 0;\n  }\n  var Month_JANUARY_instance;\n  var Month_FEBRUARY_instance;\n  var Month_MARCH_instance;\n  var Month_APRIL_instance;\n  var Month_MAY_instance;\n  var Month_JUNE_instance;\n  var Month_JULY_instance;\n  var Month_AUGUST_instance;\n  var Month_SEPTEMBER_instance;\n  var Month_OCTOBER_instance;\n  var Month_NOVEMBER_instance;\n  var Month_DECEMBER_instance;\n  function values_0() {\n    return [Month_JANUARY_getInstance(), Month_FEBRUARY_getInstance(), Month_MARCH_getInstance(), Month_APRIL_getInstance(), Month_MAY_getInstance(), Month_JUNE_getInstance(), Month_JULY_getInstance(), Month_AUGUST_getInstance(), Month_SEPTEMBER_getInstance(), Month_OCTOBER_getInstance(), Month_NOVEMBER_getInstance(), Month_DECEMBER_getInstance()];\n  }\n  function get_entries_0() {\n    if ($ENTRIES_0 == null)\n      $ENTRIES_0 = enumEntries(values_0());\n    return $ENTRIES_0;\n  }\n  var Month_entriesInitialized;\n  function Month_initEntries() {\n    if (Month_entriesInitialized)\n      return Unit_instance;\n    Month_entriesInitialized = true;\n    Month_JANUARY_instance = new Month('JANUARY', 0);\n    Month_FEBRUARY_instance = new Month('FEBRUARY', 1);\n    Month_MARCH_instance = new Month('MARCH', 2);\n    Month_APRIL_instance = new Month('APRIL', 3);\n    Month_MAY_instance = new Month('MAY', 4);\n    Month_JUNE_instance = new Month('JUNE', 5);\n    Month_JULY_instance = new Month('JULY', 6);\n    Month_AUGUST_instance = new Month('AUGUST', 7);\n    Month_SEPTEMBER_instance = new Month('SEPTEMBER', 8);\n    Month_OCTOBER_instance = new Month('OCTOBER', 9);\n    Month_NOVEMBER_instance = new Month('NOVEMBER', 10);\n    Month_DECEMBER_instance = new Month('DECEMBER', 11);\n  }\n  var $ENTRIES_0;\n  function Month(name, ordinal) {\n    Enum.call(this, name, ordinal);\n  }\n  function Month_0(number) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.require' call\n    if (!(1 <= number ? number <= 12 : false)) {\n      var message = 'Failed requirement.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    return get_entries_0().p(number - 1 | 0);\n  }\n  function Month_JANUARY_getInstance() {\n    Month_initEntries();\n    return Month_JANUARY_instance;\n  }\n  function Month_FEBRUARY_getInstance() {\n    Month_initEntries();\n    return Month_FEBRUARY_instance;\n  }\n  function Month_MARCH_getInstance() {\n    Month_initEntries();\n    return Month_MARCH_instance;\n  }\n  function Month_APRIL_getInstance() {\n    Month_initEntries();\n    return Month_APRIL_instance;\n  }\n  function Month_MAY_getInstance() {\n    Month_initEntries();\n    return Month_MAY_instance;\n  }\n  function Month_JUNE_getInstance() {\n    Month_initEntries();\n    return Month_JUNE_instance;\n  }\n  function Month_JULY_getInstance() {\n    Month_initEntries();\n    return Month_JULY_instance;\n  }\n  function Month_AUGUST_getInstance() {\n    Month_initEntries();\n    return Month_AUGUST_instance;\n  }\n  function Month_SEPTEMBER_getInstance() {\n    Month_initEntries();\n    return Month_SEPTEMBER_instance;\n  }\n  function Month_OCTOBER_getInstance() {\n    Month_initEntries();\n    return Month_OCTOBER_instance;\n  }\n  function Month_NOVEMBER_getInstance() {\n    Month_initEntries();\n    return Month_NOVEMBER_instance;\n  }\n  function Month_DECEMBER_getInstance() {\n    Month_initEntries();\n    return Month_DECEMBER_instance;\n  }\n  function Companion_4() {\n    Companion_instance_5 = this;\n    this.v15_1 = new OverloadMarker();\n  }\n  var Companion_instance_5;\n  function Companion_getInstance_5() {\n    if (Companion_instance_5 == null)\n      new Companion_4();\n    return Companion_instance_5;\n  }\n  function OverloadMarker() {\n    Companion_getInstance_5();\n  }\n  function format_2(_this__u8e3s4, format) {\n    return format.t15(_this__u8e3s4);\n  }\n  function getIsoUtcOffsetFormat() {\n    return Formats_instance_2.s15();\n  }\n  function asTimeZone(_this__u8e3s4) {\n    return FixedOffsetTimeZone_init_$Create$(_this__u8e3s4);\n  }\n  function AbstractDateTimeFormat() {\n  }\n  protoOf(AbstractDateTimeFormat).t15 = function (value) {\n    // Inline function 'kotlin.also' call\n    var this_0 = StringBuilder_init_$Create$();\n    this.w15().d16().e16(this.x15(value), this_0);\n    return this_0.toString();\n  };\n  protoOf(AbstractDateTimeFormat).sf = function (input) {\n    var tmp;\n    try {\n      tmp = Parser__match$default_impl_x2xlti(_Parser___init__impl__gdyfby(this.w15().f16()), input, this.z15());\n    } catch ($p) {\n      var tmp_0;\n      if ($p instanceof ParseException) {\n        var e = $p;\n        throw DateTimeFormatException_init_$Create$_1(\"Failed to parse value from '\" + toString(input) + \"'\", e);\n      } else {\n        throw $p;\n      }\n    }\n    var matched = tmp;\n    try {\n      return this.y15(matched);\n    } catch ($p) {\n      if ($p instanceof IllegalArgumentException) {\n        var e_0 = $p;\n        var message = e_0.message;\n        throw DateTimeFormatException_init_$Create$_1(message == null ? \"The value parsed from '\" + toString(input) + \"' is invalid\" : '' + message + \" (when parsing '\" + toString(input) + \"')\", e_0);\n      } else {\n        throw $p;\n      }\n    }\n  };\n  var Padding_NONE_instance;\n  var Padding_ZERO_instance;\n  var Padding_SPACE_instance;\n  var Padding_entriesInitialized;\n  function Padding_initEntries() {\n    if (Padding_entriesInitialized)\n      return Unit_instance;\n    Padding_entriesInitialized = true;\n    Padding_NONE_instance = new Padding('NONE', 0);\n    Padding_ZERO_instance = new Padding('ZERO', 1);\n    Padding_SPACE_instance = new Padding('SPACE', 2);\n  }\n  function Padding(name, ordinal) {\n    Enum.call(this, name, ordinal);\n  }\n  function Padding_NONE_getInstance() {\n    Padding_initEntries();\n    return Padding_NONE_instance;\n  }\n  function Padding_ZERO_getInstance() {\n    Padding_initEntries();\n    return Padding_ZERO_instance;\n  }\n  function Padding_SPACE_getInstance() {\n    Padding_initEntries();\n    return Padding_SPACE_instance;\n  }\n  function WithYearMonth() {\n  }\n  function WithDate() {\n  }\n  function WithTime() {\n  }\n  function WithUtcOffset() {\n  }\n  function char(_this__u8e3s4, value) {\n    return _this__u8e3s4.k16(toString_0(value));\n  }\n  function optional(_this__u8e3s4, ifZero, format) {\n    ifZero = ifZero === VOID ? '' : ifZero;\n    var tmp;\n    if (isInterface(_this__u8e3s4, AbstractDateTimeFormatBuilder)) {\n      _this__u8e3s4.c17(ifZero, typeof format === 'function' ? format : THROW_CCE());\n      tmp = Unit_instance;\n    } else {\n      throw IllegalStateException_init_$Create$('impossible');\n    }\n    return tmp;\n  }\n  function alternativeParsing(_this__u8e3s4, alternativeFormats, primaryFormat) {\n    var tmp;\n    if (isInterface(_this__u8e3s4, AbstractDateTimeFormatBuilder)) {\n      var tmp_0 = (isArray(alternativeFormats) ? alternativeFormats : THROW_CCE()).slice();\n      _this__u8e3s4.d17(tmp_0, typeof primaryFormat === 'function' ? primaryFormat : THROW_CCE());\n      tmp = Unit_instance;\n    } else {\n      throw IllegalStateException_init_$Create$('impossible');\n    }\n    return tmp;\n  }\n  function AbstractDateTimeFormatBuilder() {\n  }\n  function secondFractionInternal(_this__u8e3s4, minLength, maxLength, grouping) {\n    if (isInterface(_this__u8e3s4, AbstractWithTimeBuilder)) {\n      _this__u8e3s4.k17(new BasicFormatStructure(new FractionalSecondDirective(minLength, maxLength, grouping)));\n    }\n  }\n  function get_ISO_DATE() {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    var tmp0 = ISO_DATE$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_DATE', 0, tmp, _get_ISO_DATE_$ref_powsum(), null);\n    return tmp0.p1();\n  }\n  var ISO_DATE$delegate;\n  function get_ISO_DATE_BASIC() {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    var tmp0 = ISO_DATE_BASIC$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_DATE_BASIC', 0, tmp, _get_ISO_DATE_BASIC_$ref_3fs8eb(), null);\n    return tmp0.p1();\n  }\n  var ISO_DATE_BASIC$delegate;\n  function get_emptyIncompleteLocalDate() {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    return emptyIncompleteLocalDate;\n  }\n  var emptyIncompleteLocalDate;\n  function IncompleteLocalDate(yearMonth, day, dayOfWeek, dayOfYear) {\n    yearMonth = yearMonth === VOID ? new IncompleteYearMonth() : yearMonth;\n    day = day === VOID ? null : day;\n    dayOfWeek = dayOfWeek === VOID ? null : dayOfWeek;\n    dayOfYear = dayOfYear === VOID ? null : dayOfYear;\n    this.l17_1 = yearMonth;\n    this.m17_1 = day;\n    this.n17_1 = dayOfWeek;\n    this.o17_1 = dayOfYear;\n  }\n  protoOf(IncompleteLocalDate).p17 = function (_set____db54di) {\n    this.m17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDate).q17 = function () {\n    return this.m17_1;\n  };\n  protoOf(IncompleteLocalDate).r17 = function (_set____db54di) {\n    this.n17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDate).s17 = function () {\n    return this.n17_1;\n  };\n  protoOf(IncompleteLocalDate).t17 = function (_set____db54di) {\n    this.o17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDate).u17 = function () {\n    return this.o17_1;\n  };\n  protoOf(IncompleteLocalDate).v17 = function () {\n    var year = requireParsedField(this.w17(), 'year');\n    var dayOfYear = this.o17_1;\n    var tmp;\n    if (dayOfYear == null) {\n      tmp = new LocalDate(year, requireParsedField(this.b18(), 'monthNumber'), requireParsedField(this.m17_1, 'day'));\n    } else {\n      // Inline function 'kotlin.also' call\n      var this_0 = plus_0(new LocalDate(year, 1, 1), dayOfYear - 1 | 0, Companion_getInstance_4().l15_1);\n      if (!(this_0.x17_1 === year)) {\n        throw DateTimeFormatException_init_$Create$_0('Can not create a LocalDate from the given input: ' + ('the day of year is ' + dayOfYear + ', which is not a valid day of year for the year ' + year));\n      }\n      if (!(this.b18() == null) && !(get_number(this_0.a18()) === this.b18())) {\n        throw DateTimeFormatException_init_$Create$_0('Can not create a LocalDate from the given input: ' + ('the day of year is ' + dayOfYear + ', which is ' + this_0.a18().toString() + ', ') + ('but ' + this.b18() + ' was specified as the month number'));\n      }\n      if (!(this.m17_1 == null) && !(this_0.y17_1 === this.m17_1)) {\n        throw DateTimeFormatException_init_$Create$_0('Can not create a LocalDate from the given input: ' + ('the day of year is ' + dayOfYear + ', which is the day ' + this_0.y17_1 + ' of ' + this_0.a18().toString() + ', ') + ('but ' + this.m17_1 + ' was specified as the day of month'));\n      }\n      tmp = this_0;\n    }\n    var date = tmp;\n    var tmp0_safe_receiver = this.n17_1;\n    if (tmp0_safe_receiver == null)\n      null;\n    else {\n      // Inline function 'kotlin.let' call\n      if (!(tmp0_safe_receiver === get_isoDayNumber(date.s17()))) {\n        throw DateTimeFormatException_init_$Create$_0('Can not create a LocalDate from the given input: ' + ('the day of week is ' + DayOfWeek_0(tmp0_safe_receiver).toString() + ' but the date is ' + date.toString() + ', which is a ' + date.s17().toString()));\n      }\n    }\n    return date;\n  };\n  protoOf(IncompleteLocalDate).c18 = function (date) {\n    this.d18(date.x17_1);\n    this.e18(get_number(date.a18()));\n    this.m17_1 = date.y17_1;\n    this.n17_1 = get_isoDayNumber(date.s17());\n    this.o17_1 = date.u17();\n  };\n  protoOf(IncompleteLocalDate).f18 = function () {\n    return new IncompleteLocalDate(this.l17_1.f18(), this.m17_1, this.n17_1, this.o17_1);\n  };\n  protoOf(IncompleteLocalDate).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    var tmp_1;\n    var tmp_2;\n    if (other instanceof IncompleteLocalDate) {\n      tmp_2 = this.l17_1.equals(other.l17_1);\n    } else {\n      tmp_2 = false;\n    }\n    if (tmp_2) {\n      tmp_1 = this.m17_1 == other.m17_1;\n    } else {\n      tmp_1 = false;\n    }\n    if (tmp_1) {\n      tmp_0 = this.n17_1 == other.n17_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.o17_1 == other.o17_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IncompleteLocalDate).hashCode = function () {\n    var tmp = imul(this.l17_1.hashCode(), 29791);\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver = this.m17_1;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);\n    var tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;\n    var tmp_0 = tmp + imul(tmp$ret$0, 961) | 0;\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_0 = this.n17_1;\n    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);\n    var tmp$ret$1 = tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0;\n    var tmp_1 = tmp_0 + imul(tmp$ret$1, 31) | 0;\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_1 = this.o17_1;\n    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : hashCode(tmp0_safe_receiver_1);\n    return tmp_1 + (tmp1_elvis_lhs_1 == null ? 0 : tmp1_elvis_lhs_1) | 0;\n  };\n  protoOf(IncompleteLocalDate).toString = function () {\n    var tmp;\n    if (this.o17_1 == null) {\n      var tmp_0 = this.l17_1.toString();\n      var tmp0_elvis_lhs = this.m17_1;\n      var tmp_1 = toString(tmp0_elvis_lhs == null ? '??' : tmp0_elvis_lhs);\n      var tmp1_elvis_lhs = this.n17_1;\n      tmp = tmp_0 + '-' + tmp_1 + ' (day of week is ' + toString(tmp1_elvis_lhs == null ? '??' : tmp1_elvis_lhs) + ')';\n    } else if (this.m17_1 == null && this.b18() == null) {\n      var tmp2_elvis_lhs = this.l17_1.g18_1;\n      var tmp_2 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);\n      var tmp_3 = this.o17_1;\n      var tmp3_elvis_lhs = this.n17_1;\n      tmp = '(' + tmp_2 + ')-' + tmp_3 + ' (day of week is ' + toString(tmp3_elvis_lhs == null ? '??' : tmp3_elvis_lhs) + ')';\n    } else {\n      var tmp_4 = this.l17_1.toString();\n      var tmp4_elvis_lhs = this.m17_1;\n      var tmp_5 = toString(tmp4_elvis_lhs == null ? '??' : tmp4_elvis_lhs);\n      var tmp5_elvis_lhs = this.n17_1;\n      tmp = tmp_4 + '-' + tmp_5 + ' (day of week is ' + toString(tmp5_elvis_lhs == null ? '??' : tmp5_elvis_lhs) + ', day of year is ' + this.o17_1 + ')';\n    }\n    return tmp;\n  };\n  protoOf(IncompleteLocalDate).d18 = function (_set____db54di) {\n    this.l17_1.g18_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDate).w17 = function () {\n    return this.l17_1.g18_1;\n  };\n  protoOf(IncompleteLocalDate).e18 = function (_set____db54di) {\n    this.l17_1.h18_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDate).b18 = function () {\n    return this.l17_1.h18_1;\n  };\n  function Companion_5() {\n  }\n  protoOf(Companion_5).i18 = function (block) {\n    var builder = new Builder(new AppendableFormatStructure());\n    block(builder);\n    return new LocalDateFormat(builder.h17());\n  };\n  var Companion_instance_6;\n  function Companion_getInstance_6() {\n    return Companion_instance_6;\n  }\n  function Builder(actualBuilder) {\n    this.j18_1 = actualBuilder;\n  }\n  protoOf(Builder).e17 = function () {\n    return this.j18_1;\n  };\n  protoOf(Builder).k18 = function (structure) {\n    return this.j18_1.i17(structure);\n  };\n  protoOf(Builder).f17 = function () {\n    return new Builder(new AppendableFormatStructure());\n  };\n  function LocalDateFormat(actualFormat) {\n    AbstractDateTimeFormat.call(this);\n    this.m18_1 = actualFormat;\n  }\n  protoOf(LocalDateFormat).w15 = function () {\n    return this.m18_1;\n  };\n  protoOf(LocalDateFormat).n18 = function (value) {\n    // Inline function 'kotlin.apply' call\n    var this_0 = new IncompleteLocalDate();\n    this_0.c18(value);\n    return this_0;\n  };\n  protoOf(LocalDateFormat).x15 = function (value) {\n    return this.n18(value instanceof LocalDate ? value : THROW_CCE());\n  };\n  protoOf(LocalDateFormat).o18 = function (intermediate) {\n    return intermediate.v17();\n  };\n  protoOf(LocalDateFormat).y15 = function (intermediate) {\n    return this.o18(intermediate instanceof IncompleteLocalDate ? intermediate : THROW_CCE());\n  };\n  protoOf(LocalDateFormat).z15 = function () {\n    return get_emptyIncompleteLocalDate();\n  };\n  function AbstractWithDateBuilder() {\n  }\n  function DayDirective(padding) {\n    var tmp = DateFields_getInstance().p18_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.w18_1 = padding;\n  }\n  protoOf(DayDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof DayDirective) {\n      tmp = this.w18_1.equals(other.w18_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(DayDirective).hashCode = function () {\n    return this.w18_1.hashCode();\n  };\n  function DateFieldContainer$_get_day_$ref_2ebhxx() {\n    return function (p0) {\n      return p0.q17();\n    };\n  }\n  function DateFieldContainer$_set_day_$ref_s0jsax() {\n    return function (p0, p1) {\n      p0.p17(p1);\n      return Unit_instance;\n    };\n  }\n  function DateFieldContainer$_get_dayOfWeek_$ref_thwqom() {\n    return function (p0) {\n      return p0.s17();\n    };\n  }\n  function DateFieldContainer$_set_dayOfWeek_$ref_ea586a() {\n    return function (p0, p1) {\n      p0.r17(p1);\n      return Unit_instance;\n    };\n  }\n  function DateFieldContainer$_get_dayOfYear_$ref_2m6gfz() {\n    return function (p0) {\n      return p0.u17();\n    };\n  }\n  function DateFieldContainer$_set_dayOfYear_$ref_cll22d() {\n    return function (p0, p1) {\n      p0.t17(p1);\n      return Unit_instance;\n    };\n  }\n  function DateFields() {\n    DateFields_instance = this;\n    var tmp = this;\n    var tmp_0 = KMutableProperty1;\n    var tmp_1 = DateFieldContainer$_get_day_$ref_2ebhxx();\n    tmp.p18_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('day', 1, tmp_0, tmp_1, DateFieldContainer$_set_day_$ref_s0jsax())), 1, 31);\n    var tmp_2 = this;\n    var tmp_3 = KMutableProperty1;\n    var tmp_4 = DateFieldContainer$_get_dayOfWeek_$ref_thwqom();\n    tmp_2.q18_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('dayOfWeek', 1, tmp_3, tmp_4, DateFieldContainer$_set_dayOfWeek_$ref_ea586a())), 1, 7);\n    var tmp_5 = this;\n    var tmp_6 = KMutableProperty1;\n    var tmp_7 = DateFieldContainer$_get_dayOfYear_$ref_2m6gfz();\n    tmp_5.r18_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('dayOfYear', 1, tmp_6, tmp_7, DateFieldContainer$_set_dayOfYear_$ref_cll22d())), 1, 366);\n  }\n  var DateFields_instance;\n  function DateFields_getInstance() {\n    if (DateFields_instance == null)\n      new DateFields();\n    return DateFields_instance;\n  }\n  function ISO_DATE$delegate$lambda() {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    var tmp = Companion_instance_6;\n    return tmp.i18(ISO_DATE$delegate$lambda$lambda);\n  }\n  function ISO_DATE$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    $this$build.h16();\n    char($this$build, _Char___init__impl__6a9atx(45));\n    $this$build.j16();\n    char($this$build, _Char___init__impl__6a9atx(45));\n    $this$build.m16();\n    return Unit_instance;\n  }\n  function _get_ISO_DATE_$ref_powsum() {\n    return function () {\n      return get_ISO_DATE();\n    };\n  }\n  function ISO_DATE_BASIC$delegate$lambda() {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    var tmp = Companion_instance_6;\n    return tmp.i18(ISO_DATE_BASIC$delegate$lambda$lambda);\n  }\n  function ISO_DATE_BASIC$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalDateFormat_kt__k1uk9u();\n    $this$build.h16();\n    $this$build.j16();\n    $this$build.m16();\n    return Unit_instance;\n  }\n  function _get_ISO_DATE_BASIC_$ref_3fs8eb() {\n    return function () {\n      return get_ISO_DATE_BASIC();\n    };\n  }\n  var properties_initialized_LocalDateFormat_kt_fmnlhc;\n  function _init_properties_LocalDateFormat_kt__k1uk9u() {\n    if (!properties_initialized_LocalDateFormat_kt_fmnlhc) {\n      properties_initialized_LocalDateFormat_kt_fmnlhc = true;\n      ISO_DATE$delegate = lazy(ISO_DATE$delegate$lambda);\n      ISO_DATE_BASIC$delegate = lazy(ISO_DATE_BASIC$delegate$lambda);\n      emptyIncompleteLocalDate = new IncompleteLocalDate();\n    }\n  }\n  function get_ISO_DATETIME() {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    var tmp0 = ISO_DATETIME$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_DATETIME', 0, tmp, _get_ISO_DATETIME_$ref_5bxm11(), null);\n    return tmp0.p1();\n  }\n  var ISO_DATETIME$delegate;\n  function get_emptyIncompleteLocalDateTime() {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    return emptyIncompleteLocalDateTime;\n  }\n  var emptyIncompleteLocalDateTime;\n  function Companion_6() {\n  }\n  protoOf(Companion_6).c19 = function (block) {\n    var builder = new Builder_0(new AppendableFormatStructure());\n    block(builder);\n    return new LocalDateTimeFormat(builder.h17());\n  };\n  var Companion_instance_7;\n  function Companion_getInstance_7() {\n    return Companion_instance_7;\n  }\n  function Builder_0(actualBuilder) {\n    this.d19_1 = actualBuilder;\n  }\n  protoOf(Builder_0).e17 = function () {\n    return this.d19_1;\n  };\n  protoOf(Builder_0).e19 = function (structure) {\n    this.d19_1.i17(structure);\n  };\n  protoOf(Builder_0).f17 = function () {\n    return new Builder_0(new AppendableFormatStructure());\n  };\n  function LocalDateTimeFormat(actualFormat) {\n    AbstractDateTimeFormat.call(this);\n    this.f19_1 = actualFormat;\n  }\n  protoOf(LocalDateTimeFormat).w15 = function () {\n    return this.f19_1;\n  };\n  protoOf(LocalDateTimeFormat).g19 = function (value) {\n    // Inline function 'kotlin.apply' call\n    var this_0 = new IncompleteLocalDateTime();\n    this_0.j19(value);\n    return this_0;\n  };\n  protoOf(LocalDateTimeFormat).x15 = function (value) {\n    return this.g19(value instanceof LocalDateTime ? value : THROW_CCE());\n  };\n  protoOf(LocalDateTimeFormat).k19 = function (intermediate) {\n    return intermediate.l19();\n  };\n  protoOf(LocalDateTimeFormat).y15 = function (intermediate) {\n    return this.k19(intermediate instanceof IncompleteLocalDateTime ? intermediate : THROW_CCE());\n  };\n  protoOf(LocalDateTimeFormat).z15 = function () {\n    return get_emptyIncompleteLocalDateTime();\n  };\n  function IncompleteLocalDateTime(date, time) {\n    date = date === VOID ? new IncompleteLocalDate() : date;\n    time = time === VOID ? new IncompleteLocalTime() : time;\n    this.h19_1 = date;\n    this.i19_1 = time;\n  }\n  protoOf(IncompleteLocalDateTime).l19 = function () {\n    return new LocalDateTime(this.h19_1.v17(), this.i19_1.s19());\n  };\n  protoOf(IncompleteLocalDateTime).j19 = function (dateTime) {\n    this.h19_1.c18(dateTime.v14_1);\n    this.i19_1.t19(dateTime.w14_1);\n  };\n  protoOf(IncompleteLocalDateTime).f18 = function () {\n    return new IncompleteLocalDateTime(this.h19_1.f18(), this.i19_1.f18());\n  };\n  protoOf(IncompleteLocalDateTime).p17 = function (_set____db54di) {\n    this.h19_1.m17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).q17 = function () {\n    return this.h19_1.m17_1;\n  };\n  protoOf(IncompleteLocalDateTime).r17 = function (_set____db54di) {\n    this.h19_1.n17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).s17 = function () {\n    return this.h19_1.n17_1;\n  };\n  protoOf(IncompleteLocalDateTime).t17 = function (_set____db54di) {\n    this.h19_1.o17_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).u17 = function () {\n    return this.h19_1.o17_1;\n  };\n  protoOf(IncompleteLocalDateTime).d18 = function (_set____db54di) {\n    this.h19_1.d18(_set____db54di);\n  };\n  protoOf(IncompleteLocalDateTime).w17 = function () {\n    return this.h19_1.w17();\n  };\n  protoOf(IncompleteLocalDateTime).e18 = function (_set____db54di) {\n    this.h19_1.e18(_set____db54di);\n  };\n  protoOf(IncompleteLocalDateTime).b18 = function () {\n    return this.h19_1.b18();\n  };\n  protoOf(IncompleteLocalDateTime).u19 = function (_set____db54di) {\n    this.i19_1.p19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).v19 = function () {\n    return this.i19_1.p19_1;\n  };\n  protoOf(IncompleteLocalDateTime).w19 = function (_set____db54di) {\n    this.i19_1.q19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).x19 = function () {\n    return this.i19_1.q19_1;\n  };\n  protoOf(IncompleteLocalDateTime).y19 = function (_set____db54di) {\n    this.i19_1.r19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).z19 = function () {\n    return this.i19_1.r19_1;\n  };\n  protoOf(IncompleteLocalDateTime).a1a = function (_set____db54di) {\n    this.i19_1.m19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).b1a = function () {\n    return this.i19_1.m19_1;\n  };\n  protoOf(IncompleteLocalDateTime).c1a = function (_set____db54di) {\n    this.i19_1.n19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).d1a = function () {\n    return this.i19_1.n19_1;\n  };\n  protoOf(IncompleteLocalDateTime).e1a = function (_set____db54di) {\n    this.i19_1.o19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalDateTime).f1a = function () {\n    return this.i19_1.o19_1;\n  };\n  protoOf(IncompleteLocalDateTime).g1a = function (value) {\n    this.i19_1.g1a(value);\n  };\n  protoOf(IncompleteLocalDateTime).h1a = function () {\n    return this.i19_1.h1a();\n  };\n  function AbstractWithDateTimeBuilder() {\n  }\n  function ISO_DATETIME$delegate$lambda() {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    var tmp = Companion_instance_7;\n    return tmp.c19(ISO_DATETIME$delegate$lambda$lambda);\n  }\n  function ISO_DATETIME$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    $this$build.n16(get_ISO_DATE());\n    var tmp = [ISO_DATETIME$delegate$lambda$lambda$lambda];\n    alternativeParsing($this$build, tmp, ISO_DATETIME$delegate$lambda$lambda$lambda_0);\n    $this$build.v16(get_ISO_TIME());\n    return Unit_instance;\n  }\n  function ISO_DATETIME$delegate$lambda$lambda$lambda($this$alternativeParsing) {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(116));\n    return Unit_instance;\n  }\n  function ISO_DATETIME$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_LocalDateTimeFormat_kt__aloigl();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(84));\n    return Unit_instance;\n  }\n  function _get_ISO_DATETIME_$ref_5bxm11() {\n    return function () {\n      return get_ISO_DATETIME();\n    };\n  }\n  var properties_initialized_LocalDateTimeFormat_kt_67ys6r;\n  function _init_properties_LocalDateTimeFormat_kt__aloigl() {\n    if (!properties_initialized_LocalDateTimeFormat_kt_67ys6r) {\n      properties_initialized_LocalDateTimeFormat_kt_67ys6r = true;\n      ISO_DATETIME$delegate = lazy(ISO_DATETIME$delegate$lambda);\n      emptyIncompleteLocalDateTime = new IncompleteLocalDateTime();\n    }\n  }\n  function get_ISO_TIME() {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    var tmp0 = ISO_TIME$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_TIME', 0, tmp, _get_ISO_TIME_$ref_kyx2od(), null);\n    return tmp0.p1();\n  }\n  var ISO_TIME$delegate;\n  function get_emptyIncompleteLocalTime() {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    return emptyIncompleteLocalTime;\n  }\n  var emptyIncompleteLocalTime;\n  function TimeFieldContainer() {\n  }\n  function IncompleteLocalTime(hour, hourOfAmPm, amPm, minute, second, nanosecond) {\n    hour = hour === VOID ? null : hour;\n    hourOfAmPm = hourOfAmPm === VOID ? null : hourOfAmPm;\n    amPm = amPm === VOID ? null : amPm;\n    minute = minute === VOID ? null : minute;\n    second = second === VOID ? null : second;\n    nanosecond = nanosecond === VOID ? null : nanosecond;\n    this.m19_1 = hour;\n    this.n19_1 = hourOfAmPm;\n    this.o19_1 = amPm;\n    this.p19_1 = minute;\n    this.q19_1 = second;\n    this.r19_1 = nanosecond;\n  }\n  protoOf(IncompleteLocalTime).a1a = function (_set____db54di) {\n    this.m19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).b1a = function () {\n    return this.m19_1;\n  };\n  protoOf(IncompleteLocalTime).c1a = function (_set____db54di) {\n    this.n19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).d1a = function () {\n    return this.n19_1;\n  };\n  protoOf(IncompleteLocalTime).e1a = function (_set____db54di) {\n    this.o19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).f1a = function () {\n    return this.o19_1;\n  };\n  protoOf(IncompleteLocalTime).u19 = function (_set____db54di) {\n    this.p19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).v19 = function () {\n    return this.p19_1;\n  };\n  protoOf(IncompleteLocalTime).w19 = function (_set____db54di) {\n    this.q19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).x19 = function () {\n    return this.q19_1;\n  };\n  protoOf(IncompleteLocalTime).y19 = function (_set____db54di) {\n    this.r19_1 = _set____db54di;\n  };\n  protoOf(IncompleteLocalTime).z19 = function () {\n    return this.r19_1;\n  };\n  protoOf(IncompleteLocalTime).s19 = function () {\n    var tmp0_safe_receiver = this.m19_1;\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      var tmp0_safe_receiver_0 = this.n19_1;\n      if (tmp0_safe_receiver_0 == null)\n        null;\n      else {\n        // Inline function 'kotlin.let' call\n        // Inline function 'kotlin.require' call\n        if (!((((tmp0_safe_receiver + 11 | 0) % 12 | 0) + 1 | 0) === tmp0_safe_receiver_0)) {\n          var message = 'Inconsistent hour and hour-of-am-pm: hour is ' + tmp0_safe_receiver + ', but hour-of-am-pm is ' + tmp0_safe_receiver_0;\n          throw IllegalArgumentException_init_$Create$(toString(message));\n        }\n      }\n      var tmp1_safe_receiver = this.o19_1;\n      if (tmp1_safe_receiver == null)\n        null;\n      else {\n        // Inline function 'kotlin.let' call\n        // Inline function 'kotlin.require' call\n        if (!(tmp1_safe_receiver.equals(AmPmMarker_PM_getInstance()) === tmp0_safe_receiver >= 12)) {\n          var message_0 = 'Inconsistent hour and the AM/PM marker: hour is ' + tmp0_safe_receiver + ', but the AM/PM marker is ' + tmp1_safe_receiver.toString();\n          throw IllegalArgumentException_init_$Create$(toString(message_0));\n        }\n      }\n      tmp = tmp0_safe_receiver;\n    }\n    var tmp1_elvis_lhs = tmp;\n    var tmp_0;\n    if (tmp1_elvis_lhs == null) {\n      var tmp2_safe_receiver = this.n19_1;\n      var tmp_1;\n      if (tmp2_safe_receiver == null) {\n        tmp_1 = null;\n      } else {\n        // Inline function 'kotlin.let' call\n        var tmp0_safe_receiver_1 = this.o19_1;\n        var tmp_2;\n        if (tmp0_safe_receiver_1 == null) {\n          tmp_2 = null;\n        } else {\n          // Inline function 'kotlin.let' call\n          // Inline function 'kotlin.let' call\n          tmp_2 = (tmp2_safe_receiver === 12 ? 0 : tmp2_safe_receiver) + (tmp0_safe_receiver_1.equals(AmPmMarker_PM_getInstance()) ? 12 : 0) | 0;\n        }\n        tmp_1 = tmp_2;\n      }\n      tmp_0 = tmp_1;\n    } else {\n      tmp_0 = tmp1_elvis_lhs;\n    }\n    var tmp3_elvis_lhs = tmp_0;\n    var tmp_3;\n    if (tmp3_elvis_lhs == null) {\n      throw DateTimeFormatException_init_$Create$_0('Incomplete time: missing hour');\n    } else {\n      tmp_3 = tmp3_elvis_lhs;\n    }\n    var hour = tmp_3;\n    var tmp_4 = requireParsedField(this.p19_1, 'minute');\n    var tmp4_elvis_lhs = this.q19_1;\n    var tmp_5 = tmp4_elvis_lhs == null ? 0 : tmp4_elvis_lhs;\n    var tmp5_elvis_lhs = this.r19_1;\n    return new LocalTime(hour, tmp_4, tmp_5, tmp5_elvis_lhs == null ? 0 : tmp5_elvis_lhs);\n  };\n  protoOf(IncompleteLocalTime).t19 = function (localTime) {\n    this.m19_1 = localTime.l1a_1;\n    this.n19_1 = ((localTime.l1a_1 + 11 | 0) % 12 | 0) + 1 | 0;\n    this.o19_1 = localTime.l1a_1 >= 12 ? AmPmMarker_PM_getInstance() : AmPmMarker_AM_getInstance();\n    this.p19_1 = localTime.m1a_1;\n    this.q19_1 = localTime.n1a_1;\n    this.r19_1 = localTime.o1a_1;\n  };\n  protoOf(IncompleteLocalTime).f18 = function () {\n    return new IncompleteLocalTime(this.m19_1, this.n19_1, this.o19_1, this.p19_1, this.q19_1, this.r19_1);\n  };\n  protoOf(IncompleteLocalTime).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    var tmp_1;\n    var tmp_2;\n    var tmp_3;\n    var tmp_4;\n    if (other instanceof IncompleteLocalTime) {\n      tmp_4 = this.m19_1 == other.m19_1;\n    } else {\n      tmp_4 = false;\n    }\n    if (tmp_4) {\n      tmp_3 = this.n19_1 == other.n19_1;\n    } else {\n      tmp_3 = false;\n    }\n    if (tmp_3) {\n      tmp_2 = equals(this.o19_1, other.o19_1);\n    } else {\n      tmp_2 = false;\n    }\n    if (tmp_2) {\n      tmp_1 = this.p19_1 == other.p19_1;\n    } else {\n      tmp_1 = false;\n    }\n    if (tmp_1) {\n      tmp_0 = this.q19_1 == other.q19_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.r19_1 == other.r19_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IncompleteLocalTime).hashCode = function () {\n    var tmp0_elvis_lhs = this.m19_1;\n    var tmp = imul(tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs, 31);\n    var tmp1_elvis_lhs = this.n19_1;\n    var tmp_0 = tmp + imul(tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs, 31) | 0;\n    var tmp2_safe_receiver = this.o19_1;\n    var tmp3_elvis_lhs = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.hashCode();\n    var tmp_1 = tmp_0 + imul(tmp3_elvis_lhs == null ? 0 : tmp3_elvis_lhs, 31) | 0;\n    var tmp4_elvis_lhs = this.p19_1;\n    var tmp_2 = tmp_1 + imul(tmp4_elvis_lhs == null ? 0 : tmp4_elvis_lhs, 31) | 0;\n    var tmp5_elvis_lhs = this.q19_1;\n    var tmp_3 = tmp_2 + imul(tmp5_elvis_lhs == null ? 0 : tmp5_elvis_lhs, 31) | 0;\n    var tmp6_elvis_lhs = this.r19_1;\n    return tmp_3 + (tmp6_elvis_lhs == null ? 0 : tmp6_elvis_lhs) | 0;\n  };\n  protoOf(IncompleteLocalTime).toString = function () {\n    var tmp0_elvis_lhs = this.m19_1;\n    var tmp = toString(tmp0_elvis_lhs == null ? '??' : tmp0_elvis_lhs);\n    var tmp1_elvis_lhs = this.p19_1;\n    var tmp_0 = toString(tmp1_elvis_lhs == null ? '??' : tmp1_elvis_lhs);\n    var tmp2_elvis_lhs = this.q19_1;\n    var tmp_1 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);\n    var tmp3_safe_receiver = this.r19_1;\n    var tmp_2;\n    if (tmp3_safe_receiver == null) {\n      tmp_2 = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      // Inline function 'kotlin.let' call\n      var it = tmp3_safe_receiver.toString();\n      tmp_2 = padStart(it, 9 - it.length | 0, _Char___init__impl__6a9atx(48));\n    }\n    var tmp4_elvis_lhs = tmp_2;\n    return tmp + ':' + tmp_0 + ':' + tmp_1 + '.' + (tmp4_elvis_lhs == null ? '???' : tmp4_elvis_lhs);\n  };\n  var AmPmMarker_AM_instance;\n  var AmPmMarker_PM_instance;\n  var AmPmMarker_entriesInitialized;\n  function AmPmMarker_initEntries() {\n    if (AmPmMarker_entriesInitialized)\n      return Unit_instance;\n    AmPmMarker_entriesInitialized = true;\n    AmPmMarker_AM_instance = new AmPmMarker('AM', 0);\n    AmPmMarker_PM_instance = new AmPmMarker('PM', 1);\n  }\n  function AmPmMarker(name, ordinal) {\n    Enum.call(this, name, ordinal);\n  }\n  function Companion_7() {\n  }\n  protoOf(Companion_7).p1a = function (block) {\n    var builder = new Builder_1(new AppendableFormatStructure());\n    block(builder);\n    return new LocalTimeFormat(builder.h17());\n  };\n  var Companion_instance_8;\n  function Companion_getInstance_8() {\n    return Companion_instance_8;\n  }\n  function Builder_1(actualBuilder) {\n    this.q1a_1 = actualBuilder;\n  }\n  protoOf(Builder_1).e17 = function () {\n    return this.q1a_1;\n  };\n  protoOf(Builder_1).k17 = function (structure) {\n    this.q1a_1.i17(structure);\n  };\n  protoOf(Builder_1).f17 = function () {\n    return new Builder_1(new AppendableFormatStructure());\n  };\n  function LocalTimeFormat(actualFormat) {\n    AbstractDateTimeFormat.call(this);\n    this.r1a_1 = actualFormat;\n  }\n  protoOf(LocalTimeFormat).w15 = function () {\n    return this.r1a_1;\n  };\n  protoOf(LocalTimeFormat).s1a = function (value) {\n    // Inline function 'kotlin.apply' call\n    var this_0 = new IncompleteLocalTime();\n    this_0.t19(value);\n    return this_0;\n  };\n  protoOf(LocalTimeFormat).x15 = function (value) {\n    return this.s1a(value instanceof LocalTime ? value : THROW_CCE());\n  };\n  protoOf(LocalTimeFormat).t1a = function (intermediate) {\n    return intermediate.s19();\n  };\n  protoOf(LocalTimeFormat).y15 = function (intermediate) {\n    return this.t1a(intermediate instanceof IncompleteLocalTime ? intermediate : THROW_CCE());\n  };\n  protoOf(LocalTimeFormat).z15 = function () {\n    return get_emptyIncompleteLocalTime();\n  };\n  function AbstractWithTimeBuilder() {\n  }\n  function HourDirective(padding) {\n    var tmp = TimeFields_getInstance().u1a_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.e1b_1 = padding;\n  }\n  protoOf(HourDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof HourDirective) {\n      tmp = this.e1b_1.equals(other.e1b_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(HourDirective).hashCode = function () {\n    return this.e1b_1.hashCode();\n  };\n  function MinuteDirective(padding) {\n    var tmp = TimeFields_getInstance().v1a_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.j1b_1 = padding;\n  }\n  protoOf(MinuteDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof MinuteDirective) {\n      tmp = this.j1b_1.equals(other.j1b_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(MinuteDirective).hashCode = function () {\n    return this.j1b_1.hashCode();\n  };\n  function SecondDirective(padding) {\n    var tmp = TimeFields_getInstance().w1a_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.o1b_1 = padding;\n  }\n  protoOf(SecondDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof SecondDirective) {\n      tmp = this.o1b_1.equals(other.o1b_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(SecondDirective).hashCode = function () {\n    return this.o1b_1.hashCode();\n  };\n  function Companion_8() {\n    Companion_instance_9 = this;\n    this.p1b_1 = listOf([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    this.q1b_1 = listOf([2, 1, 0, 2, 1, 0, 2, 1, 0]);\n  }\n  var Companion_instance_9;\n  function Companion_getInstance_9() {\n    if (Companion_instance_9 == null)\n      new Companion_8();\n    return Companion_instance_9;\n  }\n  function FractionalSecondDirective(minDigits, maxDigits, zerosToAdd) {\n    Companion_getInstance_9();\n    zerosToAdd = zerosToAdd === VOID ? Companion_getInstance_9().p1b_1 : zerosToAdd;\n    DecimalFractionFieldFormatDirective.call(this, TimeFields_getInstance().x1a_1, minDigits, maxDigits, zerosToAdd);\n    this.v1b_1 = minDigits;\n    this.w1b_1 = maxDigits;\n  }\n  protoOf(FractionalSecondDirective).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof FractionalSecondDirective) {\n      tmp_0 = this.v1b_1 === other.v1b_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.w1b_1 === other.w1b_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(FractionalSecondDirective).hashCode = function () {\n    return imul(31, this.v1b_1) + this.w1b_1 | 0;\n  };\n  function TimeFieldContainer$_get_hour_$ref_8ezbwm() {\n    return function (p0) {\n      return p0.b1a();\n    };\n  }\n  function TimeFieldContainer$_set_hour_$ref_l7vnde() {\n    return function (p0, p1) {\n      p0.a1a(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFieldContainer$_get_minute_$ref_evb2i2() {\n    return function (p0) {\n      return p0.v19();\n    };\n  }\n  function TimeFieldContainer$_set_minute_$ref_6xin6() {\n    return function (p0, p1) {\n      p0.u19(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFieldContainer$_get_second_$ref_t7tjxy() {\n    return function (p0) {\n      return p0.x19();\n    };\n  }\n  function TimeFieldContainer$_set_second_$ref_qr1wvy() {\n    return function (p0, p1) {\n      p0.w19(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFieldContainer$_get_fractionOfSecond_$ref_u85by5() {\n    return function (p0) {\n      return p0.h1a();\n    };\n  }\n  function TimeFieldContainer$_set_fractionOfSecond_$ref_quw20n() {\n    return function (p0, p1) {\n      p0.g1a(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFieldContainer$_get_amPm_$ref_u9tt1b() {\n    return function (p0) {\n      return p0.f1a();\n    };\n  }\n  function TimeFieldContainer$_set_amPm_$ref_hgxhkj() {\n    return function (p0, p1) {\n      p0.e1a(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFieldContainer$_get_hourOfAmPm_$ref_okyxye() {\n    return function (p0) {\n      return p0.d1a();\n    };\n  }\n  function TimeFieldContainer$_set_hourOfAmPm_$ref_y4i32() {\n    return function (p0, p1) {\n      p0.c1a(p1);\n      return Unit_instance;\n    };\n  }\n  function TimeFields() {\n    TimeFields_instance = this;\n    var tmp = this;\n    var tmp_0 = KMutableProperty1;\n    var tmp_1 = TimeFieldContainer$_get_hour_$ref_8ezbwm();\n    tmp.u1a_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('hour', 1, tmp_0, tmp_1, TimeFieldContainer$_set_hour_$ref_l7vnde())), 0, 23);\n    var tmp_2 = this;\n    var tmp_3 = KMutableProperty1;\n    var tmp_4 = TimeFieldContainer$_get_minute_$ref_evb2i2();\n    tmp_2.v1a_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('minute', 1, tmp_3, tmp_4, TimeFieldContainer$_set_minute_$ref_6xin6())), 0, 59);\n    var tmp_5 = this;\n    var tmp_6 = KMutableProperty1;\n    var tmp_7 = TimeFieldContainer$_get_second_$ref_t7tjxy();\n    tmp_5.w1a_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('second', 1, tmp_6, tmp_7, TimeFieldContainer$_set_second_$ref_qr1wvy())), 0, 59, VOID, 0);\n    var tmp_8 = this;\n    var tmp_9 = KMutableProperty1;\n    var tmp_10 = TimeFieldContainer$_get_fractionOfSecond_$ref_u85by5();\n    tmp_8.x1a_1 = new GenericFieldSpec(new PropertyAccessor(getPropertyCallableRef('fractionOfSecond', 1, tmp_9, tmp_10, TimeFieldContainer$_set_fractionOfSecond_$ref_quw20n()), 'nanosecond'), VOID, new DecimalFraction(0, 9));\n    var tmp_11 = this;\n    var tmp_12 = KMutableProperty1;\n    var tmp_13 = TimeFieldContainer$_get_amPm_$ref_u9tt1b();\n    tmp_11.y1a_1 = new GenericFieldSpec(new PropertyAccessor(getPropertyCallableRef('amPm', 1, tmp_12, tmp_13, TimeFieldContainer$_set_amPm_$ref_hgxhkj())));\n    var tmp_14 = this;\n    var tmp_15 = KMutableProperty1;\n    var tmp_16 = TimeFieldContainer$_get_hourOfAmPm_$ref_okyxye();\n    tmp_14.z1a_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('hourOfAmPm', 1, tmp_15, tmp_16, TimeFieldContainer$_set_hourOfAmPm_$ref_y4i32())), 1, 12);\n  }\n  var TimeFields_instance;\n  function TimeFields_getInstance() {\n    if (TimeFields_instance == null)\n      new TimeFields();\n    return TimeFields_instance;\n  }\n  function ISO_TIME$delegate$lambda() {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    var tmp = Companion_instance_8;\n    return tmp.p1a(ISO_TIME$delegate$lambda$lambda);\n  }\n  function ISO_TIME$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    $this$build.p16();\n    char($this$build, _Char___init__impl__6a9atx(58));\n    $this$build.r16();\n    var tmp = [ISO_TIME$delegate$lambda$lambda$lambda];\n    alternativeParsing($this$build, tmp, ISO_TIME$delegate$lambda$lambda$lambda_0);\n    return Unit_instance;\n  }\n  function ISO_TIME$delegate$lambda$lambda$lambda($this$alternativeParsing) {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    return Unit_instance;\n  }\n  function ISO_TIME$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(58));\n    $this$alternativeParsing.t16();\n    optional($this$alternativeParsing, VOID, ISO_TIME$delegate$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_TIME$delegate$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_LocalTimeFormat_kt__5i3lfh();\n    char($this$optional, _Char___init__impl__6a9atx(46));\n    $this$optional.u16(1, 9);\n    return Unit_instance;\n  }\n  function _get_ISO_TIME_$ref_kyx2od() {\n    return function () {\n      return get_ISO_TIME();\n    };\n  }\n  function AmPmMarker_AM_getInstance() {\n    AmPmMarker_initEntries();\n    return AmPmMarker_AM_instance;\n  }\n  function AmPmMarker_PM_getInstance() {\n    AmPmMarker_initEntries();\n    return AmPmMarker_PM_instance;\n  }\n  var properties_initialized_LocalTimeFormat_kt_l1b0w1;\n  function _init_properties_LocalTimeFormat_kt__5i3lfh() {\n    if (!properties_initialized_LocalTimeFormat_kt_l1b0w1) {\n      properties_initialized_LocalTimeFormat_kt_l1b0w1 = true;\n      ISO_TIME$delegate = lazy(ISO_TIME$delegate$lambda);\n      emptyIncompleteLocalTime = new IncompleteLocalTime();\n    }\n  }\n  function get_ISO_OFFSET() {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp0 = ISO_OFFSET$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_OFFSET', 0, tmp, _get_ISO_OFFSET_$ref_70d0nn(), null);\n    return tmp0.p1();\n  }\n  var ISO_OFFSET$delegate;\n  var ISO_OFFSET_BASIC$delegate;\n  var FOUR_DIGIT_OFFSET$delegate;\n  function get_emptyIncompleteUtcOffset() {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    return emptyIncompleteUtcOffset;\n  }\n  var emptyIncompleteUtcOffset;\n  function UtcOffsetFieldContainer() {\n  }\n  function IncompleteUtcOffset(offsetIsNegative, offsetHours, offsetMinutesOfHour, offsetSecondsOfMinute) {\n    offsetIsNegative = offsetIsNegative === VOID ? null : offsetIsNegative;\n    offsetHours = offsetHours === VOID ? null : offsetHours;\n    offsetMinutesOfHour = offsetMinutesOfHour === VOID ? null : offsetMinutesOfHour;\n    offsetSecondsOfMinute = offsetSecondsOfMinute === VOID ? null : offsetSecondsOfMinute;\n    this.j1c_1 = offsetIsNegative;\n    this.k1c_1 = offsetHours;\n    this.l1c_1 = offsetMinutesOfHour;\n    this.m1c_1 = offsetSecondsOfMinute;\n  }\n  protoOf(IncompleteUtcOffset).b1c = function (_set____db54di) {\n    this.j1c_1 = _set____db54di;\n  };\n  protoOf(IncompleteUtcOffset).c1c = function () {\n    return this.j1c_1;\n  };\n  protoOf(IncompleteUtcOffset).d1c = function (_set____db54di) {\n    this.k1c_1 = _set____db54di;\n  };\n  protoOf(IncompleteUtcOffset).e1c = function () {\n    return this.k1c_1;\n  };\n  protoOf(IncompleteUtcOffset).f1c = function (_set____db54di) {\n    this.l1c_1 = _set____db54di;\n  };\n  protoOf(IncompleteUtcOffset).g1c = function () {\n    return this.l1c_1;\n  };\n  protoOf(IncompleteUtcOffset).h1c = function (_set____db54di) {\n    this.m1c_1 = _set____db54di;\n  };\n  protoOf(IncompleteUtcOffset).i1c = function () {\n    return this.m1c_1;\n  };\n  protoOf(IncompleteUtcOffset).n1c = function () {\n    var sign = this.j1c_1 === true ? -1 : 1;\n    var tmp0_safe_receiver = this.k1c_1;\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp = imul(tmp0_safe_receiver, sign);\n    }\n    var tmp_0 = tmp;\n    var tmp1_safe_receiver = this.l1c_1;\n    var tmp_1;\n    if (tmp1_safe_receiver == null) {\n      tmp_1 = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp_1 = imul(tmp1_safe_receiver, sign);\n    }\n    var tmp_2 = tmp_1;\n    var tmp2_safe_receiver = this.m1c_1;\n    var tmp_3;\n    if (tmp2_safe_receiver == null) {\n      tmp_3 = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp_3 = imul(tmp2_safe_receiver, sign);\n    }\n    return UtcOffset_0(tmp_0, tmp_2, tmp_3);\n  };\n  protoOf(IncompleteUtcOffset).o1c = function (offset) {\n    this.j1c_1 = offset.p1c_1 < 0;\n    // Inline function 'kotlin.math.absoluteValue' call\n    var this_0 = offset.p1c_1;\n    var totalSecondsAbs = abs(this_0);\n    this.k1c_1 = totalSecondsAbs / 3600 | 0;\n    this.l1c_1 = (totalSecondsAbs / 60 | 0) % 60 | 0;\n    this.m1c_1 = totalSecondsAbs % 60 | 0;\n  };\n  protoOf(IncompleteUtcOffset).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    var tmp_1;\n    var tmp_2;\n    if (other instanceof IncompleteUtcOffset) {\n      tmp_2 = this.j1c_1 == other.j1c_1;\n    } else {\n      tmp_2 = false;\n    }\n    if (tmp_2) {\n      tmp_1 = this.k1c_1 == other.k1c_1;\n    } else {\n      tmp_1 = false;\n    }\n    if (tmp_1) {\n      tmp_0 = this.l1c_1 == other.l1c_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.m1c_1 == other.m1c_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IncompleteUtcOffset).hashCode = function () {\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver = this.j1c_1;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);\n    var tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_0 = this.k1c_1;\n    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);\n    var tmp_0 = tmp + (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0) | 0;\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_1 = this.l1c_1;\n    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : hashCode(tmp0_safe_receiver_1);\n    var tmp_1 = tmp_0 + (tmp1_elvis_lhs_1 == null ? 0 : tmp1_elvis_lhs_1) | 0;\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_2 = this.m1c_1;\n    var tmp1_elvis_lhs_2 = tmp0_safe_receiver_2 == null ? null : hashCode(tmp0_safe_receiver_2);\n    return tmp_1 + (tmp1_elvis_lhs_2 == null ? 0 : tmp1_elvis_lhs_2) | 0;\n  };\n  protoOf(IncompleteUtcOffset).f18 = function () {\n    return new IncompleteUtcOffset(this.j1c_1, this.k1c_1, this.l1c_1, this.m1c_1);\n  };\n  protoOf(IncompleteUtcOffset).toString = function () {\n    var tmp0_safe_receiver = this.j1c_1;\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp = tmp0_safe_receiver ? '-' : '+';\n    }\n    var tmp1_elvis_lhs = tmp;\n    var tmp_0 = tmp1_elvis_lhs == null ? ' ' : tmp1_elvis_lhs;\n    var tmp2_elvis_lhs = this.k1c_1;\n    var tmp_1 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);\n    var tmp3_elvis_lhs = this.l1c_1;\n    var tmp_2 = toString(tmp3_elvis_lhs == null ? '??' : tmp3_elvis_lhs);\n    var tmp4_elvis_lhs = this.m1c_1;\n    return tmp_0 + tmp_1 + ':' + tmp_2 + ':' + toString(tmp4_elvis_lhs == null ? '??' : tmp4_elvis_lhs);\n  };\n  function UtcOffsetWholeHoursDirective(padding) {\n    var tmp = OffsetFields_getInstance().r1c_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.y1c_1 = padding;\n  }\n  protoOf(UtcOffsetWholeHoursDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof UtcOffsetWholeHoursDirective) {\n      tmp = this.y1c_1.equals(other.y1c_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(UtcOffsetWholeHoursDirective).hashCode = function () {\n    return this.y1c_1.hashCode();\n  };\n  function Companion_9() {\n  }\n  protoOf(Companion_9).z1c = function (block) {\n    var builder = new Builder_2(new AppendableFormatStructure());\n    block(builder);\n    return new UtcOffsetFormat(builder.h17());\n  };\n  var Companion_instance_10;\n  function Companion_getInstance_10() {\n    return Companion_instance_10;\n  }\n  function Builder_2(actualBuilder) {\n    this.a1d_1 = actualBuilder;\n  }\n  protoOf(Builder_2).e17 = function () {\n    return this.a1d_1;\n  };\n  protoOf(Builder_2).b1d = function (structure) {\n    this.a1d_1.i17(structure);\n  };\n  protoOf(Builder_2).f17 = function () {\n    return new Builder_2(new AppendableFormatStructure());\n  };\n  function UtcOffsetFormat(actualFormat) {\n    AbstractDateTimeFormat.call(this);\n    this.c1d_1 = actualFormat;\n  }\n  protoOf(UtcOffsetFormat).w15 = function () {\n    return this.c1d_1;\n  };\n  protoOf(UtcOffsetFormat).d1d = function (value) {\n    // Inline function 'kotlin.apply' call\n    var this_0 = new IncompleteUtcOffset();\n    this_0.o1c(value);\n    return this_0;\n  };\n  protoOf(UtcOffsetFormat).x15 = function (value) {\n    return this.d1d(value instanceof UtcOffset ? value : THROW_CCE());\n  };\n  protoOf(UtcOffsetFormat).e1d = function (intermediate) {\n    return intermediate.n1c();\n  };\n  protoOf(UtcOffsetFormat).y15 = function (intermediate) {\n    return this.e1d(intermediate instanceof IncompleteUtcOffset ? intermediate : THROW_CCE());\n  };\n  protoOf(UtcOffsetFormat).z15 = function () {\n    return get_emptyIncompleteUtcOffset();\n  };\n  function UtcOffsetFieldContainer$_get_offsetIsNegative_$ref_v5gok2() {\n    return function (p0) {\n      return p0.c1c();\n    };\n  }\n  function UtcOffsetFieldContainer$_set_offsetIsNegative_$ref_h7e0jq() {\n    return function (p0, p1) {\n      p0.b1c(p1);\n      return Unit_instance;\n    };\n  }\n  function OffsetFields$sign$1() {\n    var tmp = this;\n    var tmp_0 = KMutableProperty1;\n    var tmp_1 = UtcOffsetFieldContainer$_get_offsetIsNegative_$ref_v5gok2();\n    tmp.f1d_1 = new PropertyAccessor(getPropertyCallableRef('offsetIsNegative', 1, tmp_0, tmp_1, UtcOffsetFieldContainer$_set_offsetIsNegative_$ref_h7e0jq()));\n  }\n  protoOf(OffsetFields$sign$1).g1d = function () {\n    return this.f1d_1;\n  };\n  protoOf(OffsetFields$sign$1).h1d = function (obj) {\n    var tmp;\n    var tmp_0;\n    var tmp0_elvis_lhs = obj.e1c();\n    if ((tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs) === 0) {\n      var tmp1_elvis_lhs = obj.g1c();\n      tmp_0 = (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) === 0;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      var tmp2_elvis_lhs = obj.i1c();\n      tmp = (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) === 0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(OffsetFields$sign$1).i1d = function (obj) {\n    return this.h1d((!(obj == null) ? isInterface(obj, UtcOffsetFieldContainer) : false) ? obj : THROW_CCE());\n  };\n  function UtcOffsetFieldContainer$_get_offsetHours_$ref_elsov2() {\n    return function (p0) {\n      return p0.e1c();\n    };\n  }\n  function UtcOffsetFieldContainer$_set_offsetHours_$ref_4i2hci() {\n    return function (p0, p1) {\n      p0.d1c(p1);\n      return Unit_instance;\n    };\n  }\n  function UtcOffsetFieldContainer$_get_offsetMinutesOfHour_$ref_712kt() {\n    return function (p0) {\n      return p0.g1c();\n    };\n  }\n  function UtcOffsetFieldContainer$_set_offsetMinutesOfHour_$ref_ka4bon() {\n    return function (p0, p1) {\n      p0.f1c(p1);\n      return Unit_instance;\n    };\n  }\n  function UtcOffsetFieldContainer$_get_offsetSecondsOfMinute_$ref_xrmftp() {\n    return function (p0) {\n      return p0.i1c();\n    };\n  }\n  function UtcOffsetFieldContainer$_set_offsetSecondsOfMinute_$ref_virwvd() {\n    return function (p0, p1) {\n      p0.h1c(p1);\n      return Unit_instance;\n    };\n  }\n  function OffsetFields() {\n    OffsetFields_instance = this;\n    var tmp = this;\n    tmp.q1c_1 = new OffsetFields$sign$1();\n    var tmp_0 = this;\n    var tmp_1 = KMutableProperty1;\n    var tmp_2 = UtcOffsetFieldContainer$_get_offsetHours_$ref_elsov2();\n    var tmp0_accessor = new PropertyAccessor(getPropertyCallableRef('offsetHours', 1, tmp_1, tmp_2, UtcOffsetFieldContainer$_set_offsetHours_$ref_4i2hci()));\n    var tmp1_sign = this.q1c_1;\n    tmp_0.r1c_1 = new UnsignedFieldSpec(tmp0_accessor, 0, 18, VOID, 0, tmp1_sign);\n    var tmp_3 = this;\n    var tmp_4 = KMutableProperty1;\n    var tmp_5 = UtcOffsetFieldContainer$_get_offsetMinutesOfHour_$ref_712kt();\n    var tmp0_accessor_0 = new PropertyAccessor(getPropertyCallableRef('offsetMinutesOfHour', 1, tmp_4, tmp_5, UtcOffsetFieldContainer$_set_offsetMinutesOfHour_$ref_ka4bon()));\n    var tmp1_sign_0 = this.q1c_1;\n    tmp_3.s1c_1 = new UnsignedFieldSpec(tmp0_accessor_0, 0, 59, VOID, 0, tmp1_sign_0);\n    var tmp_6 = this;\n    var tmp_7 = KMutableProperty1;\n    var tmp_8 = UtcOffsetFieldContainer$_get_offsetSecondsOfMinute_$ref_xrmftp();\n    var tmp0_accessor_1 = new PropertyAccessor(getPropertyCallableRef('offsetSecondsOfMinute', 1, tmp_7, tmp_8, UtcOffsetFieldContainer$_set_offsetSecondsOfMinute_$ref_virwvd()));\n    var tmp1_sign_1 = this.q1c_1;\n    tmp_6.t1c_1 = new UnsignedFieldSpec(tmp0_accessor_1, 0, 59, VOID, 0, tmp1_sign_1);\n  }\n  var OffsetFields_instance;\n  function OffsetFields_getInstance() {\n    if (OffsetFields_instance == null)\n      new OffsetFields();\n    return OffsetFields_instance;\n  }\n  function AbstractWithOffsetBuilder() {\n  }\n  function UtcOffsetMinuteOfHourDirective(padding) {\n    var tmp = OffsetFields_getInstance().s1c_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.n1d_1 = padding;\n  }\n  protoOf(UtcOffsetMinuteOfHourDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof UtcOffsetMinuteOfHourDirective) {\n      tmp = this.n1d_1.equals(other.n1d_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(UtcOffsetMinuteOfHourDirective).hashCode = function () {\n    return this.n1d_1.hashCode();\n  };\n  function UtcOffsetSecondOfMinuteDirective(padding) {\n    var tmp = OffsetFields_getInstance().t1c_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.s1d_1 = padding;\n  }\n  protoOf(UtcOffsetSecondOfMinuteDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof UtcOffsetSecondOfMinuteDirective) {\n      tmp = this.s1d_1.equals(other.s1d_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(UtcOffsetSecondOfMinuteDirective).hashCode = function () {\n    return this.s1d_1.hashCode();\n  };\n  function isoOffset(_this__u8e3s4, zOnZero, useSeparator, outputMinute, outputSecond) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    // Inline function 'kotlin.require' call\n    if (!(outputMinute.b2(outputSecond) >= 0)) {\n      var message = 'Seconds cannot be included without minutes';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    if (zOnZero) {\n      optional(_this__u8e3s4, 'Z', isoOffset$lambda(outputMinute, useSeparator, outputSecond));\n    } else {\n      isoOffset$appendIsoOffsetWithoutZOnZero(_this__u8e3s4, outputMinute, useSeparator, outputSecond);\n    }\n  }\n  var WhenToOutput_NEVER_instance;\n  var WhenToOutput_IF_NONZERO_instance;\n  var WhenToOutput_ALWAYS_instance;\n  var WhenToOutput_entriesInitialized;\n  function WhenToOutput_initEntries() {\n    if (WhenToOutput_entriesInitialized)\n      return Unit_instance;\n    WhenToOutput_entriesInitialized = true;\n    WhenToOutput_NEVER_instance = new WhenToOutput('NEVER', 0);\n    WhenToOutput_IF_NONZERO_instance = new WhenToOutput('IF_NONZERO', 1);\n    WhenToOutput_ALWAYS_instance = new WhenToOutput('ALWAYS', 2);\n  }\n  function WhenToOutput(name, ordinal) {\n    Enum.call(this, name, ordinal);\n  }\n  function outputIfNeeded(_this__u8e3s4, whenToOutput, format) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    switch (whenToOutput.a2_1) {\n      case 0:\n        break;\n      case 1:\n        optional(_this__u8e3s4, VOID, outputIfNeeded$lambda(format));\n        break;\n      case 2:\n        format(_this__u8e3s4);\n        break;\n      default:\n        noWhenBranchMatchedException();\n        break;\n    }\n  }\n  function isoOffset$appendIsoOffsetWithoutZOnZero(_this__u8e3s4, $outputMinute, $useSeparator, $outputSecond) {\n    _this__u8e3s4.x16();\n    outputIfNeeded(_this__u8e3s4, $outputMinute, isoOffset$appendIsoOffsetWithoutZOnZero$lambda($useSeparator, $outputSecond));\n  }\n  function ISO_OFFSET$delegate$lambda() {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp = Companion_instance_10;\n    return tmp.z1c(ISO_OFFSET$delegate$lambda$lambda);\n  }\n  function ISO_OFFSET$delegate$lambda$lambda($this$build) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp = [ISO_OFFSET$delegate$lambda$lambda$lambda];\n    alternativeParsing($this$build, tmp, ISO_OFFSET$delegate$lambda$lambda$lambda_0);\n    return Unit_instance;\n  }\n  function ISO_OFFSET$delegate$lambda$lambda$lambda($this$alternativeParsing) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$alternativeParsing.k16('z');\n    return Unit_instance;\n  }\n  function ISO_OFFSET$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    optional($this$alternativeParsing, 'Z', ISO_OFFSET$delegate$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_OFFSET$delegate$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$optional.x16();\n    char($this$optional, _Char___init__impl__6a9atx(58));\n    $this$optional.z16();\n    optional($this$optional, VOID, ISO_OFFSET$delegate$lambda$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_OFFSET$delegate$lambda$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    char($this$optional, _Char___init__impl__6a9atx(58));\n    $this$optional.b17();\n    return Unit_instance;\n  }\n  function _get_ISO_OFFSET_$ref_70d0nn() {\n    return function () {\n      return get_ISO_OFFSET();\n    };\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda() {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp = Companion_instance_10;\n    return tmp.z1c(ISO_OFFSET_BASIC$delegate$lambda$lambda);\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda($this$build) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp = [ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda];\n    alternativeParsing($this$build, tmp, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda_0);\n    return Unit_instance;\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda($this$alternativeParsing) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$alternativeParsing.k16('z');\n    return Unit_instance;\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    optional($this$alternativeParsing, 'Z', ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$optional.x16();\n    optional($this$optional, VOID, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$optional.z16();\n    optional($this$optional, VOID, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$optional.b17();\n    return Unit_instance;\n  }\n  function FOUR_DIGIT_OFFSET$delegate$lambda() {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    var tmp = Companion_instance_10;\n    return tmp.z1c(FOUR_DIGIT_OFFSET$delegate$lambda$lambda);\n  }\n  function FOUR_DIGIT_OFFSET$delegate$lambda$lambda($this$build) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    $this$build.x16();\n    $this$build.z16();\n    return Unit_instance;\n  }\n  function isoOffset$lambda$lambda($this$alternativeParsing) {\n    _init_properties_UtcOffsetFormat_kt__9r9ddw();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(122));\n    return Unit_instance;\n  }\n  function isoOffset$lambda$lambda_0($outputMinute, $useSeparator, $outputSecond) {\n    return function ($this$alternativeParsing) {\n      isoOffset$appendIsoOffsetWithoutZOnZero($this$alternativeParsing, $outputMinute, $useSeparator, $outputSecond);\n      return Unit_instance;\n    };\n  }\n  function isoOffset$lambda($outputMinute, $useSeparator, $outputSecond) {\n    return function ($this$optional) {\n      var tmp = [isoOffset$lambda$lambda];\n      alternativeParsing($this$optional, tmp, isoOffset$lambda$lambda_0($outputMinute, $useSeparator, $outputSecond));\n      return Unit_instance;\n    };\n  }\n  function outputIfNeeded$lambda($format) {\n    return function ($this$optional) {\n      $format($this$optional);\n      return Unit_instance;\n    };\n  }\n  function isoOffset$appendIsoOffsetWithoutZOnZero$lambda$lambda($useSeparator) {\n    return function ($this$outputIfNeeded) {\n      var tmp;\n      if ($useSeparator) {\n        char($this$outputIfNeeded, _Char___init__impl__6a9atx(58));\n        tmp = Unit_instance;\n      }\n      $this$outputIfNeeded.b17();\n      return Unit_instance;\n    };\n  }\n  function isoOffset$appendIsoOffsetWithoutZOnZero$lambda($useSeparator, $outputSecond) {\n    return function ($this$outputIfNeeded) {\n      var tmp;\n      if ($useSeparator) {\n        char($this$outputIfNeeded, _Char___init__impl__6a9atx(58));\n        tmp = Unit_instance;\n      }\n      $this$outputIfNeeded.z16();\n      outputIfNeeded($this$outputIfNeeded, $outputSecond, isoOffset$appendIsoOffsetWithoutZOnZero$lambda$lambda($useSeparator));\n      return Unit_instance;\n    };\n  }\n  function WhenToOutput_IF_NONZERO_getInstance() {\n    WhenToOutput_initEntries();\n    return WhenToOutput_IF_NONZERO_instance;\n  }\n  function WhenToOutput_ALWAYS_getInstance() {\n    WhenToOutput_initEntries();\n    return WhenToOutput_ALWAYS_instance;\n  }\n  var properties_initialized_UtcOffsetFormat_kt_6y9jku;\n  function _init_properties_UtcOffsetFormat_kt__9r9ddw() {\n    if (!properties_initialized_UtcOffsetFormat_kt_6y9jku) {\n      properties_initialized_UtcOffsetFormat_kt_6y9jku = true;\n      ISO_OFFSET$delegate = lazy(ISO_OFFSET$delegate$lambda);\n      ISO_OFFSET_BASIC$delegate = lazy(ISO_OFFSET_BASIC$delegate$lambda);\n      FOUR_DIGIT_OFFSET$delegate = lazy(FOUR_DIGIT_OFFSET$delegate$lambda);\n      emptyIncompleteUtcOffset = new IncompleteUtcOffset();\n    }\n  }\n  function get_emptyIncompleteYearMonth() {\n    _init_properties_YearMonthFormat_kt__i0mmu0();\n    return emptyIncompleteYearMonth;\n  }\n  var emptyIncompleteYearMonth;\n  function get_ISO_YEAR_MONTH() {\n    _init_properties_YearMonthFormat_kt__i0mmu0();\n    var tmp0 = ISO_YEAR_MONTH$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_YEAR_MONTH', 0, tmp, _get_ISO_YEAR_MONTH_$ref_y3tv9a(), null);\n    return tmp0.p1();\n  }\n  var ISO_YEAR_MONTH$delegate;\n  function IncompleteYearMonth(year, monthNumber) {\n    year = year === VOID ? null : year;\n    monthNumber = monthNumber === VOID ? null : monthNumber;\n    this.g18_1 = year;\n    this.h18_1 = monthNumber;\n  }\n  protoOf(IncompleteYearMonth).d18 = function (_set____db54di) {\n    this.g18_1 = _set____db54di;\n  };\n  protoOf(IncompleteYearMonth).w17 = function () {\n    return this.g18_1;\n  };\n  protoOf(IncompleteYearMonth).e18 = function (_set____db54di) {\n    this.h18_1 = _set____db54di;\n  };\n  protoOf(IncompleteYearMonth).b18 = function () {\n    return this.h18_1;\n  };\n  protoOf(IncompleteYearMonth).t1d = function () {\n    var year = requireParsedField(this.g18_1, 'year');\n    var month = requireParsedField(this.h18_1, 'monthNumber');\n    return new YearMonth(year, month);\n  };\n  protoOf(IncompleteYearMonth).u1d = function (yearMonth) {\n    this.g18_1 = yearMonth.v1d_1;\n    this.h18_1 = get_number(yearMonth.a18());\n  };\n  protoOf(IncompleteYearMonth).f18 = function () {\n    return new IncompleteYearMonth(this.g18_1, this.h18_1);\n  };\n  protoOf(IncompleteYearMonth).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof IncompleteYearMonth) {\n      tmp_0 = this.g18_1 == other.g18_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.h18_1 == other.h18_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(IncompleteYearMonth).hashCode = function () {\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver = this.g18_1;\n    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);\n    var tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;\n    var tmp = imul(tmp$ret$0, 31);\n    // Inline function 'kotlin.hashCode' call\n    var tmp0_safe_receiver_0 = this.h18_1;\n    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);\n    return tmp + (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0) | 0;\n  };\n  protoOf(IncompleteYearMonth).toString = function () {\n    var tmp0_elvis_lhs = this.g18_1;\n    var tmp = toString(tmp0_elvis_lhs == null ? '??' : tmp0_elvis_lhs);\n    var tmp1_elvis_lhs = this.h18_1;\n    return tmp + '-' + toString(tmp1_elvis_lhs == null ? '??' : tmp1_elvis_lhs);\n  };\n  function requireParsedField(field, name) {\n    _init_properties_YearMonthFormat_kt__i0mmu0();\n    if (field == null) {\n      throw DateTimeFormatException_init_$Create$_0('Can not create a ' + name + ' from the given input: the field ' + name + ' is missing');\n    }\n    return field;\n  }\n  function AbstractWithYearMonthBuilder() {\n  }\n  function Companion_10() {\n  }\n  protoOf(Companion_10).x1d = function (block) {\n    var builder = new Builder_3(new AppendableFormatStructure());\n    block(builder);\n    return new YearMonthFormat(builder.h17());\n  };\n  var Companion_instance_11;\n  function Companion_getInstance_11() {\n    return Companion_instance_11;\n  }\n  function Builder_3(actualBuilder) {\n    this.y1d_1 = actualBuilder;\n  }\n  protoOf(Builder_3).e17 = function () {\n    return this.y1d_1;\n  };\n  protoOf(Builder_3).l18 = function (structure) {\n    return this.y1d_1.i17(structure);\n  };\n  protoOf(Builder_3).f17 = function () {\n    return new Builder_3(new AppendableFormatStructure());\n  };\n  function YearMonthFormat(actualFormat) {\n    AbstractDateTimeFormat.call(this);\n    this.z1d_1 = actualFormat;\n  }\n  protoOf(YearMonthFormat).w15 = function () {\n    return this.z1d_1;\n  };\n  protoOf(YearMonthFormat).a1e = function (value) {\n    // Inline function 'kotlin.apply' call\n    var this_0 = new IncompleteYearMonth();\n    this_0.u1d(value);\n    return this_0;\n  };\n  protoOf(YearMonthFormat).x15 = function (value) {\n    return this.a1e(value instanceof YearMonth ? value : THROW_CCE());\n  };\n  protoOf(YearMonthFormat).b1e = function (intermediate) {\n    return intermediate.t1d();\n  };\n  protoOf(YearMonthFormat).y15 = function (intermediate) {\n    return this.b1e(intermediate instanceof IncompleteYearMonth ? intermediate : THROW_CCE());\n  };\n  protoOf(YearMonthFormat).z15 = function () {\n    return get_emptyIncompleteYearMonth();\n  };\n  function YearDirective(padding, isYearOfEra) {\n    isYearOfEra = isYearOfEra === VOID ? false : isYearOfEra;\n    var tmp = YearMonthFields_getInstance().c1e_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 4 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 4 : null;\n    SignedIntFieldFormatDirective.call(this, tmp, tmp_0, null, tmp$ret$1, 4);\n    this.j1e_1 = padding;\n    this.k1e_1 = isYearOfEra;\n  }\n  protoOf(YearDirective).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof YearDirective) {\n      tmp_0 = this.j1e_1.equals(other.j1e_1);\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.k1e_1 === other.k1e_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(YearDirective).hashCode = function () {\n    return imul(this.j1e_1.hashCode(), 31) + getBooleanHashCode(this.k1e_1) | 0;\n  };\n  function MonthDirective(padding) {\n    var tmp = YearMonthFields_getInstance().d1e_1;\n    // Inline function 'kotlinx.datetime.format.minDigits' call\n    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;\n    // Inline function 'kotlinx.datetime.format.spaces' call\n    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;\n    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);\n    this.u1e_1 = padding;\n  }\n  protoOf(MonthDirective).equals = function (other) {\n    var tmp;\n    if (other instanceof MonthDirective) {\n      tmp = this.u1e_1.equals(other.u1e_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(MonthDirective).hashCode = function () {\n    return this.u1e_1.hashCode();\n  };\n  function YearMonthFieldContainer$_get_year_$ref_7j3zdj() {\n    return function (p0) {\n      return p0.w17();\n    };\n  }\n  function YearMonthFieldContainer$_set_year_$ref_kc0aub() {\n    return function (p0, p1) {\n      p0.d18(p1);\n      return Unit_instance;\n    };\n  }\n  function YearMonthFieldContainer$_get_monthNumber_$ref_pn0wu5() {\n    return function (p0) {\n      return p0.b18();\n    };\n  }\n  function YearMonthFieldContainer$_set_monthNumber_$ref_fjapbl() {\n    return function (p0, p1) {\n      p0.e18(p1);\n      return Unit_instance;\n    };\n  }\n  function YearMonthFields() {\n    YearMonthFields_instance = this;\n    var tmp = this;\n    var tmp_0 = KMutableProperty1;\n    var tmp_1 = YearMonthFieldContainer$_get_year_$ref_7j3zdj();\n    tmp.c1e_1 = new GenericFieldSpec(new PropertyAccessor(getPropertyCallableRef('year', 1, tmp_0, tmp_1, YearMonthFieldContainer$_set_year_$ref_kc0aub())));\n    var tmp_2 = this;\n    var tmp_3 = KMutableProperty1;\n    var tmp_4 = YearMonthFieldContainer$_get_monthNumber_$ref_pn0wu5();\n    tmp_2.d1e_1 = new UnsignedFieldSpec(new PropertyAccessor(getPropertyCallableRef('monthNumber', 1, tmp_3, tmp_4, YearMonthFieldContainer$_set_monthNumber_$ref_fjapbl())), 1, 12);\n  }\n  var YearMonthFields_instance;\n  function YearMonthFields_getInstance() {\n    if (YearMonthFields_instance == null)\n      new YearMonthFields();\n    return YearMonthFields_instance;\n  }\n  function ISO_YEAR_MONTH$delegate$lambda() {\n    _init_properties_YearMonthFormat_kt__i0mmu0();\n    var tmp = Companion_instance_11;\n    return tmp.x1d(ISO_YEAR_MONTH$delegate$lambda$lambda);\n  }\n  function ISO_YEAR_MONTH$delegate$lambda$lambda($this$build) {\n    _init_properties_YearMonthFormat_kt__i0mmu0();\n    $this$build.h16();\n    char($this$build, _Char___init__impl__6a9atx(45));\n    $this$build.j16();\n    return Unit_instance;\n  }\n  function _get_ISO_YEAR_MONTH_$ref_y3tv9a() {\n    return function () {\n      return get_ISO_YEAR_MONTH();\n    };\n  }\n  var properties_initialized_YearMonthFormat_kt_fp0mk6;\n  function _init_properties_YearMonthFormat_kt__i0mmu0() {\n    if (!properties_initialized_YearMonthFormat_kt_fp0mk6) {\n      properties_initialized_YearMonthFormat_kt_fp0mk6 = true;\n      emptyIncompleteYearMonth = new IncompleteYearMonth();\n      ISO_YEAR_MONTH$delegate = lazy(ISO_YEAR_MONTH$delegate$lambda);\n    }\n  }\n  function monthLength(_this__u8e3s4, isLeapYear) {\n    switch (_this__u8e3s4) {\n      case 2:\n        return isLeapYear ? 29 : 28;\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        return 30;\n      default:\n        return 31;\n    }\n  }\n  function isLeapYear(year) {\n    var prolepticYear = fromInt(year);\n    var tmp;\n    if (equalsLong(bitwiseAnd(prolepticYear, new Long(3, 0)), new Long(0, 0))) {\n      var tmp_0;\n      // Inline function 'kotlin.Long.rem' call\n      var tmp$ret$0 = modulo(prolepticYear, fromInt(100));\n      if (!equalsLong(tmp$ret$0, new Long(0, 0))) {\n        tmp_0 = true;\n      } else {\n        // Inline function 'kotlin.Long.rem' call\n        var tmp$ret$1 = modulo(prolepticYear, fromInt(400));\n        tmp_0 = equalsLong(tmp$ret$1, new Long(0, 0));\n      }\n      tmp = tmp_0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  }\n  function AppendableFormatStructure() {\n    var tmp = this;\n    // Inline function 'kotlin.collections.mutableListOf' call\n    tmp.g17_1 = ArrayList_init_$Create$_0();\n  }\n  protoOf(AppendableFormatStructure).h17 = function () {\n    return new ConcatenatedFormatStructure(this.g17_1);\n  };\n  protoOf(AppendableFormatStructure).i17 = function (format) {\n    if (isInterface(format, NonConcatenatedFormatStructure))\n      this.g17_1.j(format);\n    else {\n      if (format instanceof ConcatenatedFormatStructure) {\n        // Inline function 'kotlin.collections.forEach' call\n        var _iterator__ex2g4s = format.j17_1.l();\n        while (_iterator__ex2g4s.m()) {\n          var element = _iterator__ex2g4s.n();\n          this.g17_1.j(element);\n        }\n      } else {\n        noWhenBranchMatchedException();\n      }\n    }\n  };\n  function Accessor$getterNotNull$ref(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.v1e(_this__u8e3s4);\n    };\n    l.callableName = 'getterNotNull';\n    return l;\n  }\n  function UnsignedIntFieldFormatDirective(field, minDigits, spacePadding) {\n    this.x18_1 = field;\n    this.y18_1 = minDigits;\n    this.z18_1 = spacePadding;\n    this.a19_1 = this.x18_1.c1f_1;\n    // Inline function 'kotlin.require' call\n    if (!(this.y18_1 >= 0)) {\n      var message = 'The minimum number of digits (' + this.y18_1 + ') is negative';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    if (!(this.a19_1 >= this.y18_1)) {\n      var message_0 = 'The maximum number of digits (' + this.a19_1 + ') is less than the minimum number of digits (' + this.y18_1 + ')';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n    if (!(this.z18_1 == null)) {\n      // Inline function 'kotlin.require' call\n      if (!(this.z18_1 > this.y18_1)) {\n        var message_1 = 'The space padding (' + this.z18_1 + ') should be more than the minimum number of digits (' + this.y18_1 + ')';\n        throw IllegalArgumentException_init_$Create$(toString(message_1));\n      }\n    }\n  }\n  protoOf(UnsignedIntFieldFormatDirective).b19 = function () {\n    return this.x18_1;\n  };\n  protoOf(UnsignedIntFieldFormatDirective).d16 = function () {\n    var formatter = new UnsignedIntFormatterStructure(Accessor$getterNotNull$ref(this.x18_1.w1e_1), this.y18_1);\n    return !(this.z18_1 == null) ? new SpacePaddedFormatter(formatter, this.z18_1) : formatter;\n  };\n  protoOf(UnsignedIntFieldFormatDirective).f16 = function () {\n    return spaceAndZeroPaddedUnsignedInt(this.y18_1, this.a19_1, this.z18_1, this.x18_1.w1e_1, this.x18_1.z1e_1);\n  };\n  function Accessor$getterNotNull$ref_0(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.v1e(_this__u8e3s4);\n    };\n    l.callableName = 'getterNotNull';\n    return l;\n  }\n  function DecimalFractionFieldFormatDirective(field, minDigits, maxDigits, zerosToAdd) {\n    this.x1b_1 = field;\n    this.y1b_1 = minDigits;\n    this.z1b_1 = maxDigits;\n    this.a1c_1 = zerosToAdd;\n  }\n  protoOf(DecimalFractionFieldFormatDirective).b19 = function () {\n    return this.x1b_1;\n  };\n  protoOf(DecimalFractionFieldFormatDirective).d16 = function () {\n    return new DecimalFractionFormatterStructure(Accessor$getterNotNull$ref_0(this.x1b_1.d1f()), this.y1b_1, this.z1b_1, this.a1c_1);\n  };\n  protoOf(DecimalFractionFieldFormatDirective).f16 = function () {\n    return new ParserStructure(listOf_0(new NumberSpanParserOperation(listOf_0(new FractionPartConsumer(this.y1b_1, this.z1b_1, this.x1b_1.d1f(), this.x1b_1.e1f())))), emptyList());\n  };\n  function Accessor$getterNotNull$ref_1(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.v1e(_this__u8e3s4);\n    };\n    l.callableName = 'getterNotNull';\n    return l;\n  }\n  function SignedIntFieldFormatDirective(field, minDigits, maxDigits, spacePadding, outputPlusOnExceededWidth) {\n    this.l1e_1 = field;\n    this.m1e_1 = minDigits;\n    this.n1e_1 = maxDigits;\n    this.o1e_1 = spacePadding;\n    this.p1e_1 = outputPlusOnExceededWidth;\n    // Inline function 'kotlin.require' call\n    if (!(this.m1e_1 == null || this.m1e_1 >= 0)) {\n      var message = 'The minimum number of digits (' + this.m1e_1 + ') is negative';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    if (!(this.n1e_1 == null || this.m1e_1 == null || this.n1e_1 >= this.m1e_1)) {\n      var message_0 = 'The maximum number of digits (' + this.n1e_1 + ') is less than the minimum number of digits (' + this.m1e_1 + ')';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(SignedIntFieldFormatDirective).b19 = function () {\n    return this.l1e_1;\n  };\n  protoOf(SignedIntFieldFormatDirective).d16 = function () {\n    var tmp = Accessor$getterNotNull$ref_1(this.l1e_1.d1f());\n    var tmp0_elvis_lhs = this.m1e_1;\n    var formatter = new SignedIntFormatterStructure(tmp, tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs, this.p1e_1);\n    return !(this.o1e_1 == null) ? new SpacePaddedFormatter(formatter, this.o1e_1) : formatter;\n  };\n  protoOf(SignedIntFieldFormatDirective).f16 = function () {\n    return SignedIntParser(this.m1e_1, this.n1e_1, this.o1e_1, this.l1e_1.d1f(), this.l1e_1.e1f(), this.p1e_1);\n  };\n  function GenericFieldSpec(accessor, name, defaultValue, sign) {\n    name = name === VOID ? accessor.e1f() : name;\n    defaultValue = defaultValue === VOID ? null : defaultValue;\n    sign = sign === VOID ? null : sign;\n    AbstractFieldSpec.call(this);\n    this.f1f_1 = accessor;\n    this.g1f_1 = name;\n    this.h1f_1 = defaultValue;\n    this.i1f_1 = sign;\n  }\n  protoOf(GenericFieldSpec).d1f = function () {\n    return this.f1f_1;\n  };\n  protoOf(GenericFieldSpec).e1f = function () {\n    return this.g1f_1;\n  };\n  protoOf(GenericFieldSpec).j1f = function () {\n    return this.h1f_1;\n  };\n  protoOf(GenericFieldSpec).k1f = function () {\n    return this.i1f_1;\n  };\n  function PropertyAccessor(property, name) {\n    name = name === VOID ? property.callableName : name;\n    this.l1f_1 = property;\n    this.m1f_1 = name;\n  }\n  protoOf(PropertyAccessor).e1f = function () {\n    return this.m1f_1;\n  };\n  protoOf(PropertyAccessor).n1f = function (container, newValue) {\n    var oldValue = this.l1f_1.get(container);\n    var tmp;\n    if (oldValue === null) {\n      this.l1f_1.set(container, newValue);\n      tmp = null;\n    } else if (equals(oldValue, newValue)) {\n      tmp = null;\n    } else {\n      tmp = oldValue;\n    }\n    return tmp;\n  };\n  protoOf(PropertyAccessor).o1f = function (container, newValue) {\n    var tmp = (container == null ? true : !(container == null)) ? container : THROW_CCE();\n    return this.n1f(tmp, (newValue == null ? true : !(newValue == null)) ? newValue : THROW_CCE());\n  };\n  protoOf(PropertyAccessor).p1f = function (container) {\n    return this.l1f_1.get(container);\n  };\n  function UnsignedFieldSpec(accessor, minValue, maxValue, name, defaultValue, sign) {\n    name = name === VOID ? accessor.e1f() : name;\n    defaultValue = defaultValue === VOID ? null : defaultValue;\n    sign = sign === VOID ? null : sign;\n    AbstractFieldSpec.call(this);\n    this.w1e_1 = accessor;\n    this.x1e_1 = minValue;\n    this.y1e_1 = maxValue;\n    this.z1e_1 = name;\n    this.a1f_1 = defaultValue;\n    this.b1f_1 = sign;\n    var tmp = this;\n    var tmp_0;\n    if (this.y1e_1 < 10) {\n      tmp_0 = 1;\n    } else if (this.y1e_1 < 100) {\n      tmp_0 = 2;\n    } else if (this.y1e_1 < 1000) {\n      tmp_0 = 3;\n    } else {\n      throw IllegalArgumentException_init_$Create$('Max value ' + this.y1e_1 + ' is too large');\n    }\n    tmp.c1f_1 = tmp_0;\n  }\n  protoOf(UnsignedFieldSpec).d1f = function () {\n    return this.w1e_1;\n  };\n  protoOf(UnsignedFieldSpec).e1f = function () {\n    return this.z1e_1;\n  };\n  protoOf(UnsignedFieldSpec).j1f = function () {\n    return this.a1f_1;\n  };\n  protoOf(UnsignedFieldSpec).k1f = function () {\n    return this.b1f_1;\n  };\n  function Accessor() {\n  }\n  function AbstractFieldSpec() {\n  }\n  protoOf(AbstractFieldSpec).toString = function () {\n    return 'The field ' + this.e1f() + ' (default value is ' + toString_1(this.j1f()) + ')';\n  };\n  function CachedFormatStructure(formats) {\n    ConcatenatedFormatStructure.call(this, formats);\n    this.b16_1 = protoOf(ConcatenatedFormatStructure).d16.call(this);\n    this.c16_1 = protoOf(ConcatenatedFormatStructure).f16.call(this);\n  }\n  protoOf(CachedFormatStructure).d16 = function () {\n    return this.b16_1;\n  };\n  protoOf(CachedFormatStructure).f16 = function () {\n    return this.c16_1;\n  };\n  function BasicFormatStructure(directive) {\n    this.q1f_1 = directive;\n  }\n  protoOf(BasicFormatStructure).toString = function () {\n    return 'BasicFormatStructure(' + toString(this.q1f_1) + ')';\n  };\n  protoOf(BasicFormatStructure).equals = function (other) {\n    var tmp;\n    if (other instanceof BasicFormatStructure) {\n      tmp = equals(this.q1f_1, other.q1f_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(BasicFormatStructure).hashCode = function () {\n    return hashCode(this.q1f_1);\n  };\n  protoOf(BasicFormatStructure).f16 = function () {\n    return this.q1f_1.f16();\n  };\n  protoOf(BasicFormatStructure).d16 = function () {\n    return this.q1f_1.d16();\n  };\n  function ConstantFormatStructure(string) {\n    this.r1f_1 = string;\n  }\n  protoOf(ConstantFormatStructure).toString = function () {\n    return 'ConstantFormatStructure(' + this.r1f_1 + ')';\n  };\n  protoOf(ConstantFormatStructure).equals = function (other) {\n    var tmp;\n    if (other instanceof ConstantFormatStructure) {\n      tmp = this.r1f_1 === other.r1f_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(ConstantFormatStructure).hashCode = function () {\n    return getStringHashCode(this.r1f_1);\n  };\n  protoOf(ConstantFormatStructure).f16 = function () {\n    var tmp;\n    // Inline function 'kotlin.text.isEmpty' call\n    var this_0 = this.r1f_1;\n    if (charSequenceLength(this_0) === 0) {\n      tmp = emptyList();\n    } else {\n      // Inline function 'kotlin.collections.buildList' call\n      // Inline function 'kotlin.collections.buildListInternal' call\n      // Inline function 'kotlin.apply' call\n      var this_1 = ArrayList_init_$Create$_0();\n      var tmp_0;\n      if (isAsciiDigit(charCodeAt(this.r1f_1, 0))) {\n        var tmp0 = this.r1f_1;\n        var tmp$ret$2;\n        $l$block: {\n          // Inline function 'kotlin.text.takeWhile' call\n          var inductionVariable = 0;\n          var last = tmp0.length;\n          if (inductionVariable < last)\n            do {\n              var index = inductionVariable;\n              inductionVariable = inductionVariable + 1 | 0;\n              var it = charCodeAt(tmp0, index);\n              if (!isAsciiDigit(it)) {\n                tmp$ret$2 = substring(tmp0, 0, index);\n                break $l$block;\n              }\n            }\n             while (inductionVariable < last);\n          tmp$ret$2 = tmp0;\n        }\n        this_1.j(new NumberSpanParserOperation(listOf_0(new ConstantNumberConsumer(tmp$ret$2))));\n        var tmp0_0 = this.r1f_1;\n        var tmp$ret$4;\n        $l$block_0: {\n          // Inline function 'kotlin.text.dropWhile' call\n          var inductionVariable_0 = 0;\n          var last_0 = charSequenceLength(tmp0_0) - 1 | 0;\n          if (inductionVariable_0 <= last_0)\n            do {\n              var index_0 = inductionVariable_0;\n              inductionVariable_0 = inductionVariable_0 + 1 | 0;\n              var it_0 = charCodeAt(tmp0_0, index_0);\n              if (!isAsciiDigit(it_0)) {\n                tmp$ret$4 = substring_0(tmp0_0, index_0);\n                break $l$block_0;\n              }\n            }\n             while (inductionVariable_0 <= last_0);\n          tmp$ret$4 = '';\n        }\n        tmp_0 = tmp$ret$4;\n      } else {\n        tmp_0 = this.r1f_1;\n      }\n      var suffix = tmp_0;\n      // Inline function 'kotlin.text.isNotEmpty' call\n      if (charSequenceLength(suffix) > 0) {\n        if (isAsciiDigit(charCodeAt(suffix, suffix.length - 1 | 0))) {\n          var tmp$ret$7;\n          $l$block_1: {\n            // Inline function 'kotlin.text.dropLastWhile' call\n            var inductionVariable_1 = get_lastIndex(suffix);\n            if (0 <= inductionVariable_1)\n              do {\n                var index_1 = inductionVariable_1;\n                inductionVariable_1 = inductionVariable_1 + -1 | 0;\n                var it_1 = charCodeAt(suffix, index_1);\n                if (!isAsciiDigit(it_1)) {\n                  tmp$ret$7 = substring(suffix, 0, index_1 + 1 | 0);\n                  break $l$block_1;\n                }\n              }\n               while (0 <= inductionVariable_1);\n            tmp$ret$7 = '';\n          }\n          this_1.j(new PlainStringParserOperation(tmp$ret$7));\n          var tmp$ret$9;\n          $l$block_2: {\n            // Inline function 'kotlin.text.takeLastWhile' call\n            var inductionVariable_2 = get_lastIndex(suffix);\n            if (0 <= inductionVariable_2)\n              do {\n                var index_2 = inductionVariable_2;\n                inductionVariable_2 = inductionVariable_2 + -1 | 0;\n                var it_2 = charCodeAt(suffix, index_2);\n                if (!isAsciiDigit(it_2)) {\n                  tmp$ret$9 = substring_0(suffix, index_2 + 1 | 0);\n                  break $l$block_2;\n                }\n              }\n               while (0 <= inductionVariable_2);\n            tmp$ret$9 = suffix;\n          }\n          this_1.j(new NumberSpanParserOperation(listOf_0(new ConstantNumberConsumer(tmp$ret$9))));\n        } else {\n          this_1.j(new PlainStringParserOperation(suffix));\n        }\n      }\n      tmp = this_1.c4();\n    }\n    return new ParserStructure(tmp, emptyList());\n  };\n  protoOf(ConstantFormatStructure).d16 = function () {\n    return new ConstantStringFormatterStructure(this.r1f_1);\n  };\n  function formatter$checkIfAllNegative(this$0, value) {\n    var seenNonZero = false;\n    var _iterator__ex2g4s = this$0.u1f_1.l();\n    $l$loop: while (_iterator__ex2g4s.m()) {\n      var check = _iterator__ex2g4s.n();\n      if (check.g1d().p1f(value) === true)\n        seenNonZero = true;\n      else if (check.i1d(value))\n        continue $l$loop;\n      else\n        return false;\n    }\n    return seenNonZero;\n  }\n  function SignedFormatStructure$parser$lambda(this$0) {\n    return function (value, isNegative) {\n      var _iterator__ex2g4s = this$0.u1f_1.l();\n      while (_iterator__ex2g4s.m()) {\n        var field = _iterator__ex2g4s.n();\n        var wasNegative = field.g1d().p1f(value) === true;\n        field.g1d().o1f(value, !(isNegative === wasNegative));\n      }\n      return Unit_instance;\n    };\n  }\n  function SignedFormatStructure$formatter$checkIfAllNegative$ref(this$0) {\n    var l = function (p0) {\n      return formatter$checkIfAllNegative(this$0, p0);\n    };\n    l.callableName = 'checkIfAllNegative';\n    return l;\n  }\n  function SignedFormatStructure(format, withPlusSign) {\n    this.s1f_1 = format;\n    this.t1f_1 = withPlusSign;\n    var tmp = this;\n    // Inline function 'kotlin.collections.mapNotNull' call\n    var tmp0 = basicFormats(this.s1f_1);\n    // Inline function 'kotlin.collections.mapNotNullTo' call\n    var destination = ArrayList_init_$Create$_0();\n    // Inline function 'kotlin.collections.forEach' call\n    var _iterator__ex2g4s = tmp0.l();\n    while (_iterator__ex2g4s.m()) {\n      var element = _iterator__ex2g4s.n();\n      var tmp0_safe_receiver = element.b19().k1f();\n      if (tmp0_safe_receiver == null)\n        null;\n      else {\n        // Inline function 'kotlin.let' call\n        destination.j(tmp0_safe_receiver);\n      }\n    }\n    tmp.u1f_1 = toSet(destination);\n    // Inline function 'kotlin.collections.isNotEmpty' call\n    // Inline function 'kotlin.require' call\n    if (!!this.u1f_1.o()) {\n      var message = 'Signed format must contain at least one field with a sign';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n  }\n  protoOf(SignedFormatStructure).toString = function () {\n    return 'SignedFormatStructure(' + toString(this.s1f_1) + ')';\n  };\n  protoOf(SignedFormatStructure).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof SignedFormatStructure) {\n      tmp_0 = equals(this.s1f_1, other.s1f_1);\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.t1f_1 === other.t1f_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(SignedFormatStructure).hashCode = function () {\n    return imul(31, hashCode(this.s1f_1)) + getBooleanHashCode(this.t1f_1) | 0;\n  };\n  protoOf(SignedFormatStructure).f16 = function () {\n    return concat(listOf([new ParserStructure(listOf_0(new SignParser(SignedFormatStructure$parser$lambda(this), this.t1f_1, 'sign for ' + toString(this.u1f_1))), emptyList()), this.s1f_1.f16()]));\n  };\n  protoOf(SignedFormatStructure).d16 = function () {\n    var innerFormat = this.s1f_1.d16();\n    return new SignedFormatter(innerFormat, SignedFormatStructure$formatter$checkIfAllNegative$ref(this), this.t1f_1);\n  };\n  function Companion_11() {\n  }\n  protoOf(Companion_11).v1f = function (field) {\n    var default_0 = field.j1f();\n    // Inline function 'kotlin.require' call\n    if (!!(default_0 == null)) {\n      var message = \"The field '\" + field.e1f() + \"' does not define a default value\";\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    return new PropertyWithDefault(field.d1f(), default_0);\n  };\n  var Companion_instance_12;\n  function Companion_getInstance_12() {\n    return Companion_instance_12;\n  }\n  function PropertyWithDefault(accessor, defaultValue) {\n    this.w1f_1 = accessor;\n    this.x1f_1 = defaultValue;\n  }\n  function OptionalFormatStructure$parser$lambda(this$0) {\n    return function (it) {\n      var _iterator__ex2g4s = this$0.a1g_1.l();\n      while (_iterator__ex2g4s.m()) {\n        var field = _iterator__ex2g4s.n();\n        // Inline function 'kotlinx.datetime.internal.format.PropertyWithDefault.assignDefault' call\n        field.w1f_1.o1f(it, field.x1f_1);\n      }\n      return Unit_instance;\n    };\n  }\n  function Accessor$getter$ref(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.p1f(_this__u8e3s4);\n    };\n    l.callableName = 'getter';\n    return l;\n  }\n  function Predicate$test$ref(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.b1g(_this__u8e3s4);\n    };\n    l.callableName = 'test';\n    return l;\n  }\n  function Truth$test$ref(p0) {\n    var l = function (_this__u8e3s4) {\n      return p0.c1g(_this__u8e3s4);\n    };\n    l.callableName = 'test';\n    return l;\n  }\n  function OptionalFormatStructure(onZero, format) {\n    this.y1f_1 = onZero;\n    this.z1f_1 = format;\n    var tmp = this;\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = basicFormats(this.z1f_1);\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var _iterator__ex2g4s = this_0.l();\n    while (_iterator__ex2g4s.m()) {\n      var item = _iterator__ex2g4s.n();\n      var tmp$ret$0 = item.b19();\n      destination.j(tmp$ret$0);\n    }\n    // Inline function 'kotlin.collections.map' call\n    var this_1 = distinct(destination);\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));\n    var _iterator__ex2g4s_0 = this_1.l();\n    while (_iterator__ex2g4s_0.m()) {\n      var item_0 = _iterator__ex2g4s_0.n();\n      var tmp$ret$3 = Companion_instance_12.v1f(item_0);\n      destination_0.j(tmp$ret$3);\n    }\n    tmp.a1g_1 = destination_0;\n  }\n  protoOf(OptionalFormatStructure).toString = function () {\n    return 'Optional(' + this.y1f_1 + ', ' + toString(this.z1f_1) + ')';\n  };\n  protoOf(OptionalFormatStructure).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof OptionalFormatStructure) {\n      tmp_0 = this.y1f_1 === other.y1f_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = equals(this.z1f_1, other.z1f_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(OptionalFormatStructure).hashCode = function () {\n    return imul(31, getStringHashCode(this.y1f_1)) + hashCode(this.z1f_1) | 0;\n  };\n  protoOf(OptionalFormatStructure).f16 = function () {\n    var tmp = emptyList();\n    var tmp_0 = this.z1f_1.f16();\n    var tmp_1 = (new ConstantFormatStructure(this.y1f_1)).f16();\n    var tmp_2;\n    if (this.a1g_1.o()) {\n      tmp_2 = emptyList();\n    } else {\n      tmp_2 = listOf_0(new UnconditionalModification(OptionalFormatStructure$parser$lambda(this)));\n    }\n    return new ParserStructure(tmp, listOf([tmp_0, concat(listOf([tmp_1, new ParserStructure(tmp_2, emptyList())]))]));\n  };\n  protoOf(OptionalFormatStructure).d16 = function () {\n    var formatter = this.z1f_1.d16();\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = this.a1g_1;\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var _iterator__ex2g4s = this_0.l();\n    while (_iterator__ex2g4s.m()) {\n      var item = _iterator__ex2g4s.n();\n      // Inline function 'kotlinx.datetime.internal.format.PropertyWithDefault.isDefaultComparisonPredicate' call\n      var tmp$ret$1 = new ComparisonPredicate(item.x1f_1, Accessor$getter$ref(item.w1f_1));\n      destination.j(tmp$ret$1);\n    }\n    var predicate = conjunctionPredicate(destination);\n    var tmp;\n    if (predicate instanceof Truth) {\n      tmp = new ConstantStringFormatterStructure(this.y1f_1);\n    } else {\n      var tmp_0 = to(Predicate$test$ref(predicate), new ConstantStringFormatterStructure(this.y1f_1));\n      tmp = new ConditionalFormatter(listOf([tmp_0, to(Truth$test$ref(Truth_instance), formatter)]));\n    }\n    return tmp;\n  };\n  function AlternativesParsingFormatStructure(mainFormat, formats) {\n    this.d1g_1 = mainFormat;\n    this.e1g_1 = formats;\n  }\n  protoOf(AlternativesParsingFormatStructure).toString = function () {\n    return 'AlternativesParsing(' + toString(this.e1g_1) + ')';\n  };\n  protoOf(AlternativesParsingFormatStructure).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof AlternativesParsingFormatStructure) {\n      tmp_0 = equals(this.d1g_1, other.d1g_1);\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = equals(this.e1g_1, other.e1g_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(AlternativesParsingFormatStructure).hashCode = function () {\n    return imul(31, hashCode(this.d1g_1)) + hashCode(this.e1g_1) | 0;\n  };\n  protoOf(AlternativesParsingFormatStructure).f16 = function () {\n    var tmp = emptyList();\n    // Inline function 'kotlin.collections.buildList' call\n    // Inline function 'kotlin.collections.buildListInternal' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = ArrayList_init_$Create$_0();\n    this_0.j(this.d1g_1.f16());\n    var _iterator__ex2g4s = this.e1g_1.l();\n    while (_iterator__ex2g4s.m()) {\n      var format = _iterator__ex2g4s.n();\n      this_0.j(format.f16());\n    }\n    var tmp$ret$3 = this_0.c4();\n    return new ParserStructure(tmp, tmp$ret$3);\n  };\n  protoOf(AlternativesParsingFormatStructure).d16 = function () {\n    return this.d1g_1.d16();\n  };\n  function ConcatenatedFormatStructure(formats) {\n    this.j17_1 = formats;\n  }\n  protoOf(ConcatenatedFormatStructure).toString = function () {\n    return 'ConcatenatedFormatStructure(' + joinToString(this.j17_1, ', ') + ')';\n  };\n  protoOf(ConcatenatedFormatStructure).equals = function (other) {\n    var tmp;\n    if (other instanceof ConcatenatedFormatStructure) {\n      tmp = equals(this.j17_1, other.j17_1);\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(ConcatenatedFormatStructure).hashCode = function () {\n    return hashCode(this.j17_1);\n  };\n  protoOf(ConcatenatedFormatStructure).f16 = function () {\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = this.j17_1;\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var _iterator__ex2g4s = this_0.l();\n    while (_iterator__ex2g4s.m()) {\n      var item = _iterator__ex2g4s.n();\n      var tmp$ret$0 = item.f16();\n      destination.j(tmp$ret$0);\n    }\n    return concat(destination);\n  };\n  protoOf(ConcatenatedFormatStructure).d16 = function () {\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = this.j17_1;\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var _iterator__ex2g4s = this_0.l();\n    while (_iterator__ex2g4s.m()) {\n      var item = _iterator__ex2g4s.n();\n      var tmp$ret$0 = item.d16();\n      destination.j(tmp$ret$0);\n    }\n    var formatters = destination;\n    var tmp;\n    if (formatters.q() === 1) {\n      tmp = single(formatters);\n    } else {\n      tmp = new ConcatenatedFormatter(formatters);\n    }\n    return tmp;\n  };\n  function NonConcatenatedFormatStructure() {\n  }\n  function basicFormats(format) {\n    // Inline function 'kotlin.collections.buildList' call\n    // Inline function 'kotlin.collections.buildListInternal' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = ArrayList_init_$Create$_0();\n    basicFormats$_anonymous_$rec_hkf0lf(this_0, format);\n    return this_0.c4();\n  }\n  function basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format) {\n    if (format instanceof BasicFormatStructure)\n      $this_buildList.j(format.q1f_1);\n    else {\n      if (format instanceof ConcatenatedFormatStructure) {\n        // Inline function 'kotlin.collections.forEach' call\n        var _iterator__ex2g4s = format.j17_1.l();\n        while (_iterator__ex2g4s.m()) {\n          var element = _iterator__ex2g4s.n();\n          basicFormats$_anonymous_$rec_hkf0lf($this_buildList, element);\n        }\n      } else {\n        if (!(format instanceof ConstantFormatStructure)) {\n          if (format instanceof SignedFormatStructure) {\n            basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.s1f_1);\n          } else {\n            if (format instanceof AlternativesParsingFormatStructure) {\n              basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.d1g_1);\n              // Inline function 'kotlin.collections.forEach' call\n              var _iterator__ex2g4s_0 = format.e1g_1.l();\n              while (_iterator__ex2g4s_0.m()) {\n                var element_0 = _iterator__ex2g4s_0.n();\n                basicFormats$_anonymous_$rec_hkf0lf($this_buildList, element_0);\n              }\n            } else {\n              if (format instanceof OptionalFormatStructure) {\n                basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.z1f_1);\n              } else {\n                noWhenBranchMatchedException();\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function conjunctionPredicate(predicates) {\n    return predicates.o() ? Truth_instance : predicates.q() === 1 ? single(predicates) : new ConjunctionPredicate(predicates);\n  }\n  function ComparisonPredicate(expectedValue, getter) {\n    this.f1g_1 = expectedValue;\n    this.g1g_1 = getter;\n  }\n  protoOf(ComparisonPredicate).b1g = function (value) {\n    return equals(this.g1g_1(value), this.f1g_1);\n  };\n  function Truth() {\n  }\n  protoOf(Truth).c1g = function (value) {\n    return true;\n  };\n  protoOf(Truth).b1g = function (value) {\n    return this.c1g((value == null ? true : !(value == null)) ? value : THROW_CCE());\n  };\n  var Truth_instance;\n  function Truth_getInstance() {\n    return Truth_instance;\n  }\n  function ConjunctionPredicate(predicates) {\n    this.h1g_1 = predicates;\n  }\n  protoOf(ConjunctionPredicate).b1g = function (value) {\n    var tmp0 = this.h1g_1;\n    var tmp$ret$0;\n    $l$block_0: {\n      // Inline function 'kotlin.collections.all' call\n      var tmp;\n      if (isInterface(tmp0, Collection)) {\n        tmp = tmp0.o();\n      } else {\n        tmp = false;\n      }\n      if (tmp) {\n        tmp$ret$0 = true;\n        break $l$block_0;\n      }\n      var _iterator__ex2g4s = tmp0.l();\n      while (_iterator__ex2g4s.m()) {\n        var element = _iterator__ex2g4s.n();\n        if (!element.b1g(value)) {\n          tmp$ret$0 = false;\n          break $l$block_0;\n        }\n      }\n      tmp$ret$0 = true;\n    }\n    return tmp$ret$0;\n  };\n  function FormatterStructure() {\n  }\n  function SpacePaddedFormatter(formatter, padding) {\n    this.j1g_1 = formatter;\n    this.k1g_1 = padding;\n  }\n  protoOf(SpacePaddedFormatter).i1g = function (obj, builder, minusNotRequired) {\n    // Inline function 'kotlin.let' call\n    var it = StringBuilder_init_$Create$();\n    this.j1g_1.i1g(obj, it, minusNotRequired);\n    var string = it.toString();\n    // Inline function 'kotlin.repeat' call\n    var times = this.k1g_1 - string.length | 0;\n    var inductionVariable = 0;\n    if (inductionVariable < times)\n      do {\n        var index = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        builder.x6(_Char___init__impl__6a9atx(32));\n      }\n       while (inductionVariable < times);\n    builder.k(string);\n  };\n  function SignedFormatter(formatter, allSubFormatsNegative, alwaysOutputSign) {\n    this.l1g_1 = formatter;\n    this.m1g_1 = allSubFormatsNegative;\n    this.n1g_1 = alwaysOutputSign;\n  }\n  protoOf(SignedFormatter).i1g = function (obj, builder, minusNotRequired) {\n    var tmp;\n    if (!minusNotRequired && this.m1g_1(obj)) {\n      tmp = _Char___init__impl__6a9atx(45);\n    } else if (this.n1g_1) {\n      tmp = _Char___init__impl__6a9atx(43);\n    } else {\n      tmp = null;\n    }\n    var sign = tmp;\n    var tmp_0 = sign;\n    if ((tmp_0 == null ? null : new Char(tmp_0)) == null)\n      null;\n    else {\n      var tmp_1 = sign;\n      // Inline function 'kotlin.let' call\n      var it = (tmp_1 == null ? null : new Char(tmp_1)).a1_1;\n      builder.x6(it);\n    }\n    var tmp_2;\n    if (minusNotRequired) {\n      tmp_2 = true;\n    } else {\n      var tmp_3 = sign;\n      tmp_2 = equals(tmp_3 == null ? null : new Char(tmp_3), new Char(_Char___init__impl__6a9atx(45)));\n    }\n    this.l1g_1.i1g(obj, builder, tmp_2);\n  };\n  function ConditionalFormatter(formatters) {\n    this.o1g_1 = formatters;\n  }\n  protoOf(ConditionalFormatter).i1g = function (obj, builder, minusNotRequired) {\n    var _iterator__ex2g4s = this.o1g_1.l();\n    while (_iterator__ex2g4s.m()) {\n      var _destruct__k2r9zo = _iterator__ex2g4s.n();\n      var condition = _destruct__k2r9zo.mc();\n      var formatter = _destruct__k2r9zo.nc();\n      if (condition(obj)) {\n        formatter.i1g(obj, builder, minusNotRequired);\n        return Unit_instance;\n      }\n    }\n  };\n  function ConcatenatedFormatter(formatters) {\n    this.p1g_1 = formatters;\n  }\n  protoOf(ConcatenatedFormatter).i1g = function (obj, builder, minusNotRequired) {\n    var _iterator__ex2g4s = this.p1g_1.l();\n    while (_iterator__ex2g4s.m()) {\n      var formatter = _iterator__ex2g4s.n();\n      formatter.i1g(obj, builder, minusNotRequired);\n    }\n  };\n  function UnsignedIntFormatterStructure(number, zeroPadding) {\n    this.q1g_1 = number;\n    this.r1g_1 = zeroPadding;\n    // Inline function 'kotlin.require' call\n    if (!(this.r1g_1 >= 0)) {\n      var message = 'The minimum number of digits (' + this.r1g_1 + ') is negative';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    if (!(this.r1g_1 <= 9)) {\n      var message_0 = 'The minimum number of digits (' + this.r1g_1 + ') exceeds the length of an Int';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(UnsignedIntFormatterStructure).i1g = function (obj, builder, minusNotRequired) {\n    var num = this.q1g_1(obj);\n    var numberStr = num.toString();\n    // Inline function 'kotlin.repeat' call\n    var times = this.r1g_1 - numberStr.length | 0;\n    var inductionVariable = 0;\n    if (inductionVariable < times)\n      do {\n        var index = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        builder.x6(_Char___init__impl__6a9atx(48));\n      }\n       while (inductionVariable < times);\n    builder.k(numberStr);\n  };\n  function DecimalFractionFormatterStructure(number, minDigits, maxDigits, zerosToAdd) {\n    this.s1g_1 = number;\n    this.t1g_1 = minDigits;\n    this.u1g_1 = maxDigits;\n    this.v1g_1 = zerosToAdd;\n    var containsArg = this.t1g_1;\n    // Inline function 'kotlin.require' call\n    if (!(1 <= containsArg ? containsArg <= 9 : false)) {\n      var message = 'The minimum number of digits (' + this.t1g_1 + ') is not in range 1..9';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var containsLower = this.t1g_1;\n    var containsArg_0 = this.u1g_1;\n    // Inline function 'kotlin.require' call\n    if (!(containsLower <= containsArg_0 ? containsArg_0 <= 9 : false)) {\n      var message_0 = 'The maximum number of digits (' + this.u1g_1 + ') is not in range ' + this.t1g_1 + '..9';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(DecimalFractionFormatterStructure).i1g = function (obj, builder, minusNotRequired) {\n    var number = this.s1g_1(obj);\n    var numberWithRequiredPrecision = number.k1a(this.u1g_1);\n    var zerosToStrip = 0;\n    while (this.u1g_1 > (this.t1g_1 + zerosToStrip | 0) && (numberWithRequiredPrecision % get_POWERS_OF_TEN()[zerosToStrip + 1 | 0] | 0) === 0) {\n      zerosToStrip = zerosToStrip + 1 | 0;\n    }\n    var zerosToAddBack = this.v1g_1.p((this.u1g_1 - zerosToStrip | 0) - 1 | 0);\n    if (zerosToStrip >= zerosToAddBack)\n      zerosToStrip = zerosToStrip - zerosToAddBack | 0;\n    var digitsToOutput = this.u1g_1 - zerosToStrip | 0;\n    var numberToOutput = numberWithRequiredPrecision / get_POWERS_OF_TEN()[zerosToStrip] | 0;\n    builder.k(substring_0((numberToOutput + get_POWERS_OF_TEN()[digitsToOutput] | 0).toString(), 1));\n  };\n  function SignedIntFormatterStructure(number, zeroPadding, outputPlusOnExceededWidth) {\n    this.w1g_1 = number;\n    this.x1g_1 = zeroPadding;\n    this.y1g_1 = outputPlusOnExceededWidth;\n    // Inline function 'kotlin.require' call\n    if (!(this.x1g_1 >= 0)) {\n      var message = 'The minimum number of digits (' + this.x1g_1 + ') is negative';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    if (!(this.x1g_1 <= 9)) {\n      var message_0 = 'The minimum number of digits (' + this.x1g_1 + ') exceeds the length of an Int';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(SignedIntFormatterStructure).i1g = function (obj, builder, minusNotRequired) {\n    var innerBuilder = StringBuilder_init_$Create$();\n    // Inline function 'kotlin.let' call\n    var it = this.w1g_1(obj);\n    var number = minusNotRequired && it < 0 ? -it | 0 : it;\n    if (!(this.y1g_1 == null) && number >= get_POWERS_OF_TEN()[this.y1g_1]) {\n      innerBuilder.x6(_Char___init__impl__6a9atx(43));\n    }\n    // Inline function 'kotlin.math.absoluteValue' call\n    if (abs(number) < get_POWERS_OF_TEN()[this.x1g_1 - 1 | 0]) {\n      if (number >= 0) {\n        innerBuilder.la(number + get_POWERS_OF_TEN()[this.x1g_1] | 0).pa(0);\n      } else {\n        innerBuilder.la(number - get_POWERS_OF_TEN()[this.x1g_1] | 0).pa(1);\n      }\n    } else {\n      innerBuilder.la(number);\n    }\n    builder.k(innerBuilder);\n  };\n  function ConstantStringFormatterStructure(string) {\n    this.z1g_1 = string;\n  }\n  protoOf(ConstantStringFormatterStructure).i1g = function (obj, builder, minusNotRequired) {\n    builder.k(this.z1g_1);\n  };\n  function FractionPartConsumer(minLength, maxLength, setter, name) {\n    NumberConsumer.call(this, minLength === maxLength ? minLength : null, name);\n    this.c1h_1 = minLength;\n    this.d1h_1 = maxLength;\n    this.e1h_1 = setter;\n    var containsArg = this.c1h_1;\n    // Inline function 'kotlin.require' call\n    if (!(1 <= containsArg ? containsArg <= 9 : false)) {\n      var message = 'Invalid minimum length ' + this.c1h_1 + ' for field ' + this.g1h_1 + ': expected 1..9';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var containsLower = this.c1h_1;\n    var containsArg_0 = this.d1h_1;\n    // Inline function 'kotlin.require' call\n    if (!(containsLower <= containsArg_0 ? containsArg_0 <= 9 : false)) {\n      var message_0 = 'Invalid maximum length ' + this.d1h_1 + ' for field ' + this.g1h_1 + ': expected ' + this.c1h_1 + '..9';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(FractionPartConsumer).h1h = function (storage, input, start, end) {\n    return (end - start | 0) < this.c1h_1 ? new TooFewDigits(this.c1h_1) : (end - start | 0) > this.d1h_1 ? new TooManyDigits(this.d1h_1) : setWithoutReassigning(this.e1h_1, storage, new DecimalFraction(parseAsciiInt(input, start, end), end - start | 0));\n  };\n  function ConstantNumberConsumer(expected) {\n    NumberConsumer.call(this, expected.length, 'the predefined string ' + expected);\n    this.k1h_1 = expected;\n  }\n  protoOf(ConstantNumberConsumer).h1h = function (storage, input, start, end) {\n    var tmp;\n    // Inline function 'kotlin.text.substring' call\n    if (toString(charSequenceSubSequence(input, start, end)) === this.k1h_1) {\n      tmp = null;\n    } else {\n      tmp = new WrongConstant(this.k1h_1);\n    }\n    return tmp;\n  };\n  function NumberConsumer(length, whatThisExpects) {\n    this.f1h_1 = length;\n    this.g1h_1 = whatThisExpects;\n  }\n  protoOf(NumberConsumer).a = function () {\n    return this.f1h_1;\n  };\n  function ExpectedInt() {\n  }\n  protoOf(ExpectedInt).l1h = function () {\n    return 'expected an Int value';\n  };\n  var ExpectedInt_instance;\n  function ExpectedInt_getInstance() {\n    return ExpectedInt_instance;\n  }\n  function TooManyDigits(maxDigits) {\n    this.m1h_1 = maxDigits;\n  }\n  protoOf(TooManyDigits).l1h = function () {\n    return 'expected at most ' + this.m1h_1 + ' digits';\n  };\n  function TooFewDigits(minDigits) {\n    this.n1h_1 = minDigits;\n  }\n  protoOf(TooFewDigits).l1h = function () {\n    return 'expected at least ' + this.n1h_1 + ' digits';\n  };\n  function WrongConstant(expected) {\n    this.o1h_1 = expected;\n  }\n  protoOf(WrongConstant).l1h = function () {\n    return \"expected '\" + this.o1h_1 + \"'\";\n  };\n  function Conflicting(conflicting) {\n    this.p1h_1 = conflicting;\n  }\n  protoOf(Conflicting).l1h = function () {\n    return \"attempted to overwrite the existing value '\" + toString(this.p1h_1) + \"'\";\n  };\n  function setWithoutReassigning(_this__u8e3s4, receiver, value) {\n    var tmp0_elvis_lhs = _this__u8e3s4.o1f(receiver, value);\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      return null;\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    var conflictingValue = tmp;\n    return new Conflicting(conflictingValue);\n  }\n  function parseAsciiInt(_this__u8e3s4, start, end) {\n    var result = 0;\n    var inductionVariable = start;\n    if (inductionVariable < end)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var digit = charSequenceGet(_this__u8e3s4, i);\n        result = imul(result, 10) + asciiDigitToInt(digit) | 0;\n      }\n       while (inductionVariable < end);\n    return result;\n  }\n  function UnsignedIntConsumer(minLength, maxLength, setter, name, multiplyByMinus1) {\n    multiplyByMinus1 = multiplyByMinus1 === VOID ? false : multiplyByMinus1;\n    NumberConsumer.call(this, minLength == maxLength ? minLength : null, name);\n    this.s1h_1 = minLength;\n    this.t1h_1 = maxLength;\n    this.u1h_1 = setter;\n    this.v1h_1 = multiplyByMinus1;\n    // Inline function 'kotlin.require' call\n    if (!(this.a() == null || numberRangeToNumber(1, 9).kd(this.a()))) {\n      var message = 'Invalid length for field ' + this.g1h_1 + ': ' + this.a();\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n  }\n  protoOf(UnsignedIntConsumer).h1h = function (storage, input, start, end) {\n    var tmp;\n    if (!(this.t1h_1 == null) && (end - start | 0) > this.t1h_1) {\n      tmp = new TooManyDigits(this.t1h_1);\n    } else if (!(this.s1h_1 == null) && (end - start | 0) < this.s1h_1) {\n      tmp = new TooFewDigits(this.s1h_1);\n    } else {\n      var result = parseAsciiIntOrNull(input, start, end);\n      tmp = result == null ? ExpectedInt_instance : setWithoutReassigning(this.u1h_1, storage, this.v1h_1 ? -result | 0 : result);\n    }\n    return tmp;\n  };\n  function parseAsciiIntOrNull(_this__u8e3s4, start, end) {\n    var result = 0;\n    var inductionVariable = start;\n    if (inductionVariable < end)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var digit = charSequenceGet(_this__u8e3s4, i);\n        result = imul(result, 10) + asciiDigitToInt(digit) | 0;\n        if (result < 0)\n          return null;\n      }\n       while (inductionVariable < end);\n    return result;\n  }\n  function ParseError(position, message) {\n    this.w1h_1 = position;\n    this.x1h_1 = message;\n  }\n  function _ParseResult___init__impl__gvz3cn(value) {\n    return value;\n  }\n  function _ParseResult___get_value__impl__86mnxf($this) {\n    return $this;\n  }\n  function Companion_12() {\n  }\n  protoOf(Companion_12).y1h = function (indexOfNextUnparsed) {\n    return _ParseResult___init__impl__gvz3cn(indexOfNextUnparsed);\n  };\n  protoOf(Companion_12).z1h = function (position, message) {\n    return _ParseResult___init__impl__gvz3cn(new ParseError(position, message));\n  };\n  var Companion_instance_13;\n  function Companion_getInstance_13() {\n    return Companion_instance_13;\n  }\n  function _Parser___init__impl__gdyfby(commands) {\n    return commands;\n  }\n  function _get_commands__a20n1($this) {\n    return $this;\n  }\n  function Parser__match_impl_nzt83d($this, input, initialContainer, startIndex) {\n    // Inline function 'kotlin.collections.mutableListOf' call\n    var errors = ArrayList_init_$Create$_0();\n    // Inline function 'kotlinx.datetime.internal.format.parser.Parser.parse' call\n    var parseOptions = mutableListOf([new ParserState(initialContainer, _get_commands__a20n1($this), startIndex)]);\n    iterate_over_alternatives: while (true) {\n      var tmp0_elvis_lhs = removeLastOrNull(parseOptions);\n      var tmp;\n      if (tmp0_elvis_lhs == null) {\n        break iterate_over_alternatives;\n      } else {\n        tmp = tmp0_elvis_lhs;\n      }\n      var state = tmp;\n      var output = state.a1i_1.f18();\n      var inputPosition = state.c1i_1;\n      var parserStructure = state.b1i_1;\n      // Inline function 'kotlin.run' call\n      $l$block: {\n        var inductionVariable = 0;\n        var last = parserStructure.e1i_1.q() - 1 | 0;\n        if (inductionVariable <= last)\n          do {\n            var ix = inductionVariable;\n            inductionVariable = inductionVariable + 1 | 0;\n            // Inline function 'kotlinx.datetime.internal.format.parser.ParseResult.match' call\n            var this_0 = parserStructure.e1i_1.p(ix).g1i(output, input, inputPosition);\n            var tmp0_subject = _ParseResult___get_value__impl__86mnxf(this_0);\n            if (typeof tmp0_subject === 'number') {\n              inputPosition = _ParseResult___get_value__impl__86mnxf(this_0);\n            } else {\n              if (tmp0_subject instanceof ParseError) {\n                var it = _ParseResult___get_value__impl__86mnxf(this_0);\n                errors.j(it);\n                break $l$block;\n              } else {\n                // Inline function 'kotlin.error' call\n                var message = 'Unexpected parse result: ' + toString(_ParseResult___get_value__impl__86mnxf(this_0));\n                throw IllegalStateException_init_$Create$(toString(message));\n              }\n            }\n          }\n           while (inductionVariable <= last);\n        if (parserStructure.f1i_1.o()) {\n          if (false || inputPosition === charSequenceLength(input)) {\n            return output;\n          } else {\n            var tmp_0 = inputPosition;\n            var it_0 = new ParseError(tmp_0, Parser$match$lambda);\n            errors.j(it_0);\n          }\n        } else {\n          var inductionVariable_0 = parserStructure.f1i_1.q() - 1 | 0;\n          if (0 <= inductionVariable_0)\n            do {\n              var ix_0 = inductionVariable_0;\n              inductionVariable_0 = inductionVariable_0 + -1 | 0;\n              parseOptions.j(new ParserState(output, parserStructure.f1i_1.p(ix_0), inputPosition));\n            }\n             while (0 <= inductionVariable_0);\n        }\n      }\n    }\n    // Inline function 'kotlin.collections.sortByDescending' call\n    if (errors.q() > 1) {\n      // Inline function 'kotlin.comparisons.compareByDescending' call\n      var tmp_1 = Parser$match$lambda_0;\n      var tmp$ret$8 = new sam$kotlin_Comparator$0(tmp_1);\n      sortWith(errors, tmp$ret$8);\n    }\n    throw new ParseException(errors);\n  }\n  function Parser__match$default_impl_x2xlti($this, input, initialContainer, startIndex, $super) {\n    startIndex = startIndex === VOID ? 0 : startIndex;\n    var tmp;\n    if ($super === VOID) {\n      tmp = Parser__match_impl_nzt83d($this, input, initialContainer, startIndex);\n    } else {\n      var tmp_0 = $super;\n      tmp = (tmp_0 == null ? null : new Parser(tmp_0)).h1i.call(new Parser($this), input, initialContainer, startIndex);\n    }\n    return tmp;\n  }\n  function ParserState(output, parserStructure, inputPosition) {\n    this.a1i_1 = output;\n    this.b1i_1 = parserStructure;\n    this.c1i_1 = inputPosition;\n  }\n  function Parser__toString_impl_x33iea($this) {\n    return 'Parser(commands=' + $this.toString() + ')';\n  }\n  function Parser__hashCode_impl_bbxllf($this) {\n    return hashCode($this);\n  }\n  function Parser__equals_impl_djxokv($this, other) {\n    if (!(other instanceof Parser))\n      return false;\n    var tmp0_other_with_cast = other instanceof Parser ? other.d1i_1 : THROW_CCE();\n    if (!equals($this, tmp0_other_with_cast))\n      return false;\n    return true;\n  }\n  function sam$kotlin_Comparator$0(function_0) {\n    this.i1i_1 = function_0;\n  }\n  protoOf(sam$kotlin_Comparator$0).sa = function (a, b) {\n    return this.i1i_1(a, b);\n  };\n  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {\n    return this.sa(a, b);\n  };\n  protoOf(sam$kotlin_Comparator$0).j2 = function () {\n    return this.i1i_1;\n  };\n  protoOf(sam$kotlin_Comparator$0).equals = function (other) {\n    var tmp;\n    if (!(other == null) ? isInterface(other, Comparator) : false) {\n      var tmp_0;\n      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {\n        tmp_0 = equals(this.j2(), other.j2());\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(sam$kotlin_Comparator$0).hashCode = function () {\n    return hashCode(this.j2());\n  };\n  function Parser$match$lambda() {\n    return 'There is more input to consume';\n  }\n  function Parser$match$lambda_0(a, b) {\n    // Inline function 'kotlin.comparisons.compareValuesBy' call\n    var tmp = b.w1h_1;\n    var tmp$ret$1 = a.w1h_1;\n    return compareValues(tmp, tmp$ret$1);\n  }\n  function Parser(commands) {\n    this.d1i_1 = commands;\n  }\n  protoOf(Parser).toString = function () {\n    return Parser__toString_impl_x33iea(this.d1i_1);\n  };\n  protoOf(Parser).hashCode = function () {\n    return Parser__hashCode_impl_bbxllf(this.d1i_1);\n  };\n  protoOf(Parser).equals = function (other) {\n    return Parser__equals_impl_djxokv(this.d1i_1, other);\n  };\n  function ParserStructure(operations, followedBy) {\n    this.e1i_1 = operations;\n    this.f1i_1 = followedBy;\n  }\n  protoOf(ParserStructure).toString = function () {\n    return joinToString(this.e1i_1, ', ') + '(' + joinToString(this.f1i_1, ';') + ')';\n  };\n  function ParseException(errors) {\n    Exception_init_$Init$(formatError(errors), this);\n    captureStack(this, ParseException);\n  }\n  function concat(_this__u8e3s4) {\n    // Inline function 'kotlin.collections.foldRight' call\n    var accumulator = new ParserStructure(emptyList(), emptyList());\n    if (!_this__u8e3s4.o()) {\n      var iterator = _this__u8e3s4.s(_this__u8e3s4.q());\n      while (iterator.i3()) {\n        var tmp0 = iterator.j3();\n        var acc = accumulator;\n        accumulator = concat$append(tmp0, acc);\n      }\n    }\n    var naiveParser = accumulator;\n    return concat$simplify(naiveParser, emptyList());\n  }\n  function formatError(errors) {\n    if (errors.q() === 1) {\n      return 'Position ' + errors.p(0).w1h_1 + ': ' + errors.p(0).x1h_1();\n    }\n    var averageMessageLength = 33;\n    var tmp0_buffer = StringBuilder_init_$Create$_0(imul(averageMessageLength, errors.q()));\n    return joinTo(errors, tmp0_buffer, ', ', 'Errors: ', VOID, VOID, VOID, formatError$lambda).toString();\n  }\n  function concat$append(_this__u8e3s4, other) {\n    var tmp;\n    if (_this__u8e3s4.f1i_1.o()) {\n      tmp = new ParserStructure(plus(_this__u8e3s4.e1i_1, other.e1i_1), other.f1i_1);\n    } else {\n      // Inline function 'kotlin.collections.map' call\n      var this_0 = _this__u8e3s4.f1i_1;\n      // Inline function 'kotlin.collections.mapTo' call\n      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n      var _iterator__ex2g4s = this_0.l();\n      while (_iterator__ex2g4s.m()) {\n        var item = _iterator__ex2g4s.n();\n        var tmp$ret$0 = concat$append(item, other);\n        destination.j(tmp$ret$0);\n      }\n      tmp = new ParserStructure(_this__u8e3s4.e1i_1, destination);\n    }\n    return tmp;\n  }\n  function concat$simplify(_this__u8e3s4, unconditionalModifications) {\n    // Inline function 'kotlin.collections.mutableListOf' call\n    var newOperations = ArrayList_init_$Create$_0();\n    var currentNumberSpan = null;\n    var unconditionalModificationsForTails = toMutableList(unconditionalModifications);\n    var _iterator__ex2g4s = _this__u8e3s4.e1i_1.l();\n    while (_iterator__ex2g4s.m()) {\n      var op = _iterator__ex2g4s.n();\n      if (op instanceof NumberSpanParserOperation) {\n        if (!(currentNumberSpan == null)) {\n          currentNumberSpan.r(op.j1i_1);\n        } else {\n          currentNumberSpan = toMutableList(op.j1i_1);\n        }\n      } else {\n        if (op instanceof UnconditionalModification) {\n          unconditionalModificationsForTails.j(op);\n        } else {\n          if (!(currentNumberSpan == null)) {\n            newOperations.j(new NumberSpanParserOperation(currentNumberSpan));\n            currentNumberSpan = null;\n          }\n          newOperations.j(op);\n        }\n      }\n    }\n    // Inline function 'kotlin.collections.flatMap' call\n    var tmp0 = _this__u8e3s4.f1i_1;\n    // Inline function 'kotlin.collections.flatMapTo' call\n    var destination = ArrayList_init_$Create$_0();\n    var _iterator__ex2g4s_0 = tmp0.l();\n    while (_iterator__ex2g4s_0.m()) {\n      var element = _iterator__ex2g4s_0.n();\n      var simplified = concat$simplify(element, unconditionalModificationsForTails);\n      var tmp;\n      if (simplified.e1i_1.o()) {\n        // Inline function 'kotlin.collections.ifEmpty' call\n        var this_0 = simplified.f1i_1;\n        var tmp_0;\n        if (this_0.o()) {\n          tmp_0 = listOf_0(simplified);\n        } else {\n          tmp_0 = this_0;\n        }\n        tmp = tmp_0;\n      } else {\n        tmp = listOf_0(simplified);\n      }\n      var list = tmp;\n      addAll(destination, list);\n    }\n    // Inline function 'kotlin.collections.ifEmpty' call\n    var tmp_1;\n    if (destination.o()) {\n      tmp_1 = listOf_0(new ParserStructure(unconditionalModificationsForTails, emptyList()));\n    } else {\n      tmp_1 = destination;\n    }\n    var mergedTails = tmp_1;\n    var tmp_2;\n    if (currentNumberSpan == null) {\n      tmp_2 = new ParserStructure(newOperations, mergedTails);\n    } else {\n      var tmp$ret$8;\n      $l$block_0: {\n        // Inline function 'kotlin.collections.none' call\n        var tmp_3;\n        if (isInterface(mergedTails, Collection)) {\n          tmp_3 = mergedTails.o();\n        } else {\n          tmp_3 = false;\n        }\n        if (tmp_3) {\n          tmp$ret$8 = true;\n          break $l$block_0;\n        }\n        var _iterator__ex2g4s_1 = mergedTails.l();\n        while (_iterator__ex2g4s_1.m()) {\n          var element_0 = _iterator__ex2g4s_1.n();\n          var tmp0_safe_receiver = firstOrNull(element_0.e1i_1);\n          var tmp_4;\n          if (tmp0_safe_receiver == null) {\n            tmp_4 = null;\n          } else {\n            // Inline function 'kotlin.let' call\n            tmp_4 = tmp0_safe_receiver instanceof NumberSpanParserOperation;\n          }\n          if (tmp_4 === true) {\n            tmp$ret$8 = false;\n            break $l$block_0;\n          }\n        }\n        tmp$ret$8 = true;\n      }\n      if (tmp$ret$8) {\n        newOperations.j(new NumberSpanParserOperation(currentNumberSpan));\n        tmp_2 = new ParserStructure(newOperations, mergedTails);\n      } else {\n        // Inline function 'kotlin.collections.map' call\n        // Inline function 'kotlin.collections.mapTo' call\n        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(mergedTails, 10));\n        var _iterator__ex2g4s_2 = mergedTails.l();\n        while (_iterator__ex2g4s_2.m()) {\n          var item = _iterator__ex2g4s_2.n();\n          var firstOperation = firstOrNull(item.e1i_1);\n          var tmp_5;\n          if (firstOperation instanceof NumberSpanParserOperation) {\n            tmp_5 = new ParserStructure(plus(listOf_0(new NumberSpanParserOperation(plus(currentNumberSpan, firstOperation.j1i_1))), drop(item.e1i_1, 1)), item.f1i_1);\n          } else {\n            if (firstOperation == null) {\n              tmp_5 = new ParserStructure(listOf_0(new NumberSpanParserOperation(currentNumberSpan)), item.f1i_1);\n            } else {\n              tmp_5 = new ParserStructure(plus(listOf_0(new NumberSpanParserOperation(currentNumberSpan)), item.e1i_1), item.f1i_1);\n            }\n          }\n          var tmp$ret$12 = tmp_5;\n          destination_0.j(tmp$ret$12);\n        }\n        var newTails = destination_0;\n        tmp_2 = new ParserStructure(newOperations, newTails);\n      }\n    }\n    return tmp_2;\n  }\n  function formatError$lambda(it) {\n    return 'position ' + it.w1h_1 + \": '\" + it.x1h_1() + \"'\";\n  }\n  function spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name, withMinus) {\n    withMinus = withMinus === VOID ? false : withMinus;\n    var minNumberLength = (minDigits == null ? 1 : minDigits) + (withMinus ? 1 : 0) | 0;\n    var tmp;\n    if (maxDigits == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      tmp = withMinus ? maxDigits + 1 | 0 : maxDigits;\n    }\n    var tmp2_elvis_lhs = tmp;\n    var maxNumberLength = tmp2_elvis_lhs == null ? 2147483647 : tmp2_elvis_lhs;\n    var spacePadding_0 = spacePadding == null ? 0 : spacePadding;\n    // Inline function 'kotlin.comparisons.minOf' call\n    var maxPaddedNumberLength = Math.min(maxNumberLength, spacePadding_0);\n    if (minNumberLength >= maxPaddedNumberLength)\n      return spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, minNumberLength, maxNumberLength);\n    var accumulated = spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, minNumberLength, minNumberLength);\n    var inductionVariable = minNumberLength;\n    if (inductionVariable < maxPaddedNumberLength)\n      do {\n        var accumulatedWidth = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        accumulated = new ParserStructure(emptyList(), listOf([spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, accumulatedWidth + 1 | 0, accumulatedWidth + 1 | 0), concat(listOf([new ParserStructure(listOf_0(new PlainStringParserOperation(' ')), emptyList()), accumulated]))]));\n      }\n       while (inductionVariable < maxPaddedNumberLength);\n    var tmp_0;\n    if (spacePadding_0 > maxNumberLength) {\n      var prepadding = new PlainStringParserOperation(repeat(' ', spacePadding_0 - maxNumberLength | 0));\n      tmp_0 = concat(listOf([new ParserStructure(listOf_0(prepadding), emptyList()), accumulated]));\n    } else if (spacePadding_0 === maxNumberLength) {\n      tmp_0 = accumulated;\n    } else {\n      var r = new ParserStructure(emptyList(), listOf([spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, spacePadding_0 + 1 | 0, maxNumberLength), accumulated]));\n      tmp_0 = r;\n    }\n    return tmp_0;\n  }\n  function _get_whatThisExpects__4pg11j($this) {\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = $this.j1i_1;\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var _iterator__ex2g4s = this_0.l();\n    while (_iterator__ex2g4s.m()) {\n      var item = _iterator__ex2g4s.n();\n      var length = item.a();\n      var tmp$ret$0 = (length == null ? 'at least one digit' : '' + length + ' digits') + (' for ' + item.g1h_1);\n      destination.j(tmp$ret$0);\n    }\n    var consumerLengths = destination;\n    var tmp;\n    if ($this.l1i_1) {\n      tmp = 'a number with at least ' + $this.k1i_1 + ' digits: ' + toString(consumerLengths);\n    } else {\n      tmp = 'a number with exactly ' + $this.k1i_1 + ' digits: ' + toString(consumerLengths);\n    }\n    return tmp;\n  }\n  function NumberSpanParserOperation$consume$lambda(this$0) {\n    return function () {\n      return 'Unexpected end of input: yet to parse ' + _get_whatThisExpects__4pg11j(this$0);\n    };\n  }\n  function NumberSpanParserOperation$consume$lambda_0($digitsInRow, this$0) {\n    return function () {\n      return 'Only found ' + $digitsInRow._v + ' digits in a row, but need to parse ' + _get_whatThisExpects__4pg11j(this$0);\n    };\n  }\n  function NumberSpanParserOperation$consume$lambda_1($numberString, this$0, $i, $error) {\n    return function () {\n      return \"Can not interpret the string '\" + $numberString + \"' as \" + this$0.j1i_1.p($i).g1h_1 + ': ' + $error.l1h();\n    };\n  }\n  function NumberSpanParserOperation(consumers) {\n    this.j1i_1 = consumers;\n    var tmp = this;\n    // Inline function 'kotlin.collections.sumOf' call\n    var sum = 0;\n    var _iterator__ex2g4s = this.j1i_1.l();\n    while (_iterator__ex2g4s.m()) {\n      var element = _iterator__ex2g4s.n();\n      var tmp_0 = sum;\n      var tmp0_elvis_lhs = element.a();\n      sum = tmp_0 + (tmp0_elvis_lhs == null ? 1 : tmp0_elvis_lhs) | 0;\n    }\n    tmp.k1i_1 = sum;\n    var tmp_1 = this;\n    var tmp0 = this.j1i_1;\n    var tmp$ret$2;\n    $l$block_0: {\n      // Inline function 'kotlin.collections.any' call\n      var tmp_2;\n      if (isInterface(tmp0, Collection)) {\n        tmp_2 = tmp0.o();\n      } else {\n        tmp_2 = false;\n      }\n      if (tmp_2) {\n        tmp$ret$2 = false;\n        break $l$block_0;\n      }\n      var _iterator__ex2g4s_0 = tmp0.l();\n      while (_iterator__ex2g4s_0.m()) {\n        var element_0 = _iterator__ex2g4s_0.n();\n        if (element_0.a() == null) {\n          tmp$ret$2 = true;\n          break $l$block_0;\n        }\n      }\n      tmp$ret$2 = false;\n    }\n    tmp_1.l1i_1 = tmp$ret$2;\n    var tmp0_0 = this.j1i_1;\n    var tmp$ret$4;\n    $l$block_2: {\n      // Inline function 'kotlin.collections.all' call\n      var tmp_3;\n      if (isInterface(tmp0_0, Collection)) {\n        tmp_3 = tmp0_0.o();\n      } else {\n        tmp_3 = false;\n      }\n      if (tmp_3) {\n        tmp$ret$4 = true;\n        break $l$block_2;\n      }\n      var _iterator__ex2g4s_1 = tmp0_0.l();\n      while (_iterator__ex2g4s_1.m()) {\n        var element_1 = _iterator__ex2g4s_1.n();\n        var tmp0_elvis_lhs_0 = element_1.a();\n        if (!((tmp0_elvis_lhs_0 == null ? 2147483647 : tmp0_elvis_lhs_0) > 0)) {\n          tmp$ret$4 = false;\n          break $l$block_2;\n        }\n      }\n      tmp$ret$4 = true;\n    }\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.require' call\n    if (!tmp$ret$4) {\n      var message = 'Failed requirement.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var tmp0_1 = this.j1i_1;\n    var tmp$ret$9;\n    $l$block_3: {\n      // Inline function 'kotlin.collections.count' call\n      var tmp_4;\n      if (isInterface(tmp0_1, Collection)) {\n        tmp_4 = tmp0_1.o();\n      } else {\n        tmp_4 = false;\n      }\n      if (tmp_4) {\n        tmp$ret$9 = 0;\n        break $l$block_3;\n      }\n      var count = 0;\n      var _iterator__ex2g4s_2 = tmp0_1.l();\n      while (_iterator__ex2g4s_2.m()) {\n        var element_2 = _iterator__ex2g4s_2.n();\n        if (element_2.a() == null) {\n          count = count + 1 | 0;\n          checkCountOverflow(count);\n        }\n      }\n      tmp$ret$9 = count;\n    }\n    // Inline function 'kotlin.require' call\n    if (!(tmp$ret$9 <= 1)) {\n      // Inline function 'kotlin.collections.filter' call\n      var tmp0_2 = this.j1i_1;\n      // Inline function 'kotlin.collections.filterTo' call\n      var destination = ArrayList_init_$Create$_0();\n      var _iterator__ex2g4s_3 = tmp0_2.l();\n      while (_iterator__ex2g4s_3.m()) {\n        var element_3 = _iterator__ex2g4s_3.n();\n        if (element_3.a() == null) {\n          destination.j(element_3);\n        }\n      }\n      // Inline function 'kotlin.collections.map' call\n      // Inline function 'kotlin.collections.mapTo' call\n      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));\n      var _iterator__ex2g4s_4 = destination.l();\n      while (_iterator__ex2g4s_4.m()) {\n        var item = _iterator__ex2g4s_4.n();\n        var tmp$ret$14 = item.g1h_1;\n        destination_0.j(tmp$ret$14);\n      }\n      var fieldNames = destination_0;\n      var message_0 = 'At most one variable-length numeric field in a row is allowed, but got several: ' + toString(fieldNames) + '. ' + \"Parsing is undefined: for example, with variable-length month number and variable-length day of month, '111' can be parsed as Jan 11th or Nov 1st.\";\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(NumberSpanParserOperation).g1i = function (storage, input, startIndex) {\n    if ((startIndex + this.k1i_1 | 0) > charSequenceLength(input)) {\n      var tmp = Companion_instance_13;\n      return tmp.z1h(startIndex, NumberSpanParserOperation$consume$lambda(this));\n    }\n    var digitsInRow = {_v: 0};\n    while ((startIndex + digitsInRow._v | 0) < charSequenceLength(input) && isAsciiDigit(charSequenceGet(input, startIndex + digitsInRow._v | 0))) {\n      digitsInRow._v = digitsInRow._v + 1 | 0;\n      digitsInRow._v;\n    }\n    if (digitsInRow._v < this.k1i_1) {\n      var tmp_0 = Companion_instance_13;\n      return tmp_0.z1h(startIndex, NumberSpanParserOperation$consume$lambda_0(digitsInRow, this));\n    }\n    var index = startIndex;\n    var inductionVariable = 0;\n    var last = this.j1i_1.q() - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var tmp0_elvis_lhs = this.j1i_1.p(i).a();\n        var length = tmp0_elvis_lhs == null ? (digitsInRow._v - this.k1i_1 | 0) + 1 | 0 : tmp0_elvis_lhs;\n        var error = this.j1i_1.p(i).h1h(storage, input, index, index + length | 0);\n        if (!(error == null)) {\n          var tmp2 = index;\n          // Inline function 'kotlin.text.substring' call\n          var endIndex = index + length | 0;\n          var numberString = toString(charSequenceSubSequence(input, tmp2, endIndex));\n          var tmp_1 = Companion_instance_13;\n          var tmp_2 = index;\n          return tmp_1.z1h(tmp_2, NumberSpanParserOperation$consume$lambda_1(numberString, this, i, error));\n        }\n        index = index + length | 0;\n      }\n       while (inductionVariable <= last);\n    return Companion_instance_13.y1h(index);\n  };\n  protoOf(NumberSpanParserOperation).toString = function () {\n    return _get_whatThisExpects__4pg11j(this);\n  };\n  function SignedIntParser(minDigits, maxDigits, spacePadding, setter, name, plusOnExceedsWidth) {\n    var parsers = mutableListOf([spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name, true)]);\n    if (!(plusOnExceedsWidth == null)) {\n      parsers.j(spaceAndZeroPaddedUnsignedInt(minDigits, plusOnExceedsWidth, spacePadding, setter, name));\n      parsers.j(new ParserStructure(listOf([new PlainStringParserOperation('+'), new NumberSpanParserOperation(listOf_0(new UnsignedIntConsumer(plusOnExceedsWidth + 1 | 0, maxDigits, setter, name, false)))]), emptyList()));\n    } else {\n      parsers.j(spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name));\n    }\n    return new ParserStructure(emptyList(), parsers);\n  }\n  function PlainStringParserOperation$consume$lambda(this$0) {\n    return function () {\n      return \"Unexpected end of input: yet to parse '\" + this$0.m1i_1 + \"'\";\n    };\n  }\n  function PlainStringParserOperation$consume$lambda_0(this$0, $input, $startIndex, $i) {\n    return function () {\n      var tmp0 = $input;\n      var tmp2 = $startIndex;\n      // Inline function 'kotlin.text.substring' call\n      var endIndex = ($startIndex + $i | 0) + 1 | 0;\n      var tmp$ret$0 = toString(charSequenceSubSequence(tmp0, tmp2, endIndex));\n      return 'Expected ' + this$0.m1i_1 + ' but got ' + tmp$ret$0;\n    };\n  }\n  function PlainStringParserOperation(string) {\n    this.m1i_1 = string;\n    // Inline function 'kotlin.text.isNotEmpty' call\n    var this_0 = this.m1i_1;\n    // Inline function 'kotlin.require' call\n    if (!(charSequenceLength(this_0) > 0)) {\n      var message = 'Empty string is not allowed';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    if (!!isAsciiDigit(charCodeAt(this.m1i_1, 0))) {\n      var message_0 = \"String '\" + this.m1i_1 + \"' starts with a digit\";\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n    // Inline function 'kotlin.require' call\n    if (!!isAsciiDigit(charCodeAt(this.m1i_1, this.m1i_1.length - 1 | 0))) {\n      var message_1 = \"String '\" + this.m1i_1 + \"' ends with a digit\";\n      throw IllegalArgumentException_init_$Create$(toString(message_1));\n    }\n  }\n  protoOf(PlainStringParserOperation).g1i = function (storage, input, startIndex) {\n    if ((startIndex + this.m1i_1.length | 0) > charSequenceLength(input)) {\n      var tmp = Companion_instance_13;\n      return tmp.z1h(startIndex, PlainStringParserOperation$consume$lambda(this));\n    }\n    var inductionVariable = 0;\n    var last = charSequenceLength(this.m1i_1) - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        if (!(charSequenceGet(input, startIndex + i | 0) === charCodeAt(this.m1i_1, i))) {\n          var tmp_0 = Companion_instance_13;\n          return tmp_0.z1h(startIndex, PlainStringParserOperation$consume$lambda_0(this, input, startIndex, i));\n        }\n      }\n       while (inductionVariable <= last);\n    return Companion_instance_13.y1h(startIndex + this.m1i_1.length | 0);\n  };\n  protoOf(PlainStringParserOperation).toString = function () {\n    return \"'\" + this.m1i_1 + \"'\";\n  };\n  function SignParser$consume$lambda(this$0, $char) {\n    return function () {\n      return 'Expected ' + this$0.p1i_1 + ' but got ' + toString_0($char);\n    };\n  }\n  function SignParser(isNegativeSetter, withPlusSign, whatThisExpects) {\n    this.n1i_1 = isNegativeSetter;\n    this.o1i_1 = withPlusSign;\n    this.p1i_1 = whatThisExpects;\n  }\n  protoOf(SignParser).g1i = function (storage, input, startIndex) {\n    if (startIndex >= charSequenceLength(input))\n      return Companion_instance_13.y1h(startIndex);\n    var char = charSequenceGet(input, startIndex);\n    if (char === _Char___init__impl__6a9atx(45)) {\n      this.n1i_1(storage, true);\n      return Companion_instance_13.y1h(startIndex + 1 | 0);\n    }\n    if (char === _Char___init__impl__6a9atx(43) && this.o1i_1) {\n      this.n1i_1(storage, false);\n      return Companion_instance_13.y1h(startIndex + 1 | 0);\n    }\n    var tmp = Companion_instance_13;\n    return tmp.z1h(startIndex, SignParser$consume$lambda(this, char));\n  };\n  protoOf(SignParser).toString = function () {\n    return this.p1i_1;\n  };\n  function UnconditionalModification(operation) {\n    this.q1i_1 = operation;\n  }\n  protoOf(UnconditionalModification).g1i = function (storage, input, startIndex) {\n    this.q1i_1(storage);\n    return Companion_instance_13.y1h(startIndex);\n  };\n  function spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths($withMinus, $setter, $name, minNumberLength, maxNumberLength) {\n    // Inline function 'kotlin.check' call\n    if (!(maxNumberLength >= (1 + ($withMinus ? 1 : 0) | 0))) {\n      throw IllegalStateException_init_$Create$('Check failed.');\n    }\n    // Inline function 'kotlin.collections.buildList' call\n    // Inline function 'kotlin.collections.buildListInternal' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = ArrayList_init_$Create$_0();\n    if ($withMinus) {\n      this_0.j(new PlainStringParserOperation('-'));\n    }\n    this_0.j(new NumberSpanParserOperation(listOf_0(new UnsignedIntConsumer(minNumberLength - ($withMinus ? 1 : 0) | 0, maxNumberLength - ($withMinus ? 1 : 0) | 0, $setter, $name, $withMinus))));\n    var tmp$ret$4 = this_0.c4();\n    return new ParserStructure(tmp$ret$4, emptyList());\n  }\n  function get_POWERS_OF_TEN() {\n    _init_properties_math_kt__tgcmt4();\n    return POWERS_OF_TEN;\n  }\n  var POWERS_OF_TEN;\n  function DecimalFraction(fractionalPart, digits) {\n    this.i1a_1 = fractionalPart;\n    this.j1a_1 = digits;\n    // Inline function 'kotlin.require' call\n    if (!(this.j1a_1 >= 0)) {\n      var message = 'Digits must be non-negative, but was ' + this.j1a_1;\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n  }\n  protoOf(DecimalFraction).k1a = function (newDigits) {\n    return newDigits === this.j1a_1 ? this.i1a_1 : newDigits > this.j1a_1 ? imul(this.i1a_1, get_POWERS_OF_TEN()[newDigits - this.j1a_1 | 0]) : this.i1a_1 / get_POWERS_OF_TEN()[this.j1a_1 - newDigits | 0] | 0;\n  };\n  protoOf(DecimalFraction).r1i = function (other) {\n    var tmp0 = this.j1a_1;\n    // Inline function 'kotlin.comparisons.maxOf' call\n    var b = other.j1a_1;\n    // Inline function 'kotlin.let' call\n    var maxPrecision = Math.max(tmp0, b);\n    return compareTo(this.k1a(maxPrecision), other.k1a(maxPrecision));\n  };\n  protoOf(DecimalFraction).d = function (other) {\n    return this.r1i(other instanceof DecimalFraction ? other : THROW_CCE());\n  };\n  protoOf(DecimalFraction).equals = function (other) {\n    var tmp;\n    if (other instanceof DecimalFraction) {\n      tmp = this.r1i(other) === 0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(DecimalFraction).toString = function () {\n    // Inline function 'kotlin.text.buildString' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = StringBuilder_init_$Create$();\n    var denominator = get_POWERS_OF_TEN()[this.j1a_1];\n    this_0.la(this.i1a_1 / denominator | 0);\n    this_0.x6(_Char___init__impl__6a9atx(46));\n    this_0.w6(removePrefix((denominator + (this.i1a_1 % denominator | 0) | 0).toString(), '1'));\n    return this_0.toString();\n  };\n  protoOf(DecimalFraction).hashCode = function () {\n    throw UnsupportedOperationException_init_$Create$('DecimalFraction is not supposed to be used as a hash key');\n  };\n  var properties_initialized_math_kt_amm9wq;\n  function _init_properties_math_kt__tgcmt4() {\n    if (!properties_initialized_math_kt_amm9wq) {\n      properties_initialized_math_kt_amm9wq = true;\n      // Inline function 'kotlin.intArrayOf' call\n      POWERS_OF_TEN = new Int32Array([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);\n    }\n  }\n  function isAsciiDigit(_this__u8e3s4) {\n    return _Char___init__impl__6a9atx(48) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57) : false;\n  }\n  function asciiDigitToInt(_this__u8e3s4) {\n    return Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(48));\n  }\n  function TimeBasedDateTimeUnitSerializer$descriptor$delegate$lambda() {\n    return buildClassSerialDescriptor('kotlinx.datetime.TimeBased', [], TimeBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda);\n  }\n  function TimeBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda($this$buildClassSerialDescriptor) {\n    // Inline function 'kotlinx.serialization.descriptors.element' call\n    var elementName = 'nanoseconds';\n    var annotations = emptyList();\n    // Inline function 'kotlinx.serialization.serializer' call\n    // Inline function 'kotlinx.serialization.internal.cast' call\n    var this_0 = serializer(createKType(getKClass(Long), arrayOf([]), false));\n    var descriptor = (isInterface(this_0, KSerializer) ? this_0 : THROW_CCE()).ki();\n    $this$buildClassSerialDescriptor.jk(elementName, descriptor, annotations, false);\n    return Unit_instance;\n  }\n  function TimeBasedDateTimeUnitSerializer$_get_descriptor_$ref_ezonyw() {\n    return function (p0) {\n      return p0.ki();\n    };\n  }\n  function TimeBasedDateTimeUnitSerializer() {\n    TimeBasedDateTimeUnitSerializer_instance = this;\n    var tmp = this;\n    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();\n    tmp.s1i_1 = lazy_0(tmp_0, TimeBasedDateTimeUnitSerializer$descriptor$delegate$lambda);\n  }\n  protoOf(TimeBasedDateTimeUnitSerializer).ki = function () {\n    var tmp0 = this.s1i_1;\n    var tmp = KProperty1;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('descriptor', 1, tmp, TimeBasedDateTimeUnitSerializer$_get_descriptor_$ref_ezonyw(), null);\n    return tmp0.p1();\n  };\n  protoOf(TimeBasedDateTimeUnitSerializer).li = function (decoder) {\n    var seen = {_v: false};\n    var nanoseconds = {_v: new Long(0, 0)};\n    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call\n    var descriptor = this.ki();\n    var composite = decoder.ml(descriptor);\n    if (composite.bm()) {\n      nanoseconds._v = composite.sl(TimeBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n      seen._v = true;\n    } else {\n      loop: while (true) {\n        var elementIndex = composite.cm(TimeBasedDateTimeUnitSerializer_getInstance().ki());\n        switch (elementIndex) {\n          case 0:\n            nanoseconds._v = composite.sl(TimeBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n            seen._v = true;\n            break;\n          case -1:\n            break loop;\n          default:\n            throwUnknownIndexException(elementIndex);\n            break;\n        }\n      }\n    }\n    var result = Unit_instance;\n    composite.nl(descriptor);\n    if (!seen._v)\n      throw MissingFieldException_init_$Create$('nanoseconds', this.ki().ij());\n    return new TimeBased(nanoseconds._v);\n  };\n  var TimeBasedDateTimeUnitSerializer_instance;\n  function TimeBasedDateTimeUnitSerializer_getInstance() {\n    if (TimeBasedDateTimeUnitSerializer_instance == null)\n      new TimeBasedDateTimeUnitSerializer();\n    return TimeBasedDateTimeUnitSerializer_instance;\n  }\n  function _get_impl__d88w17($this) {\n    var tmp0 = $this.t1i_1;\n    var tmp = KProperty1;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('impl', 1, tmp, DateBasedDateTimeUnitSerializer$_get_impl_$ref_m860rs(), null);\n    return tmp0.p1();\n  }\n  function DateBasedDateTimeUnitSerializer$impl$delegate$lambda() {\n    var tmp = getKClass(DateBased);\n    // Inline function 'kotlin.arrayOf' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp_0 = [getKClass(DayBased), getKClass(MonthBased)];\n    // Inline function 'kotlin.arrayOf' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp$ret$5 = [DayBasedDateTimeUnitSerializer_getInstance(), MonthBasedDateTimeUnitSerializer_getInstance()];\n    return new SealedClassSerializer('kotlinx.datetime.DateTimeUnit.DateBased', tmp, tmp_0, tmp$ret$5);\n  }\n  function DateBasedDateTimeUnitSerializer$_get_impl_$ref_m860rs() {\n    return function (p0) {\n      return _get_impl__d88w17(p0);\n    };\n  }\n  function DateBasedDateTimeUnitSerializer() {\n    DateBasedDateTimeUnitSerializer_instance = this;\n    AbstractPolymorphicSerializer.call(this);\n    var tmp = this;\n    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();\n    tmp.t1i_1 = lazy_0(tmp_0, DateBasedDateTimeUnitSerializer$impl$delegate$lambda);\n  }\n  protoOf(DateBasedDateTimeUnitSerializer).zi = function (decoder, klassName) {\n    return _get_impl__d88w17(this).zi(decoder, klassName);\n  };\n  protoOf(DateBasedDateTimeUnitSerializer).yi = function () {\n    return getKClass(DateBased);\n  };\n  protoOf(DateBasedDateTimeUnitSerializer).ki = function () {\n    return _get_impl__d88w17(this).ki();\n  };\n  var DateBasedDateTimeUnitSerializer_instance;\n  function DateBasedDateTimeUnitSerializer_getInstance() {\n    if (DateBasedDateTimeUnitSerializer_instance == null)\n      new DateBasedDateTimeUnitSerializer();\n    return DateBasedDateTimeUnitSerializer_instance;\n  }\n  function DayBasedDateTimeUnitSerializer$descriptor$delegate$lambda() {\n    return buildClassSerialDescriptor('kotlinx.datetime.DayBased', [], DayBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda);\n  }\n  function DayBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda($this$buildClassSerialDescriptor) {\n    // Inline function 'kotlinx.serialization.descriptors.element' call\n    var annotations = emptyList();\n    // Inline function 'kotlinx.serialization.serializer' call\n    // Inline function 'kotlinx.serialization.internal.cast' call\n    var this_0 = serializer(createKType(PrimitiveClasses_getInstance().t9(), arrayOf([]), false));\n    var descriptor = (isInterface(this_0, KSerializer) ? this_0 : THROW_CCE()).ki();\n    $this$buildClassSerialDescriptor.jk('days', descriptor, annotations, false);\n    return Unit_instance;\n  }\n  function DayBasedDateTimeUnitSerializer$_get_descriptor_$ref_2ycvl3() {\n    return function (p0) {\n      return p0.ki();\n    };\n  }\n  function DayBasedDateTimeUnitSerializer() {\n    DayBasedDateTimeUnitSerializer_instance = this;\n    var tmp = this;\n    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();\n    tmp.u1i_1 = lazy_0(tmp_0, DayBasedDateTimeUnitSerializer$descriptor$delegate$lambda);\n  }\n  protoOf(DayBasedDateTimeUnitSerializer).ki = function () {\n    var tmp0 = this.u1i_1;\n    var tmp = KProperty1;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('descriptor', 1, tmp, DayBasedDateTimeUnitSerializer$_get_descriptor_$ref_2ycvl3(), null);\n    return tmp0.p1();\n  };\n  protoOf(DayBasedDateTimeUnitSerializer).li = function (decoder) {\n    var seen = {_v: false};\n    var days = {_v: 0};\n    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call\n    var descriptor = this.ki();\n    var composite = decoder.ml(descriptor);\n    if (composite.bm()) {\n      days._v = composite.rl(DayBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n      seen._v = true;\n    } else {\n      loop: while (true) {\n        var elementIndex = composite.cm(DayBasedDateTimeUnitSerializer_getInstance().ki());\n        switch (elementIndex) {\n          case 0:\n            days._v = composite.rl(DayBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n            seen._v = true;\n            break;\n          case -1:\n            break loop;\n          default:\n            throwUnknownIndexException(elementIndex);\n            break;\n        }\n      }\n    }\n    var result = Unit_instance;\n    composite.nl(descriptor);\n    if (!seen._v)\n      throw MissingFieldException_init_$Create$('days', this.ki().ij());\n    return new DayBased(days._v);\n  };\n  var DayBasedDateTimeUnitSerializer_instance;\n  function DayBasedDateTimeUnitSerializer_getInstance() {\n    if (DayBasedDateTimeUnitSerializer_instance == null)\n      new DayBasedDateTimeUnitSerializer();\n    return DayBasedDateTimeUnitSerializer_instance;\n  }\n  function MonthBasedDateTimeUnitSerializer$descriptor$delegate$lambda() {\n    return buildClassSerialDescriptor('kotlinx.datetime.MonthBased', [], MonthBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda);\n  }\n  function MonthBasedDateTimeUnitSerializer$descriptor$delegate$lambda$lambda($this$buildClassSerialDescriptor) {\n    // Inline function 'kotlinx.serialization.descriptors.element' call\n    var annotations = emptyList();\n    // Inline function 'kotlinx.serialization.serializer' call\n    // Inline function 'kotlinx.serialization.internal.cast' call\n    var this_0 = serializer(createKType(PrimitiveClasses_getInstance().t9(), arrayOf([]), false));\n    var descriptor = (isInterface(this_0, KSerializer) ? this_0 : THROW_CCE()).ki();\n    $this$buildClassSerialDescriptor.jk('months', descriptor, annotations, false);\n    return Unit_instance;\n  }\n  function MonthBasedDateTimeUnitSerializer$_get_descriptor_$ref_vroatn() {\n    return function (p0) {\n      return p0.ki();\n    };\n  }\n  function MonthBasedDateTimeUnitSerializer() {\n    MonthBasedDateTimeUnitSerializer_instance = this;\n    var tmp = this;\n    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();\n    tmp.v1i_1 = lazy_0(tmp_0, MonthBasedDateTimeUnitSerializer$descriptor$delegate$lambda);\n  }\n  protoOf(MonthBasedDateTimeUnitSerializer).ki = function () {\n    var tmp0 = this.v1i_1;\n    var tmp = KProperty1;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('descriptor', 1, tmp, MonthBasedDateTimeUnitSerializer$_get_descriptor_$ref_vroatn(), null);\n    return tmp0.p1();\n  };\n  protoOf(MonthBasedDateTimeUnitSerializer).li = function (decoder) {\n    var seen = {_v: false};\n    var months = {_v: 0};\n    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call\n    var descriptor = this.ki();\n    var composite = decoder.ml(descriptor);\n    if (composite.bm()) {\n      months._v = composite.rl(MonthBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n      seen._v = true;\n    } else {\n      loop: while (true) {\n        var elementIndex = composite.cm(MonthBasedDateTimeUnitSerializer_getInstance().ki());\n        switch (elementIndex) {\n          case 0:\n            months._v = composite.rl(MonthBasedDateTimeUnitSerializer_getInstance().ki(), 0);\n            seen._v = true;\n            break;\n          case -1:\n            break loop;\n          default:\n            throwUnknownIndexException(elementIndex);\n            break;\n        }\n      }\n    }\n    var result = Unit_instance;\n    composite.nl(descriptor);\n    if (!seen._v)\n      throw MissingFieldException_init_$Create$('months', this.ki().ij());\n    return new MonthBased(months._v);\n  };\n  var MonthBasedDateTimeUnitSerializer_instance;\n  function MonthBasedDateTimeUnitSerializer_getInstance() {\n    if (MonthBasedDateTimeUnitSerializer_instance == null)\n      new MonthBasedDateTimeUnitSerializer();\n    return MonthBasedDateTimeUnitSerializer_instance;\n  }\n  function _get_impl__d88w17_0($this) {\n    var tmp0 = $this.w1i_1;\n    var tmp = KProperty1;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('impl', 1, tmp, DateTimeUnitSerializer$_get_impl_$ref_2y1hvx(), null);\n    return tmp0.p1();\n  }\n  function DateTimeUnitSerializer$impl$delegate$lambda() {\n    var tmp = getKClass(DateTimeUnit);\n    // Inline function 'kotlin.arrayOf' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp_0 = [getKClass(DayBased), getKClass(MonthBased), getKClass(TimeBased)];\n    // Inline function 'kotlin.arrayOf' call\n    // Inline function 'kotlin.js.unsafeCast' call\n    // Inline function 'kotlin.js.asDynamic' call\n    var tmp$ret$5 = [DayBasedDateTimeUnitSerializer_getInstance(), MonthBasedDateTimeUnitSerializer_getInstance(), TimeBasedDateTimeUnitSerializer_getInstance()];\n    return new SealedClassSerializer('kotlinx.datetime.DateTimeUnit', tmp, tmp_0, tmp$ret$5);\n  }\n  function DateTimeUnitSerializer$_get_impl_$ref_2y1hvx() {\n    return function (p0) {\n      return _get_impl__d88w17_0(p0);\n    };\n  }\n  function DateTimeUnitSerializer() {\n    DateTimeUnitSerializer_instance = this;\n    AbstractPolymorphicSerializer.call(this);\n    var tmp = this;\n    var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();\n    tmp.w1i_1 = lazy_0(tmp_0, DateTimeUnitSerializer$impl$delegate$lambda);\n  }\n  protoOf(DateTimeUnitSerializer).zi = function (decoder, klassName) {\n    return _get_impl__d88w17_0(this).zi(decoder, klassName);\n  };\n  protoOf(DateTimeUnitSerializer).yi = function () {\n    return getKClass(DateTimeUnit);\n  };\n  protoOf(DateTimeUnitSerializer).ki = function () {\n    return _get_impl__d88w17_0(this).ki();\n  };\n  var DateTimeUnitSerializer_instance;\n  function DateTimeUnitSerializer_getInstance() {\n    if (DateTimeUnitSerializer_instance == null)\n      new DateTimeUnitSerializer();\n    return DateTimeUnitSerializer_instance;\n  }\n  function throwUnknownIndexException(index) {\n    throw SerializationException_init_$Create$('An unknown field for index ' + index);\n  }\n  function LocalDateSerializer() {\n    LocalDateSerializer_instance = this;\n    this.x1i_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalDate', STRING_getInstance());\n  }\n  protoOf(LocalDateSerializer).ki = function () {\n    return this.x1i_1;\n  };\n  protoOf(LocalDateSerializer).li = function (decoder) {\n    return Companion_getInstance_14().c1j(decoder.il());\n  };\n  var LocalDateSerializer_instance;\n  function LocalDateSerializer_getInstance() {\n    if (LocalDateSerializer_instance == null)\n      new LocalDateSerializer();\n    return LocalDateSerializer_instance;\n  }\n  function LocalDateTimeSerializer() {\n    LocalDateTimeSerializer_instance = this;\n    this.d1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalDateTime', STRING_getInstance());\n  }\n  protoOf(LocalDateTimeSerializer).ki = function () {\n    return this.d1j_1;\n  };\n  protoOf(LocalDateTimeSerializer).li = function (decoder) {\n    return Companion_getInstance_15().g1j(decoder.il());\n  };\n  var LocalDateTimeSerializer_instance;\n  function LocalDateTimeSerializer_getInstance() {\n    if (LocalDateTimeSerializer_instance == null)\n      new LocalDateTimeSerializer();\n    return LocalDateTimeSerializer_instance;\n  }\n  function LocalTimeSerializer() {\n    LocalTimeSerializer_instance = this;\n    this.h1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalTime', STRING_getInstance());\n  }\n  protoOf(LocalTimeSerializer).ki = function () {\n    return this.h1j_1;\n  };\n  protoOf(LocalTimeSerializer).li = function (decoder) {\n    return Companion_getInstance_16().k1j(decoder.il());\n  };\n  var LocalTimeSerializer_instance;\n  function LocalTimeSerializer_getInstance() {\n    if (LocalTimeSerializer_instance == null)\n      new LocalTimeSerializer();\n    return LocalTimeSerializer_instance;\n  }\n  function UtcOffsetSerializer() {\n    UtcOffsetSerializer_instance = this;\n    this.l1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.UtcOffset', STRING_getInstance());\n  }\n  protoOf(UtcOffsetSerializer).ki = function () {\n    return this.l1j_1;\n  };\n  protoOf(UtcOffsetSerializer).li = function (decoder) {\n    return Companion_getInstance_19().n1j(decoder.il());\n  };\n  var UtcOffsetSerializer_instance;\n  function UtcOffsetSerializer_getInstance() {\n    if (UtcOffsetSerializer_instance == null)\n      new UtcOffsetSerializer();\n    return UtcOffsetSerializer_instance;\n  }\n  function FixedOffsetTimeZoneSerializer() {\n    FixedOffsetTimeZoneSerializer_instance = this;\n    this.o1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.FixedOffsetTimeZone', STRING_getInstance());\n  }\n  protoOf(FixedOffsetTimeZoneSerializer).ki = function () {\n    return this.o1j_1;\n  };\n  protoOf(FixedOffsetTimeZoneSerializer).li = function (decoder) {\n    var zone = Companion_getInstance_18().q1j(decoder.il());\n    if (zone instanceof FixedOffsetTimeZone) {\n      return zone;\n    } else {\n      throw SerializationException_init_$Create$(\"Timezone identifier '\" + zone.toString() + \"' does not correspond to a fixed-offset timezone\");\n    }\n  };\n  var FixedOffsetTimeZoneSerializer_instance;\n  function FixedOffsetTimeZoneSerializer_getInstance() {\n    if (FixedOffsetTimeZoneSerializer_instance == null)\n      new FixedOffsetTimeZoneSerializer();\n    return FixedOffsetTimeZoneSerializer_instance;\n  }\n  function TimeZoneSerializer() {\n    TimeZoneSerializer_instance = this;\n    this.r1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.TimeZone', STRING_getInstance());\n  }\n  protoOf(TimeZoneSerializer).ki = function () {\n    return this.r1j_1;\n  };\n  protoOf(TimeZoneSerializer).li = function (decoder) {\n    return Companion_getInstance_18().q1j(decoder.il());\n  };\n  var TimeZoneSerializer_instance;\n  function TimeZoneSerializer_getInstance() {\n    if (TimeZoneSerializer_instance == null)\n      new TimeZoneSerializer();\n    return TimeZoneSerializer_instance;\n  }\n  function YearMonthSerializer() {\n    YearMonthSerializer_instance = this;\n    this.s1j_1 = PrimitiveSerialDescriptor('kotlinx.datetime.YearMonth', STRING_getInstance());\n  }\n  protoOf(YearMonthSerializer).ki = function () {\n    return this.s1j_1;\n  };\n  protoOf(YearMonthSerializer).li = function (decoder) {\n    return Companion_instance_20.t1j(decoder.il());\n  };\n  var YearMonthSerializer_instance;\n  function YearMonthSerializer_getInstance() {\n    if (YearMonthSerializer_instance == null)\n      new YearMonthSerializer();\n    return YearMonthSerializer_instance;\n  }\n  function get_tzdb() {\n    _init_properties_Platform_kt__37ezn1();\n    return tzdb;\n  }\n  var tzdb;\n  function currentSystemDefaultZone() {\n    _init_properties_Platform_kt__37ezn1();\n    var id = ZoneId.systemDefault().id();\n    return id === 'SYSTEM' ? to(id, SystemTimeZone_getInstance()) : to(id, null);\n  }\n  function timeZoneById(zoneId) {\n    _init_properties_Platform_kt__37ezn1();\n    var tmp;\n    if (zoneId === 'SYSTEM') {\n      var _destruct__k2r9zo = currentSystemDefaultZone();\n      var name = _destruct__k2r9zo.mc();\n      var zone = _destruct__k2r9zo.nc();\n      if (zone == null)\n        null;\n      else {\n        // Inline function 'kotlin.let' call\n        return zone;\n      }\n      tmp = name;\n    } else {\n      tmp = zoneId;\n    }\n    var id = tmp;\n    var tmp1_safe_receiver = rulesForId(id);\n    if (tmp1_safe_receiver == null)\n      null;\n    else {\n      // Inline function 'kotlin.let' call\n      return new RegionTimeZone(tmp1_safe_receiver, id);\n    }\n    throw IllegalTimeZoneException_init_$Create$_0('js-joda timezone database is not available');\n  }\n  function SystemTimeZone() {\n    SystemTimeZone_instance = this;\n    TimeZone.call(this);\n  }\n  protoOf(SystemTimeZone).u1j = function () {\n    return 'SYSTEM';\n  };\n  protoOf(SystemTimeZone).v1j = function (instant) {\n    return UtcOffset_0(VOID, -numberToInt((new Date(toNumber(instant.wf()))).getTimezoneOffset()) | 0);\n  };\n  protoOf(SystemTimeZone).equals = function (other) {\n    return other === this;\n  };\n  protoOf(SystemTimeZone).hashCode = function () {\n    return getStringHashCode(this.u1j());\n  };\n  var SystemTimeZone_instance;\n  function SystemTimeZone_getInstance() {\n    if (SystemTimeZone_instance == null)\n      new SystemTimeZone();\n    return SystemTimeZone_instance;\n  }\n  function rulesForId(zoneId) {\n    _init_properties_Platform_kt__37ezn1();\n    // Inline function 'kotlin.getOrThrow' call\n    var this_0 = get_tzdb();\n    throwOnFailure(this_0);\n    var tmp = _Result___get_value__impl__bjfvqg(this_0);\n    var tmp0_safe_receiver = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();\n    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.x1j(zoneId);\n  }\n  function tzdb$_anonymous_$charCodeToInt_8mx2pm(char) {\n    var tmp;\n    if (_Char___init__impl__6a9atx(48) <= char ? char <= _Char___init__impl__6a9atx(57) : false) {\n      tmp = Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48));\n    } else if (_Char___init__impl__6a9atx(97) <= char ? char <= _Char___init__impl__6a9atx(122) : false) {\n      tmp = Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0;\n    } else if (_Char___init__impl__6a9atx(65) <= char ? char <= _Char___init__impl__6a9atx(88) : false) {\n      tmp = Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 36 | 0;\n    } else {\n      throw IllegalArgumentException_init_$Create$('Invalid character: ' + toString_0(char));\n    }\n    return tmp;\n  }\n  function tzdb$_anonymous_$base60MinutesInSeconds_9n6ifx(string) {\n    var parts = split(string, charArrayOf([_Char___init__impl__6a9atx(46)]));\n    var sign;\n    var minuteNumberStart;\n    if (startsWith(string, _Char___init__impl__6a9atx(45))) {\n      minuteNumberStart = 1;\n      sign = -1;\n    } else {\n      minuteNumberStart = 0;\n      sign = 1;\n    }\n    var whole = parts.p(0);\n    // Inline function 'kotlin.collections.map' call\n    var this_0 = numberRangeToNumber(minuteNumberStart, get_lastIndex(whole));\n    // Inline function 'kotlin.collections.mapTo' call\n    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n    var inductionVariable = this_0.u_1;\n    var last = this_0.v_1;\n    if (inductionVariable <= last)\n      do {\n        var item = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var it = item;\n        var tmp$ret$0 = tzdb$_anonymous_$charCodeToInt_8mx2pm(charCodeAt(whole, it));\n        destination.j(tmp$ret$0);\n      }\n       while (!(item === last));\n    // Inline function 'kotlin.collections.fold' call\n    var accumulator = new Long(0, 0);\n    var _iterator__ex2g4s = destination.l();\n    while (_iterator__ex2g4s.m()) {\n      var element = _iterator__ex2g4s.n();\n      var acc = accumulator;\n      // Inline function 'kotlin.Long.plus' call\n      var this_1 = multiply(numberToLong(60), acc);\n      accumulator = add(this_1, fromInt(element));\n    }\n    var wholeMinutes = accumulator;\n    var tmp0_safe_receiver = getOrNull(parts, 1);\n    var tmp;\n    if (tmp0_safe_receiver == null) {\n      tmp = null;\n    } else {\n      // Inline function 'kotlin.let' call\n      var tmp_0;\n      switch (tmp0_safe_receiver.length) {\n        case 1:\n          tmp_0 = tzdb$_anonymous_$charCodeToInt_8mx2pm(charCodeAt(tmp0_safe_receiver, 0));\n          break;\n        case 0:\n          tmp_0 = 0;\n          break;\n        default:\n          var tmp_1 = tzdb$_anonymous_$charCodeToInt_8mx2pm(charCodeAt(tmp0_safe_receiver, 0));\n          // Inline function 'kotlin.let' call\n\n          tmp_0 = tmp_1 + (tzdb$_anonymous_$charCodeToInt_8mx2pm(charCodeAt(tmp0_safe_receiver, 1)) >= 30 ? 1 : 0) | 0;\n          break;\n      }\n      tmp = tmp_0;\n    }\n    var tmp1_elvis_lhs = tmp;\n    var seconds = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;\n    // Inline function 'kotlin.Long.times' call\n    // Inline function 'kotlin.Long.plus' call\n    var this_2 = multiply(wholeMinutes, fromInt(60));\n    var tmp0 = add(this_2, fromInt(seconds));\n    // Inline function 'kotlin.Long.times' call\n    var other = sign;\n    return multiply(tmp0, fromInt(other));\n  }\n  function tzdb$1($zones) {\n    this.y1j_1 = $zones;\n  }\n  protoOf(tzdb$1).x1j = function (id) {\n    var tmp0_elvis_lhs = this.y1j_1.s1(id);\n    var tmp;\n    if (tmp0_elvis_lhs == null) {\n      throw IllegalTimeZoneException_init_$Create$_0('Unknown time zone: ' + id);\n    } else {\n      tmp = tmp0_elvis_lhs;\n    }\n    return tmp;\n  };\n  var properties_initialized_Platform_kt_qdcgvf;\n  function _init_properties_Platform_kt__37ezn1() {\n    if (!properties_initialized_Platform_kt_qdcgvf) {\n      properties_initialized_Platform_kt_qdcgvf = true;\n      // Inline function 'kotlin.runCatching' call\n      var tmp;\n      try {\n        var tmp$ret$1;\n        $l$block: {\n          // Inline function 'kotlin.collections.mutableMapOf' call\n          var zones = LinkedHashMap_init_$Create$();\n          var tmp0_elvis_lhs = readTzdb();\n          var tmp_0;\n          if (tmp0_elvis_lhs == null) {\n            tmp$ret$1 = null;\n            break $l$block;\n          } else {\n            tmp_0 = tmp0_elvis_lhs;\n          }\n          var _destruct__k2r9zo = tmp_0;\n          var zonesPacked = _destruct__k2r9zo.mc();\n          var linksPacked = _destruct__k2r9zo.nc();\n          var _iterator__ex2g4s = zonesPacked.l();\n          while (_iterator__ex2g4s.m()) {\n            var zone = _iterator__ex2g4s.n();\n            var components = split(zone, charArrayOf([_Char___init__impl__6a9atx(124)]));\n            // Inline function 'kotlin.collections.map' call\n            var this_0 = split(components.p(2), charArrayOf([_Char___init__impl__6a9atx(32)]));\n            // Inline function 'kotlin.collections.mapTo' call\n            var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));\n            var _iterator__ex2g4s_0 = this_0.l();\n            while (_iterator__ex2g4s_0.m()) {\n              var item = _iterator__ex2g4s_0.n();\n              var tmp$ret$2 = UtcOffset_0(null, null, -convertToInt(tzdb$_anonymous_$base60MinutesInSeconds_9n6ifx(item)) | 0);\n              destination.j(tmp$ret$2);\n            }\n            var offsets = destination;\n            // Inline function 'kotlin.text.map' call\n            var this_1 = components.p(3);\n            // Inline function 'kotlin.text.mapTo' call\n            var destination_0 = ArrayList_init_$Create$(charSequenceLength(this_1));\n            var inductionVariable = 0;\n            while (inductionVariable < charSequenceLength(this_1)) {\n              var item_0 = charSequenceGet(this_1, inductionVariable);\n              inductionVariable = inductionVariable + 1 | 0;\n              var tmp$ret$5 = tzdb$_anonymous_$charCodeToInt_8mx2pm(item_0);\n              destination_0.j(tmp$ret$5);\n            }\n            var indices = destination_0;\n            // Inline function 'kotlin.collections.map' call\n            var this_2 = split(components.p(4), charArrayOf([_Char___init__impl__6a9atx(32)]));\n            // Inline function 'kotlin.collections.mapTo' call\n            var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));\n            var _iterator__ex2g4s_1 = this_2.l();\n            while (_iterator__ex2g4s_1.m()) {\n              var item_1 = _iterator__ex2g4s_1.n();\n              var tmp$ret$8 = tzdb$_anonymous_$base60MinutesInSeconds_9n6ifx(item_1);\n              destination_1.j(tmp$ret$8);\n            }\n            var lengthsOfPeriodsWithOffsets = destination_1;\n            var tmp2 = components.p(0);\n            var tmp$ret$11;\n            $l$block_0: {\n              // Inline function 'kotlin.collections.runningReduce' call\n              var iterator = lengthsOfPeriodsWithOffsets.l();\n              if (!iterator.m()) {\n                tmp$ret$11 = emptyList();\n                break $l$block_0;\n              }\n              var accumulator = iterator.n();\n              // Inline function 'kotlin.apply' call\n              var this_3 = ArrayList_init_$Create$(collectionSizeOrDefault(lengthsOfPeriodsWithOffsets, 10));\n              this_3.j(accumulator);\n              var result = this_3;\n              while (iterator.m()) {\n                var tmp0 = accumulator;\n                var p1 = iterator.n();\n                accumulator = add(tmp0, p1);\n                result.j(accumulator);\n              }\n              tmp$ret$11 = result;\n            }\n            // Inline function 'kotlin.let' call\n            var it = tmp$ret$11;\n            var tmp_1 = it.q() === (indices.q() - 1 | 0) ? it : take(it, indices.q() - 1 | 0);\n            // Inline function 'kotlin.collections.map' call\n            // Inline function 'kotlin.collections.mapTo' call\n            var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(indices, 10));\n            var _iterator__ex2g4s_2 = indices.l();\n            while (_iterator__ex2g4s_2.m()) {\n              var item_2 = _iterator__ex2g4s_2.n();\n              var tmp$ret$17 = offsets.p(item_2);\n              destination_2.j(tmp$ret$17);\n            }\n            // Inline function 'kotlin.collections.set' call\n            var value = new TimeZoneRulesCommon(tmp_1, destination_2, null);\n            zones.w1(tmp2, value);\n          }\n          var _iterator__ex2g4s_3 = linksPacked.l();\n          while (_iterator__ex2g4s_3.m()) {\n            var link = _iterator__ex2g4s_3.n();\n            var components_0 = split(link, charArrayOf([_Char___init__impl__6a9atx(124)]));\n            var tmp1_safe_receiver = zones.s1(components_0.p(0));\n            if (tmp1_safe_receiver == null)\n              null;\n            else {\n              // Inline function 'kotlin.let' call\n              // Inline function 'kotlin.collections.set' call\n              var key = components_0.p(1);\n              zones.w1(key, tmp1_safe_receiver);\n            }\n          }\n          tmp$ret$1 = new tzdb$1(zones);\n        }\n        // Inline function 'kotlin.Companion.success' call\n        var value_0 = tmp$ret$1;\n        tmp = _Result___init__impl__xyqfz8(value_0);\n      } catch ($p) {\n        var tmp_2;\n        if ($p instanceof Error) {\n          var e = $p;\n          // Inline function 'kotlin.Companion.failure' call\n          tmp_2 = _Result___init__impl__xyqfz8(createFailure(e));\n        } else {\n          throw $p;\n        }\n        tmp = tmp_2;\n      }\n      tzdb = tmp;\n    }\n  }\n  function Companion_13() {\n    Companion_instance_14 = this;\n    this.y1i_1 = new LocalDate(-999999999, 1, 1);\n    this.z1i_1 = new LocalDate(999999999, 12, 31);\n    this.a1j_1 = new Long(-170999002, -86);\n    this.b1j_1 = new Long(169560311, 85);\n  }\n  protoOf(Companion_13).z1j = function (input, format) {\n    return format.sf(input);\n  };\n  protoOf(Companion_13).c1j = function (input, format, $super) {\n    format = format === VOID ? getIsoDateFormat() : format;\n    return $super === VOID ? this.z1j(input, format) : $super.z1j.call(this, input, format);\n  };\n  protoOf(Companion_13).a1k = function (epochDays) {\n    // Inline function 'kotlin.require' call\n    if (!(compare(new Long(-170999002, -86), epochDays) <= 0 ? compare(epochDays, new Long(169560311, 85)) <= 0 : false)) {\n      var message = 'Invalid date: epoch day ' + epochDays.toString() + ' is outside the boundaries of LocalDate';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.Long.plus' call\n    var zeroDay = add(epochDays, fromInt(719528));\n    // Inline function 'kotlin.Long.minus' call\n    var this_0 = zeroDay;\n    zeroDay = subtract(this_0, fromInt(60));\n    var adjust = new Long(0, 0);\n    if (compare(zeroDay, new Long(0, 0)) < 0) {\n      // Inline function 'kotlin.Long.plus' call\n      var this_1 = zeroDay;\n      // Inline function 'kotlin.Long.div' call\n      var this_2 = add(this_1, fromInt(1));\n      // Inline function 'kotlin.Long.minus' call\n      var this_3 = divide(this_2, fromInt(146097));\n      var adjustCycles = subtract(this_3, fromInt(1));\n      // Inline function 'kotlin.Long.times' call\n      adjust = multiply(adjustCycles, fromInt(400));\n      var tmp = zeroDay;\n      // Inline function 'kotlin.Long.times' call\n      var this_4 = negate(adjustCycles);\n      var tmp$ret$8 = multiply(this_4, fromInt(146097));\n      zeroDay = add(tmp, tmp$ret$8);\n    }\n    // Inline function 'kotlin.Long.plus' call\n    var this_5 = multiply(numberToLong(400), zeroDay);\n    // Inline function 'kotlin.Long.div' call\n    var this_6 = add(this_5, fromInt(591));\n    var yearEst = divide(this_6, fromInt(146097));\n    var tmp_0 = zeroDay;\n    var tmp_1 = multiply(numberToLong(365), yearEst);\n    // Inline function 'kotlin.Long.div' call\n    var this_7 = yearEst;\n    var tmp$ret$11 = divide(this_7, fromInt(4));\n    var tmp_2 = add(tmp_1, tmp$ret$11);\n    // Inline function 'kotlin.Long.div' call\n    var this_8 = yearEst;\n    var tmp$ret$12 = divide(this_8, fromInt(100));\n    var tmp_3 = subtract(tmp_2, tmp$ret$12);\n    // Inline function 'kotlin.Long.div' call\n    var this_9 = yearEst;\n    var tmp$ret$13 = divide(this_9, fromInt(400));\n    var doyEst = subtract(tmp_0, add(tmp_3, tmp$ret$13));\n    if (compare(doyEst, new Long(0, 0)) < 0) {\n      var _unary__edvuaz = yearEst;\n      yearEst = subtract(_unary__edvuaz, get_ONE());\n      var tmp_4 = zeroDay;\n      var tmp_5 = multiply(numberToLong(365), yearEst);\n      // Inline function 'kotlin.Long.div' call\n      var this_10 = yearEst;\n      var tmp$ret$14 = divide(this_10, fromInt(4));\n      var tmp_6 = add(tmp_5, tmp$ret$14);\n      // Inline function 'kotlin.Long.div' call\n      var this_11 = yearEst;\n      var tmp$ret$15 = divide(this_11, fromInt(100));\n      var tmp_7 = subtract(tmp_6, tmp$ret$15);\n      // Inline function 'kotlin.Long.div' call\n      var this_12 = yearEst;\n      var tmp$ret$16 = divide(this_12, fromInt(400));\n      doyEst = subtract(tmp_4, add(tmp_7, tmp$ret$16));\n    }\n    yearEst = add(yearEst, adjust);\n    var marchDoy0 = convertToInt(doyEst);\n    var marchMonth0 = (imul(marchDoy0, 5) + 2 | 0) / 153 | 0;\n    var month = ((marchMonth0 + 2 | 0) % 12 | 0) + 1 | 0;\n    var dom = (marchDoy0 - ((imul(marchMonth0, 306) + 5 | 0) / 10 | 0) | 0) + 1 | 0;\n    var tmp0 = yearEst;\n    // Inline function 'kotlin.Long.plus' call\n    var other = marchMonth0 / 10 | 0;\n    yearEst = add(tmp0, fromInt(other));\n    return new LocalDate(convertToInt(yearEst), month, dom);\n  };\n  var Companion_instance_14;\n  function Companion_getInstance_14() {\n    if (Companion_instance_14 == null)\n      new Companion_13();\n    return Companion_instance_14;\n  }\n  function Formats() {\n    Formats_instance = this;\n    this.r15_1 = get_ISO_DATE_BASIC();\n  }\n  protoOf(Formats).s15 = function () {\n    return get_ISO_DATE();\n  };\n  var Formats_instance;\n  function Formats_getInstance() {\n    if (Formats_instance == null)\n      new Formats();\n    return Formats_instance;\n  }\n  function resolvePreviousValid($this, year, month, day) {\n    // Inline function 'kotlin.math.min' call\n    var b = monthLength(month, isLeapYear(year));\n    var newDay = Math.min(day, b);\n    return new LocalDate(year, month, newDay);\n  }\n  function LocalDate(year, month, day) {\n    Companion_getInstance_14();\n    this.x17_1 = year;\n    this.y17_1 = day;\n    this.z17_1 = month;\n    // Inline function 'kotlin.require' call\n    if (!isValidYear(this.x17_1)) {\n      var message = 'Invalid date: the year is out of range';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var containsArg = this.z17_1;\n    // Inline function 'kotlin.require' call\n    if (!(1 <= containsArg ? containsArg <= 12 : false)) {\n      var message_0 = 'Invalid date: month must be a number between 1 and 12, got ' + this.z17_1;\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n    var containsArg_0 = this.y17_1;\n    // Inline function 'kotlin.require' call\n    if (!(1 <= containsArg_0 ? containsArg_0 <= 31 : false)) {\n      var message_1 = 'Invalid date: day of month must be a number between 1 and 31, got ' + this.y17_1;\n      throw IllegalArgumentException_init_$Create$(toString(message_1));\n    }\n    if (this.y17_1 > 28 && this.y17_1 > monthLength(this.z17_1, isLeapYear(this.x17_1))) {\n      if (this.y17_1 === 29) {\n        throw IllegalArgumentException_init_$Create$(\"Invalid date 'February 29' as '\" + this.x17_1 + \"' is not a leap year\");\n      } else {\n        throw IllegalArgumentException_init_$Create$(\"Invalid date '\" + Month_0(month).toString() + ' ' + this.y17_1 + \"'\");\n      }\n    }\n  }\n  protoOf(LocalDate).b1k = function () {\n    var y = fromInt(this.x17_1);\n    var m = fromInt(this.z17_1);\n    var total = new Long(0, 0);\n    total = add(total, multiply(numberToLong(365), y));\n    if (compare(y, new Long(0, 0)) >= 0) {\n      var tmp = total;\n      // Inline function 'kotlin.Long.plus' call\n      // Inline function 'kotlin.Long.div' call\n      var this_0 = add(y, fromInt(3));\n      var tmp_0 = divide(this_0, fromInt(4));\n      // Inline function 'kotlin.Long.plus' call\n      // Inline function 'kotlin.Long.div' call\n      var this_1 = add(y, fromInt(99));\n      var tmp$ret$3 = divide(this_1, fromInt(100));\n      var tmp_1 = subtract(tmp_0, tmp$ret$3);\n      // Inline function 'kotlin.Long.plus' call\n      // Inline function 'kotlin.Long.div' call\n      var this_2 = add(y, fromInt(399));\n      var tmp$ret$5 = divide(this_2, fromInt(400));\n      total = add(tmp, add(tmp_1, tmp$ret$5));\n    } else {\n      var tmp_2 = total;\n      // Inline function 'kotlin.Long.div' call\n      var tmp_3 = divide(y, fromInt(-4));\n      // Inline function 'kotlin.Long.div' call\n      var tmp$ret$7 = divide(y, fromInt(-100));\n      var tmp_4 = subtract(tmp_3, tmp$ret$7);\n      // Inline function 'kotlin.Long.div' call\n      var tmp$ret$8 = divide(y, fromInt(-400));\n      total = subtract(tmp_2, add(tmp_4, tmp$ret$8));\n    }\n    var tmp_5 = total;\n    // Inline function 'kotlin.Long.minus' call\n    var this_3 = multiply(numberToLong(367), m);\n    // Inline function 'kotlin.Long.div' call\n    var this_4 = subtract(this_3, fromInt(362));\n    var tmp$ret$10 = divide(this_4, fromInt(12));\n    total = add(tmp_5, tmp$ret$10);\n    var tmp0 = total;\n    // Inline function 'kotlin.Long.plus' call\n    var other = this.y17_1 - 1 | 0;\n    total = add(tmp0, fromInt(other));\n    if (compare(m, new Long(2, 0)) > 0) {\n      var _unary__edvuaz = total;\n      total = subtract(_unary__edvuaz, get_ONE());\n      if (!isLeapYear(this.x17_1)) {\n        var _unary__edvuaz_0 = total;\n        total = subtract(_unary__edvuaz_0, get_ONE());\n      }\n    }\n    // Inline function 'kotlin.Long.minus' call\n    var this_5 = total;\n    return subtract(this_5, fromInt(719528));\n  };\n  protoOf(LocalDate).a18 = function () {\n    return Month_0(this.z17_1);\n  };\n  protoOf(LocalDate).s17 = function () {\n    // Inline function 'kotlin.Long.plus' call\n    var this_0 = this.b1k();\n    // Inline function 'kotlin.mod' call\n    var tmp0 = add(this_0, fromInt(3));\n    // Inline function 'kotlin.mod' call\n    var other = fromInt(7);\n    var r = modulo(tmp0, other);\n    var tmp$ret$1 = add(r, bitwiseAnd(other, shiftRight(bitwiseAnd(bitwiseXor(r, other), bitwiseOr(r, negate(r))), 63)));\n    var dow0 = convertToInt(tmp$ret$1);\n    return DayOfWeek_0(dow0 + 1 | 0);\n  };\n  protoOf(LocalDate).u17 = function () {\n    return (firstDayOfYear(this.a18(), isLeapYear(this.x17_1)) + this.y17_1 | 0) - 1 | 0;\n  };\n  protoOf(LocalDate).c1k = function (other) {\n    var y = compareTo(this.x17_1, other.x17_1);\n    if (!(y === 0)) {\n      return y;\n    }\n    var m = compareTo(this.z17_1, other.z17_1);\n    if (!(m === 0)) {\n      return m;\n    }\n    return compareTo(this.y17_1, other.y17_1);\n  };\n  protoOf(LocalDate).d = function (other) {\n    return this.c1k(other instanceof LocalDate ? other : THROW_CCE());\n  };\n  protoOf(LocalDate).d1k = function (monthsToAdd) {\n    if (equalsLong(monthsToAdd, new Long(0, 0))) {\n      return this;\n    }\n    var tmp0 = multiply(numberToLong(this.x17_1), new Long(12, 0));\n    // Inline function 'kotlin.Long.plus' call\n    var other = this.z17_1 - 1 | 0;\n    var monthCount = add(tmp0, fromInt(other));\n    var calcMonths = safeAdd(monthCount, monthsToAdd);\n    // Inline function 'kotlin.floorDiv' call\n    // Inline function 'kotlin.floorDiv' call\n    var other_0 = fromInt(12);\n    var q = divide(calcMonths, other_0);\n    if (compare(bitwiseXor(calcMonths, other_0), new Long(0, 0)) < 0 && !equalsLong(multiply(q, other_0), calcMonths)) {\n      var _unary__edvuaz = q;\n      q = subtract(_unary__edvuaz, get_ONE());\n    }\n    var newYear = q;\n    // Inline function 'kotlin.ranges.contains' call\n    var this_0 = numberRangeToNumber(-999999999, 999999999);\n    if (!contains(isInterface(this_0, ClosedRange) ? this_0 : THROW_CCE(), newYear)) {\n      throw IllegalArgumentException_init_$Create$('The result of adding ' + monthsToAdd.toString() + ' months to ' + this.toString() + ' is out of LocalDate range.');\n    }\n    // Inline function 'kotlin.mod' call\n    // Inline function 'kotlin.mod' call\n    var other_1 = fromInt(12);\n    var r = modulo(calcMonths, other_1);\n    var tmp$ret$4 = add(r, bitwiseAnd(other_1, shiftRight(bitwiseAnd(bitwiseXor(r, other_1), bitwiseOr(r, negate(r))), 63)));\n    var newMonth = convertToInt(tmp$ret$4) + 1 | 0;\n    return resolvePreviousValid(this, convertToInt(newYear), newMonth, this.y17_1);\n  };\n  protoOf(LocalDate).e1k = function (daysToAdd) {\n    return equalsLong(daysToAdd, new Long(0, 0)) ? this : Companion_getInstance_14().a1k(safeAdd(this.b1k(), daysToAdd));\n  };\n  protoOf(LocalDate).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof LocalDate) {\n        tmp_0 = this.c1k(other) === 0;\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(LocalDate).hashCode = function () {\n    var yearValue = this.x17_1;\n    var monthValue = this.z17_1;\n    var dayValue = this.y17_1;\n    return yearValue & -2048 ^ (((yearValue << 11) + (monthValue << 6) | 0) + dayValue | 0);\n  };\n  protoOf(LocalDate).toString = function () {\n    return format(this, Formats_getInstance().s15());\n  };\n  function isValidYear(year) {\n    return year >= -999999999 && year <= 999999999;\n  }\n  function plus_1(_this__u8e3s4, value, unit) {\n    var tmp;\n    try {\n      var tmp_0;\n      if (unit instanceof DayBased) {\n        tmp_0 = _this__u8e3s4.e1k(safeMultiply(value, fromInt(unit.d15_1)));\n      } else {\n        if (unit instanceof MonthBased) {\n          tmp_0 = _this__u8e3s4.d1k(safeMultiply(value, fromInt(unit.e15_1)));\n        } else {\n          noWhenBranchMatchedException();\n        }\n      }\n      tmp = tmp_0;\n    } catch ($p) {\n      var tmp_1;\n      if ($p instanceof ArithmeticException) {\n        var e = $p;\n        throw DateTimeArithmeticException_init_$Create$_0('Arithmetic overflow when adding a value to a date', e);\n      } else {\n        if ($p instanceof IllegalArgumentException) {\n          var e_0 = $p;\n          throw DateTimeArithmeticException_init_$Create$_0('Boundaries of LocalDate exceeded when adding a value', e_0);\n        } else {\n          throw $p;\n        }\n      }\n    }\n    return tmp;\n  }\n  function get_ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS() {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    var tmp0 = ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS', 0, tmp, _get_ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS_$ref_4ujexv(), null);\n    return tmp0.p1();\n  }\n  var ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate;\n  function Companion_14() {\n    Companion_instance_15 = this;\n    this.e1j_1 = new LocalDateTime(Companion_getInstance_14().y1i_1, Companion_getInstance_16().i1j_1);\n    this.f1j_1 = new LocalDateTime(Companion_getInstance_14().z1i_1, Companion_getInstance_16().j1j_1);\n  }\n  protoOf(Companion_14).f1k = function (input, format) {\n    return format.sf(input);\n  };\n  protoOf(Companion_14).g1j = function (input, format, $super) {\n    format = format === VOID ? getIsoDateTimeFormat() : format;\n    return $super === VOID ? this.f1k(input, format) : $super.f1k.call(this, input, format);\n  };\n  var Companion_instance_15;\n  function Companion_getInstance_15() {\n    if (Companion_instance_15 == null)\n      new Companion_14();\n    return Companion_instance_15;\n  }\n  function Formats_0() {\n    Formats_instance_0 = this;\n    this.u15_1 = get_ISO_DATETIME();\n  }\n  var Formats_instance_0;\n  function Formats_getInstance_0() {\n    if (Formats_instance_0 == null)\n      new Formats_0();\n    return Formats_instance_0;\n  }\n  function LocalDateTime(date, time) {\n    Companion_getInstance_15();\n    this.v14_1 = date;\n    this.w14_1 = time;\n  }\n  protoOf(LocalDateTime).w17 = function () {\n    return this.v14_1.x17_1;\n  };\n  protoOf(LocalDateTime).z19 = function () {\n    return this.w14_1.o1a_1;\n  };\n  protoOf(LocalDateTime).g1k = function (other) {\n    var d = this.v14_1.c1k(other.v14_1);\n    if (!(d === 0)) {\n      return d;\n    }\n    return this.w14_1.h1k(other.w14_1);\n  };\n  protoOf(LocalDateTime).d = function (other) {\n    return this.g1k(other instanceof LocalDateTime ? other : THROW_CCE());\n  };\n  protoOf(LocalDateTime).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof LocalDateTime) {\n        tmp_0 = this.g1k(other) === 0;\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(LocalDateTime).hashCode = function () {\n    return this.v14_1.hashCode() ^ this.w14_1.hashCode();\n  };\n  protoOf(LocalDateTime).toString = function () {\n    return format_0(this, get_ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS());\n  };\n  protoOf(LocalDateTime).i1k = function (offset) {\n    var epochDay = this.v14_1.b1k();\n    // Inline function 'kotlin.Long.times' call\n    var tmp0 = multiply(epochDay, fromInt(86400));\n    // Inline function 'kotlin.Long.plus' call\n    var other = this.w14_1.j1k();\n    var secs = add(tmp0, fromInt(other));\n    var tmp0_0 = secs;\n    // Inline function 'kotlin.Long.minus' call\n    var other_0 = offset.p1c_1;\n    secs = subtract(tmp0_0, fromInt(other_0));\n    return secs;\n  };\n  function plusSeconds(_this__u8e3s4, seconds) {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    if (seconds === 0) {\n      return _this__u8e3s4;\n    }\n    var currentNanoOfDay = _this__u8e3s4.w14_1.k1k();\n    var totalNanos = add(multiply(numberToLong(seconds % 86400 | 0), new Long(1000000000, 0)), currentNanoOfDay);\n    var tmp = seconds / 86400 | 0;\n    // Inline function 'kotlin.floorDiv' call\n    var other = new Long(-1857093632, 20116);\n    var q = divide(totalNanos, other);\n    if (compare(bitwiseXor(totalNanos, other), new Long(0, 0)) < 0 && !equalsLong(multiply(q, other), totalNanos)) {\n      var _unary__edvuaz = q;\n      q = subtract(_unary__edvuaz, get_ONE());\n    }\n    var tmp$ret$0 = q;\n    var totalDays = add(numberToLong(tmp), tmp$ret$0);\n    // Inline function 'kotlin.mod' call\n    var other_0 = new Long(-1857093632, 20116);\n    var r = modulo(totalNanos, other_0);\n    var newNanoOfDay = add(r, bitwiseAnd(other_0, shiftRight(bitwiseAnd(bitwiseXor(r, other_0), bitwiseOr(r, negate(r))), 63)));\n    var newTime = equalsLong(newNanoOfDay, currentNanoOfDay) ? _this__u8e3s4.w14_1 : Companion_getInstance_16().l1k(newNanoOfDay);\n    return new LocalDateTime(_this__u8e3s4.v14_1.e1k(totalDays), newTime);\n  }\n  function ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda() {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    var tmp = Companion_instance_7;\n    return tmp.c19(ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda);\n  }\n  function ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    $this$build.n16(get_ISO_DATE());\n    var tmp = [ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda];\n    alternativeParsing($this$build, tmp, ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda_0);\n    $this$build.v16(get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS());\n    return Unit_instance;\n  }\n  function ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda($this$alternativeParsing) {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(116));\n    return Unit_instance;\n  }\n  function ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_LocalDateTime_kt__bewbbg();\n    char($this$alternativeParsing, _Char___init__impl__6a9atx(84));\n    return Unit_instance;\n  }\n  function _get_ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS_$ref_4ujexv() {\n    return function () {\n      return get_ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS();\n    };\n  }\n  var properties_initialized_LocalDateTime_kt_aulw4q;\n  function _init_properties_LocalDateTime_kt__bewbbg() {\n    if (!properties_initialized_LocalDateTime_kt_aulw4q) {\n      properties_initialized_LocalDateTime_kt_aulw4q = true;\n      ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate = lazy(ISO_DATETIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda);\n    }\n  }\n  function get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS() {\n    _init_properties_LocalTime_kt__nmhi56();\n    var tmp0 = ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate;\n    var tmp = KProperty0;\n    // Inline function 'kotlin.getValue' call\n    getPropertyCallableRef('ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS', 0, tmp, _get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS_$ref_fmwpvv(), null);\n    return tmp0.p1();\n  }\n  var ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate;\n  function Companion_15() {\n    Companion_instance_16 = this;\n    this.i1j_1 = new LocalTime(0, 0, 0, 0);\n    this.j1j_1 = new LocalTime(23, 59, 59, 999999999);\n  }\n  protoOf(Companion_15).m1k = function (input, format) {\n    return format.sf(input);\n  };\n  protoOf(Companion_15).k1j = function (input, format, $super) {\n    format = format === VOID ? getIsoTimeFormat() : format;\n    return $super === VOID ? this.m1k(input, format) : $super.m1k.call(this, input, format);\n  };\n  protoOf(Companion_15).n1k = function (secondOfDay, nanoOfSecond) {\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.require' call\n    if (!(0 <= secondOfDay ? secondOfDay < 86400 : false)) {\n      var message = 'Failed requirement.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.require' call\n    if (!(0 <= nanoOfSecond ? nanoOfSecond < 1000000000 : false)) {\n      var message_0 = 'Failed requirement.';\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n    var hours = secondOfDay / 3600 | 0;\n    var secondWithoutHours = secondOfDay - imul(hours, 3600) | 0;\n    var minutes = secondWithoutHours / 60 | 0;\n    var second = secondWithoutHours - imul(minutes, 60) | 0;\n    return new LocalTime(hours, minutes, second, nanoOfSecond);\n  };\n  protoOf(Companion_15).l1k = function (nanoOfDay) {\n    var tmp;\n    if (compare(nanoOfDay, new Long(0, 0)) >= 0) {\n      var tmp0 = new Long(86400, 0);\n      // Inline function 'kotlin.Long.times' call\n      var other = 1000000000;\n      var tmp$ret$0 = multiply(tmp0, fromInt(other));\n      tmp = compare(nanoOfDay, tmp$ret$0) < 0;\n    } else {\n      tmp = false;\n    }\n    // Inline function 'kotlin.require' call\n    // Inline function 'kotlin.require' call\n    if (!tmp) {\n      var message = 'Failed requirement.';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var newNanoOfDay = nanoOfDay;\n    var hours = convertToInt(divide(newNanoOfDay, new Long(817405952, 838)));\n    newNanoOfDay = subtract(newNanoOfDay, multiply(numberToLong(hours), new Long(817405952, 838)));\n    var minutes = convertToInt(divide(newNanoOfDay, new Long(-129542144, 13)));\n    newNanoOfDay = subtract(newNanoOfDay, multiply(numberToLong(minutes), new Long(-129542144, 13)));\n    var tmp0_0 = newNanoOfDay;\n    // Inline function 'kotlin.Long.div' call\n    var other_0 = 1000000000;\n    var tmp$ret$4 = divide(tmp0_0, fromInt(other_0));\n    var seconds = convertToInt(tmp$ret$4);\n    var tmp0_1 = newNanoOfDay;\n    // Inline function 'kotlin.Long.minus' call\n    var other_1 = imul(seconds, 1000000000);\n    newNanoOfDay = subtract(tmp0_1, fromInt(other_1));\n    return new LocalTime(hours, minutes, seconds, convertToInt(newNanoOfDay));\n  };\n  var Companion_instance_16;\n  function Companion_getInstance_16() {\n    if (Companion_instance_16 == null)\n      new Companion_15();\n    return Companion_instance_16;\n  }\n  function Formats_1() {\n  }\n  protoOf(Formats_1).s15 = function () {\n    return get_ISO_TIME();\n  };\n  var Formats_instance_1;\n  function Formats_getInstance_1() {\n    return Formats_instance_1;\n  }\n  function _init_$check(value, lower, upper, str) {\n    // Inline function 'kotlin.require' call\n    if (!(lower <= value ? value <= upper : false)) {\n      var message = 'Invalid time: ' + str + ' must be a number between ' + lower + ' and ' + upper + ', got ' + value;\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    return Unit_instance;\n  }\n  function LocalTime(hour, minute, second, nanosecond) {\n    Companion_getInstance_16();\n    second = second === VOID ? 0 : second;\n    nanosecond = nanosecond === VOID ? 0 : nanosecond;\n    this.l1a_1 = hour;\n    this.m1a_1 = minute;\n    this.n1a_1 = second;\n    this.o1a_1 = nanosecond;\n    _init_$check(this.l1a_1, 0, 23, 'hour');\n    _init_$check(this.m1a_1, 0, 59, 'minute');\n    _init_$check(this.n1a_1, 0, 59, 'second');\n    _init_$check(this.o1a_1, 0, 999999999, 'nanosecond');\n  }\n  protoOf(LocalTime).h1k = function (other) {\n    var h = compareTo(this.l1a_1, other.l1a_1);\n    if (!(h === 0)) {\n      return h;\n    }\n    var m = compareTo(this.m1a_1, other.m1a_1);\n    if (!(m === 0)) {\n      return m;\n    }\n    var s = compareTo(this.n1a_1, other.n1a_1);\n    if (!(s === 0)) {\n      return s;\n    }\n    return compareTo(this.o1a_1, other.o1a_1);\n  };\n  protoOf(LocalTime).d = function (other) {\n    return this.h1k(other instanceof LocalTime ? other : THROW_CCE());\n  };\n  protoOf(LocalTime).hashCode = function () {\n    var nod = this.k1k();\n    return convertToInt(bitwiseXor(nod, shiftRightUnsigned(nod, 32)));\n  };\n  protoOf(LocalTime).j1k = function () {\n    var total = imul(this.l1a_1, 3600);\n    total = total + imul(this.m1a_1, 60) | 0;\n    total = total + this.n1a_1 | 0;\n    return total;\n  };\n  protoOf(LocalTime).k1k = function () {\n    var tmp0 = fromInt(this.l1a_1);\n    // Inline function 'kotlin.Long.times' call\n    var other = 1000000000;\n    // Inline function 'kotlin.Long.times' call\n    var this_0 = multiply(tmp0, fromInt(other));\n    var total = multiply(this_0, fromInt(3600));\n    var tmp = total;\n    var tmp0_0 = fromInt(this.m1a_1);\n    // Inline function 'kotlin.Long.times' call\n    var other_0 = 1000000000;\n    // Inline function 'kotlin.Long.times' call\n    var this_1 = multiply(tmp0_0, fromInt(other_0));\n    var tmp$ret$3 = multiply(this_1, fromInt(60));\n    total = add(tmp, tmp$ret$3);\n    var tmp_0 = total;\n    var tmp0_1 = fromInt(this.n1a_1);\n    // Inline function 'kotlin.Long.times' call\n    var other_1 = 1000000000;\n    var tmp$ret$4 = multiply(tmp0_1, fromInt(other_1));\n    total = add(tmp_0, tmp$ret$4);\n    total = add(total, fromInt(this.o1a_1));\n    return total;\n  };\n  protoOf(LocalTime).toString = function () {\n    return format_1(this, get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS());\n  };\n  protoOf(LocalTime).equals = function (other) {\n    var tmp;\n    if (other instanceof LocalTime) {\n      tmp = this.h1k(other) === 0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  function ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda() {\n    _init_properties_LocalTime_kt__nmhi56();\n    var tmp = Companion_instance_8;\n    return tmp.p1a(ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda);\n  }\n  function ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda($this$build) {\n    _init_properties_LocalTime_kt__nmhi56();\n    $this$build.p16();\n    char($this$build, _Char___init__impl__6a9atx(58));\n    $this$build.r16();\n    optional($this$build, VOID, ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda($this$optional) {\n    _init_properties_LocalTime_kt__nmhi56();\n    char($this$optional, _Char___init__impl__6a9atx(58));\n    $this$optional.t16();\n    optional($this$optional, VOID, ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda$lambda);\n    return Unit_instance;\n  }\n  function ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda$lambda$lambda$lambda($this$optional) {\n    _init_properties_LocalTime_kt__nmhi56();\n    char($this$optional, _Char___init__impl__6a9atx(46));\n    secondFractionInternal($this$optional, 1, 9, Companion_getInstance_9().q1b_1);\n    return Unit_instance;\n  }\n  function _get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS_$ref_fmwpvv() {\n    return function () {\n      return get_ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS();\n    };\n  }\n  var properties_initialized_LocalTime_kt_bt8uiw;\n  function _init_properties_LocalTime_kt__nmhi56() {\n    if (!properties_initialized_LocalTime_kt_bt8uiw) {\n      properties_initialized_LocalTime_kt_bt8uiw = true;\n      ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate = lazy(ISO_TIME_OPTIONAL_SECONDS_TRAILING_ZEROS$delegate$lambda);\n    }\n  }\n  function firstDayOfYear(_this__u8e3s4, leapYear) {\n    var leap = leapYear ? 1 : 0;\n    var tmp;\n    switch (_this__u8e3s4.a2_1) {\n      case 0:\n        tmp = 1;\n        break;\n      case 1:\n        tmp = 32;\n        break;\n      case 2:\n        tmp = 60 + leap | 0;\n        break;\n      case 3:\n        tmp = 91 + leap | 0;\n        break;\n      case 4:\n        tmp = 121 + leap | 0;\n        break;\n      case 5:\n        tmp = 152 + leap | 0;\n        break;\n      case 6:\n        tmp = 182 + leap | 0;\n        break;\n      case 7:\n        tmp = 213 + leap | 0;\n        break;\n      case 8:\n        tmp = 244 + leap | 0;\n        break;\n      case 9:\n        tmp = 274 + leap | 0;\n        break;\n      case 10:\n        tmp = 305 + leap | 0;\n        break;\n      case 11:\n        tmp = 335 + leap | 0;\n        break;\n      default:\n        noWhenBranchMatchedException();\n        break;\n    }\n    return tmp;\n  }\n  function get_lenientOffsetFormat() {\n    _init_properties_TimeZone_kt__dwyks9();\n    return lenientOffsetFormat;\n  }\n  var lenientOffsetFormat;\n  function toLocalDateTime(_this__u8e3s4, offset) {\n    _init_properties_TimeZone_kt__dwyks9();\n    var tmp;\n    try {\n      tmp = toLocalDateTimeImpl(_this__u8e3s4, offset);\n    } catch ($p) {\n      var tmp_0;\n      if ($p instanceof IllegalArgumentException) {\n        var e = $p;\n        throw DateTimeArithmeticException_init_$Create$_0('Instant ' + _this__u8e3s4.toString() + ' is not representable as LocalDateTime', e);\n      } else {\n        throw $p;\n      }\n    }\n    return tmp;\n  }\n  function toLocalDateTimeImpl(_this__u8e3s4, offset) {\n    _init_properties_TimeZone_kt__dwyks9();\n    var tmp0 = _this__u8e3s4.uf_1;\n    // Inline function 'kotlin.Long.plus' call\n    var other = offset.p1c_1;\n    var localSecond = add(tmp0, fromInt(other));\n    // Inline function 'kotlin.floorDiv' call\n    var other_0 = new Long(86400, 0);\n    var q = divide(localSecond, other_0);\n    if (compare(bitwiseXor(localSecond, other_0), new Long(0, 0)) < 0 && !equalsLong(multiply(q, other_0), localSecond)) {\n      var _unary__edvuaz = q;\n      q = subtract(_unary__edvuaz, get_ONE());\n    }\n    var localEpochDay = q;\n    // Inline function 'kotlin.mod' call\n    var other_1 = new Long(86400, 0);\n    var r = modulo(localSecond, other_1);\n    var tmp$ret$2 = add(r, bitwiseAnd(other_1, shiftRight(bitwiseAnd(bitwiseXor(r, other_1), bitwiseOr(r, negate(r))), 63)));\n    var secsOfDay = convertToInt(tmp$ret$2);\n    var date = Companion_getInstance_14().a1k(localEpochDay);\n    var time = Companion_getInstance_16().n1k(secsOfDay, _this__u8e3s4.vf_1);\n    return new LocalDateTime(date, time);\n  }\n  function toInstant(_this__u8e3s4, offset, youShallNotPass) {\n    youShallNotPass = youShallNotPass === VOID ? Companion_getInstance_5().v15_1 : youShallNotPass;\n    _init_properties_TimeZone_kt__dwyks9();\n    return Companion_getInstance().pf(_this__u8e3s4.i1k(offset), _this__u8e3s4.z19());\n  }\n  function FixedOffsetTimeZone_init_$Init$(offset, $this) {\n    FixedOffsetTimeZone.call($this, offset, offset.toString());\n    return $this;\n  }\n  function FixedOffsetTimeZone_init_$Create$(offset) {\n    return FixedOffsetTimeZone_init_$Init$(offset, objectCreate(protoOf(FixedOffsetTimeZone)));\n  }\n  function Companion_16() {\n  }\n  var Companion_instance_17;\n  function Companion_getInstance_17() {\n    return Companion_instance_17;\n  }\n  function FixedOffsetTimeZone(offset, id) {\n    TimeZone.call(this);\n    this.o1k_1 = offset;\n    this.p1k_1 = id;\n  }\n  protoOf(FixedOffsetTimeZone).u1j = function () {\n    return this.p1k_1;\n  };\n  protoOf(FixedOffsetTimeZone).v1j = function (instant) {\n    return this.o1k_1;\n  };\n  protoOf(FixedOffsetTimeZone).w1j = function (instant) {\n    return toLocalDateTime(instant, this.o1k_1);\n  };\n  function Companion_17() {\n    Companion_instance_18 = this;\n    this.p1j_1 = new FixedOffsetTimeZone(Companion_getInstance_19().m1j_1, 'UTC');\n  }\n  protoOf(Companion_17).q1k = function () {\n    var _destruct__k2r9zo = currentSystemDefaultZone();\n    var name = _destruct__k2r9zo.mc();\n    var zone = _destruct__k2r9zo.nc();\n    return zone == null ? this.q1j(name) : zone;\n  };\n  protoOf(Companion_17).q1j = function (zoneId) {\n    if (zoneId === 'UTC') {\n      return this.p1j_1;\n    }\n    if (zoneId === 'Z' || zoneId === 'z') {\n      return asTimeZone(Companion_getInstance_19().m1j_1);\n    }\n    if (zoneId === 'SYSTEM') {\n      return this.q1k();\n    }\n    if (zoneId.length === 1) {\n      throw IllegalTimeZoneException_init_$Create$_0('Invalid zone ID: ' + zoneId);\n    }\n    try {\n      if (startsWith_0(zoneId, '+') || startsWith_0(zoneId, '-')) {\n        return asTimeZone(get_lenientOffsetFormat().sf(zoneId));\n      }\n      switch (zoneId) {\n        case 'UTC':\n        case 'GMT':\n        case 'UT':\n          return new FixedOffsetTimeZone(Companion_getInstance_19().m1j_1, zoneId);\n      }\n      if (startsWith_0(zoneId, 'UTC+') || startsWith_0(zoneId, 'GMT+') || startsWith_0(zoneId, 'UTC-') || startsWith_0(zoneId, 'GMT-')) {\n        var prefix = take_0(zoneId, 3);\n        var offset = get_lenientOffsetFormat().sf(substring_0(zoneId, 3));\n        return offset.p1c_1 === 0 ? new FixedOffsetTimeZone(offset, prefix) : new FixedOffsetTimeZone(offset, prefix + offset.toString());\n      }\n      if (startsWith_0(zoneId, 'UT+') || startsWith_0(zoneId, 'UT-')) {\n        var offset_0 = get_lenientOffsetFormat().sf(substring_0(zoneId, 2));\n        return offset_0.p1c_1 === 0 ? new FixedOffsetTimeZone(offset_0, 'UT') : new FixedOffsetTimeZone(offset_0, 'UT' + offset_0.toString());\n      }\n    } catch ($p) {\n      if ($p instanceof DateTimeFormatException) {\n        var e = $p;\n        throw IllegalTimeZoneException_init_$Create$_1(e);\n      } else {\n        throw $p;\n      }\n    }\n    var tmp;\n    try {\n      tmp = timeZoneById(zoneId);\n    } catch ($p) {\n      var tmp_0;\n      if ($p instanceof Exception) {\n        var e_0 = $p;\n        throw IllegalTimeZoneException_init_$Create$_2('Invalid zone ID: ' + zoneId, e_0);\n      } else {\n        throw $p;\n      }\n    }\n    return tmp;\n  };\n  var Companion_instance_18;\n  function Companion_getInstance_18() {\n    if (Companion_instance_18 == null)\n      new Companion_17();\n    return Companion_instance_18;\n  }\n  function TimeZone() {\n    Companion_getInstance_18();\n  }\n  protoOf(TimeZone).u1j = function () {\n    var message = 'Should be overridden';\n    throw IllegalStateException_init_$Create$(toString(message));\n  };\n  protoOf(TimeZone).v1j = function (instant) {\n    var message = 'Should be overridden';\n    throw IllegalStateException_init_$Create$(toString(message));\n  };\n  protoOf(TimeZone).w1j = function (instant) {\n    var tmp;\n    try {\n      tmp = toLocalDateTimeImpl(instant, this.v1j(instant));\n    } catch ($p) {\n      var tmp_0;\n      if ($p instanceof IllegalArgumentException) {\n        var e = $p;\n        throw DateTimeArithmeticException_init_$Create$_0('Instant ' + instant.toString() + ' is not representable as LocalDateTime.', e);\n      } else {\n        throw $p;\n      }\n    }\n    return tmp;\n  };\n  protoOf(TimeZone).equals = function (other) {\n    var tmp;\n    if (this === other) {\n      tmp = true;\n    } else {\n      var tmp_0;\n      if (other instanceof TimeZone) {\n        tmp_0 = this.u1j() === other.u1j();\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    }\n    return tmp;\n  };\n  protoOf(TimeZone).hashCode = function () {\n    return getStringHashCode(this.u1j());\n  };\n  protoOf(TimeZone).toString = function () {\n    return this.u1j();\n  };\n  function toLocalDateTime_0(_this__u8e3s4, timeZone) {\n    _init_properties_TimeZone_kt__dwyks9();\n    return timeZone.w1j(_this__u8e3s4);\n  }\n  function lenientOffsetFormat$lambda($this$build) {\n    _init_properties_TimeZone_kt__dwyks9();\n    var tmp = lenientOffsetFormat$lambda$lambda;\n    var tmp_0 = [tmp, lenientOffsetFormat$lambda$lambda_0];\n    alternativeParsing($this$build, tmp_0, lenientOffsetFormat$lambda$lambda_1);\n    return Unit_instance;\n  }\n  function lenientOffsetFormat$lambda$lambda($this$alternativeParsing) {\n    _init_properties_TimeZone_kt__dwyks9();\n    $this$alternativeParsing.w16(Padding_NONE_getInstance());\n    return Unit_instance;\n  }\n  function lenientOffsetFormat$lambda$lambda_0($this$alternativeParsing) {\n    _init_properties_TimeZone_kt__dwyks9();\n    isoOffset($this$alternativeParsing, false, false, WhenToOutput_IF_NONZERO_getInstance(), WhenToOutput_IF_NONZERO_getInstance());\n    return Unit_instance;\n  }\n  function lenientOffsetFormat$lambda$lambda_1($this$alternativeParsing) {\n    _init_properties_TimeZone_kt__dwyks9();\n    isoOffset($this$alternativeParsing, true, true, WhenToOutput_ALWAYS_getInstance(), WhenToOutput_IF_NONZERO_getInstance());\n    return Unit_instance;\n  }\n  var properties_initialized_TimeZone_kt_fgsidh;\n  function _init_properties_TimeZone_kt__dwyks9() {\n    if (!properties_initialized_TimeZone_kt_fgsidh) {\n      properties_initialized_TimeZone_kt_fgsidh = true;\n      var tmp = Companion_instance_10;\n      lenientOffsetFormat = tmp.z1c(lenientOffsetFormat$lambda);\n    }\n  }\n  function get_utcOffsetCache() {\n    _init_properties_UtcOffset_kt__93zod7();\n    return utcOffsetCache;\n  }\n  var utcOffsetCache;\n  function validateTotal($this, totalSeconds) {\n    if (!(-64800 <= totalSeconds ? totalSeconds <= 64800 : false)) {\n      throw IllegalArgumentException_init_$Create$('Total seconds value is out of range: ' + totalSeconds);\n    }\n  }\n  function validate($this, hours, minutes, seconds) {\n    if (hours < -18 || hours > 18) {\n      throw IllegalArgumentException_init_$Create$('Zone offset hours not in valid range: value ' + hours + ' is not in the range -18 to 18');\n    }\n    if (hours > 0) {\n      if (minutes < 0 || seconds < 0) {\n        throw IllegalArgumentException_init_$Create$('Zone offset minutes and seconds must be positive because hours is positive');\n      }\n    } else if (hours < 0) {\n      if (minutes > 0 || seconds > 0) {\n        throw IllegalArgumentException_init_$Create$('Zone offset minutes and seconds must be negative because hours is negative');\n      }\n    } else if (minutes > 0 && seconds < 0 || (minutes < 0 && seconds > 0)) {\n      throw IllegalArgumentException_init_$Create$('Zone offset minutes and seconds must have the same sign');\n    }\n    if (abs(minutes) > 59) {\n      throw IllegalArgumentException_init_$Create$('Zone offset minutes not in valid range: abs(value) ' + abs(minutes) + ' is not in the range 0 to 59');\n    }\n    if (abs(seconds) > 59) {\n      throw IllegalArgumentException_init_$Create$('Zone offset seconds not in valid range: abs(value) ' + abs(seconds) + ' is not in the range 0 to 59');\n    }\n    if (abs(hours) === 18 && (abs(minutes) > 0 || abs(seconds) > 0)) {\n      throw IllegalArgumentException_init_$Create$('Utc offset not in valid range: -18:00 to +18:00');\n    }\n  }\n  function Companion_18() {\n    Companion_instance_19 = this;\n    this.m1j_1 = new UtcOffset(0);\n  }\n  protoOf(Companion_18).r1k = function (input, format) {\n    return format.sf(input);\n  };\n  protoOf(Companion_18).n1j = function (input, format, $super) {\n    format = format === VOID ? getIsoUtcOffsetFormat() : format;\n    return $super === VOID ? this.r1k(input, format) : $super.r1k.call(this, input, format);\n  };\n  protoOf(Companion_18).s1k = function (hours, minutes, seconds) {\n    validate(this, hours, minutes, seconds);\n    return hours === 0 && minutes === 0 && seconds === 0 ? this.m1j_1 : this.t1k((imul(hours, 3600) + imul(minutes, 60) | 0) + seconds | 0);\n  };\n  protoOf(Companion_18).t1k = function (seconds) {\n    validateTotal(this, seconds);\n    var tmp;\n    if ((seconds % 900 | 0) === 0) {\n      var tmp0_elvis_lhs = get_utcOffsetCache().s1(seconds);\n      var tmp_0;\n      if (tmp0_elvis_lhs == null) {\n        // Inline function 'kotlin.also' call\n        var this_0 = new UtcOffset(seconds);\n        // Inline function 'kotlin.collections.set' call\n        get_utcOffsetCache().w1(seconds, this_0);\n        tmp_0 = this_0;\n      } else {\n        tmp_0 = tmp0_elvis_lhs;\n      }\n      tmp = tmp_0;\n    } else {\n      tmp = new UtcOffset(seconds);\n    }\n    return tmp;\n  };\n  var Companion_instance_19;\n  function Companion_getInstance_19() {\n    if (Companion_instance_19 == null)\n      new Companion_18();\n    return Companion_instance_19;\n  }\n  function Formats_2() {\n  }\n  protoOf(Formats_2).s15 = function () {\n    return get_ISO_OFFSET();\n  };\n  var Formats_instance_2;\n  function Formats_getInstance_2() {\n    return Formats_instance_2;\n  }\n  function UtcOffset(totalSeconds) {\n    Companion_getInstance_19();\n    this.p1c_1 = totalSeconds;\n  }\n  protoOf(UtcOffset).hashCode = function () {\n    return this.p1c_1;\n  };\n  protoOf(UtcOffset).equals = function (other) {\n    var tmp;\n    if (other instanceof UtcOffset) {\n      tmp = this.p1c_1 === other.p1c_1;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(UtcOffset).toString = function () {\n    return format_2(this, Formats_instance_2.s15());\n  };\n  function UtcOffset_0(hours, minutes, seconds) {\n    hours = hours === VOID ? null : hours;\n    minutes = minutes === VOID ? null : minutes;\n    seconds = seconds === VOID ? null : seconds;\n    _init_properties_UtcOffset_kt__93zod7();\n    var tmp;\n    if (!(hours == null)) {\n      var tmp_0 = Companion_getInstance_19();\n      var tmp_1 = minutes == null ? 0 : minutes;\n      tmp = tmp_0.s1k(hours, tmp_1, seconds == null ? 0 : seconds);\n    } else if (!(minutes == null)) {\n      var tmp_2 = Companion_getInstance_19();\n      var tmp_3 = minutes / 60 | 0;\n      var tmp_4 = minutes % 60 | 0;\n      tmp = tmp_2.s1k(tmp_3, tmp_4, seconds == null ? 0 : seconds);\n    } else {\n      var tmp_5 = Companion_getInstance_19();\n      tmp = tmp_5.t1k(seconds == null ? 0 : seconds);\n    }\n    return tmp;\n  }\n  var properties_initialized_UtcOffset_kt_4gxffr;\n  function _init_properties_UtcOffset_kt__93zod7() {\n    if (!properties_initialized_UtcOffset_kt_4gxffr) {\n      properties_initialized_UtcOffset_kt_4gxffr = true;\n      // Inline function 'kotlin.collections.mutableMapOf' call\n      utcOffsetCache = LinkedHashMap_init_$Create$();\n    }\n  }\n  function Companion_19() {\n  }\n  protoOf(Companion_19).u1k = function (input, format) {\n    return format.sf(input);\n  };\n  protoOf(Companion_19).t1j = function (input, format, $super) {\n    format = format === VOID ? Formats_instance_3.s15() : format;\n    return $super === VOID ? this.u1k(input, format) : $super.u1k.call(this, input, format);\n  };\n  var Companion_instance_20;\n  function Companion_getInstance_20() {\n    return Companion_instance_20;\n  }\n  function Formats_3() {\n  }\n  protoOf(Formats_3).s15 = function () {\n    return get_ISO_YEAR_MONTH();\n  };\n  var Formats_instance_3;\n  function Formats_getInstance_3() {\n    return Formats_instance_3;\n  }\n  function YearMonth$_get_year_$ref_chp4n6() {\n    return function (p0) {\n      return p0.v1d_1;\n    };\n  }\n  function YearMonth$_get_month_$ref_9rphhd() {\n    return function (p0) {\n      return p0.a18();\n    };\n  }\n  function YearMonth(year, month) {\n    this.v1d_1 = year;\n    this.w1d_1 = month;\n    // Inline function 'kotlin.require' call\n    if (!(1 <= month ? month <= 12 : false)) {\n      var message = 'Month must be in 1..12, but was ' + month;\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var containsLower = Companion_getInstance_14().y1i_1.x17_1;\n    var containsUpper = Companion_getInstance_14().z1i_1.x17_1;\n    var containsArg = this.v1d_1;\n    // Inline function 'kotlin.require' call\n    if (!(containsLower <= containsArg ? containsArg <= containsUpper : false)) {\n      var message_0 = 'Year ' + this.v1d_1 + ' is out of range: ' + Companion_getInstance_14().y1i_1.x17_1 + '..' + Companion_getInstance_14().z1i_1.x17_1;\n      throw IllegalArgumentException_init_$Create$(toString(message_0));\n    }\n  }\n  protoOf(YearMonth).a18 = function () {\n    return Month_0(this.w1d_1);\n  };\n  protoOf(YearMonth).v1k = function (other) {\n    var tmp = KProperty1;\n    var tmp_0 = getPropertyCallableRef('year', 1, tmp, YearMonth$_get_year_$ref_chp4n6(), null);\n    var tmp_1 = KProperty1;\n    return compareValuesBy(this, other, [tmp_0, getPropertyCallableRef('month', 1, tmp_1, YearMonth$_get_month_$ref_9rphhd(), null)]);\n  };\n  protoOf(YearMonth).d = function (other) {\n    return this.v1k(other instanceof YearMonth ? other : THROW_CCE());\n  };\n  protoOf(YearMonth).toString = function () {\n    return Formats_instance_3.s15().t15(this);\n  };\n  protoOf(YearMonth).equals = function (other) {\n    var tmp;\n    var tmp_0;\n    if (other instanceof YearMonth) {\n      tmp_0 = this.v1d_1 === other.v1d_1;\n    } else {\n      tmp_0 = false;\n    }\n    if (tmp_0) {\n      tmp = this.a18().equals(other.a18());\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(YearMonth).hashCode = function () {\n    return imul(this.v1d_1, 31) + this.a18().hashCode() | 0;\n  };\n  function WallClockOffset() {\n  }\n  function FixedOffset() {\n  }\n  function RegionTimeZone(tzid, id) {\n    TimeZone.call(this);\n    this.w1k_1 = tzid;\n    this.x1k_1 = id;\n  }\n  protoOf(RegionTimeZone).u1j = function () {\n    return this.x1k_1;\n  };\n  protoOf(RegionTimeZone).v1j = function (instant) {\n    return this.w1k_1.y1k(instant);\n  };\n  function TimeZoneRulesCommon(transitionEpochSeconds, offsets, recurringZoneRules) {\n    this.z1k_1 = transitionEpochSeconds;\n    this.a1l_1 = offsets;\n    this.b1l_1 = recurringZoneRules;\n    // Inline function 'kotlin.require' call\n    if (!(this.a1l_1.q() === (this.z1k_1.q() + 1 | 0))) {\n      var message = 'offsets.size must be one more than transitionEpochSeconds.size';\n      throw IllegalArgumentException_init_$Create$(toString(message));\n    }\n    var tmp = this;\n    // Inline function 'kotlin.collections.buildList' call\n    // Inline function 'kotlin.collections.buildListInternal' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = ArrayList_init_$Create$_0();\n    var inductionVariable = 0;\n    var last = this.z1k_1.q() - 1 | 0;\n    if (inductionVariable <= last)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        var instant = Companion_getInstance().rf(this.z1k_1.p(i));\n        var ldtBefore = toLocalDateTime(instant, this.a1l_1.p(i));\n        var ldtAfter = toLocalDateTime(instant, this.a1l_1.p(i + 1 | 0));\n        if (ldtBefore.g1k(ldtAfter) < 0) {\n          this_0.j(ldtBefore);\n          this_0.j(ldtAfter);\n        } else {\n          this_0.j(ldtAfter);\n          this_0.j(ldtBefore);\n        }\n      }\n       while (inductionVariable <= last);\n    tmp.c1l_1 = this_0.c4();\n  }\n  protoOf(TimeZoneRulesCommon).y1k = function (instant) {\n    var epochSeconds = instant.uf_1;\n    var tmp;\n    if (!(this.b1l_1 == null)) {\n      var tmp0_safe_receiver = lastOrNull(this.z1k_1);\n      var tmp_0;\n      if (tmp0_safe_receiver == null) {\n        tmp_0 = null;\n      } else {\n        // Inline function 'kotlin.let' call\n        tmp_0 = compare(epochSeconds, tmp0_safe_receiver) >= 0;\n      }\n      tmp = !(tmp_0 === false);\n    } else {\n      tmp = false;\n    }\n    if (tmp) {\n      return this.b1l_1.e1l(instant, last(this.a1l_1));\n    }\n    // Inline function 'kotlin.let' call\n    // Inline function 'kotlin.math.absoluteValue' call\n    var this_0 = binarySearch(this.z1k_1, epochSeconds) + 1 | 0;\n    var index = abs(this_0);\n    return this.a1l_1.p(index);\n  };\n  protoOf(TimeZoneRulesCommon).toString = function () {\n    // Inline function 'kotlin.text.buildString' call\n    // Inline function 'kotlin.apply' call\n    var this_0 = StringBuilder_init_$Create$();\n    var inductionVariable = 0;\n    var last_0 = this.z1k_1.q() - 1 | 0;\n    if (inductionVariable <= last_0)\n      do {\n        var i = inductionVariable;\n        inductionVariable = inductionVariable + 1 | 0;\n        this_0.v6(this.a1l_1.p(i));\n        this_0.w6(' until ');\n        this_0.v6(Companion_getInstance().rf(this.z1k_1.p(i)));\n        this_0.w6(', ');\n      }\n       while (inductionVariable <= last_0);\n    this_0.w6('then ');\n    this_0.v6(last(this.a1l_1));\n    if (!(this.b1l_1 == null)) {\n      this_0.w6(', after that ');\n      this_0.v6(this.b1l_1);\n    }\n    return this_0.toString();\n  };\n  function Rule(transitionDateTime, offsetBefore, offsetAfter) {\n    this.f1l_1 = transitionDateTime;\n    this.g1l_1 = offsetBefore;\n    this.h1l_1 = offsetAfter;\n  }\n  protoOf(Rule).toString = function () {\n    return 'transitioning from ' + this.g1l_1.toString() + ' to ' + this.h1l_1.toString() + ' on ' + toString_1(this.f1l_1);\n  };\n  function sam$kotlin_Comparator$0_0(function_0) {\n    this.i1l_1 = function_0;\n  }\n  protoOf(sam$kotlin_Comparator$0_0).sa = function (a, b) {\n    return this.i1l_1(a, b);\n  };\n  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {\n    return this.sa(a, b);\n  };\n  protoOf(sam$kotlin_Comparator$0_0).j2 = function () {\n    return this.i1l_1;\n  };\n  protoOf(sam$kotlin_Comparator$0_0).equals = function (other) {\n    var tmp;\n    if (!(other == null) ? isInterface(other, Comparator) : false) {\n      var tmp_0;\n      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {\n        tmp_0 = equals(this.j2(), other.j2());\n      } else {\n        tmp_0 = false;\n      }\n      tmp = tmp_0;\n    } else {\n      tmp = false;\n    }\n    return tmp;\n  };\n  protoOf(sam$kotlin_Comparator$0_0).hashCode = function () {\n    return hashCode(this.j2());\n  };\n  function RecurringZoneRules$rulesForYear$lambda(a, b) {\n    // Inline function 'kotlin.comparisons.compareValuesBy' call\n    var tmp = a.f1l_1;\n    var tmp$ret$1 = b.f1l_1;\n    return compareValues(tmp, tmp$ret$1);\n  }\n  function safeAdd(a, b) {\n    var sum = add(a, b);\n    if (compare(bitwiseXor(a, sum), new Long(0, 0)) < 0 && compare(bitwiseXor(a, b), new Long(0, 0)) >= 0) {\n      throw ArithmeticException_init_$Create$('Addition overflows a long: ' + a.toString() + ' + ' + b.toString());\n    }\n    return sum;\n  }\n  function safeMultiply(a, b) {\n    if (equalsLong(b, new Long(1, 0))) {\n      return a;\n    }\n    if (equalsLong(a, new Long(1, 0))) {\n      return b;\n    }\n    if (equalsLong(a, new Long(0, 0)) || equalsLong(b, new Long(0, 0))) {\n      return new Long(0, 0);\n    }\n    var total = multiply(a, b);\n    if (!equalsLong(divide(total, b), a) || (equalsLong(a, new Long(0, -2147483648)) && equalsLong(b, new Long(-1, -1))) || (equalsLong(b, new Long(0, -2147483648)) && equalsLong(a, new Long(-1, -1)))) {\n      throw ArithmeticException_init_$Create$('Multiplication overflows a long: ' + a.toString() + ' * ' + b.toString());\n    }\n    return total;\n  }\n  function safeMultiply_0(a, b) {\n    var total = multiply(fromInt(a), fromInt(b));\n    if (compare(total, new Long(-2147483648, -1)) < 0 || compare(total, new Long(2147483647, 0)) > 0) {\n      throw ArithmeticException_init_$Create$('Multiplication overflows an int: ' + a + ' * ' + b);\n    }\n    return convertToInt(total);\n  }\n  function readTzdb() {\n    var tmp;\n    try {\n      // Inline function 'kotlin.js.asDynamic' call\n      var tzdbData = ZoneRulesProvider.getTzdbData();\n      // Inline function 'kotlin.js.unsafeCast' call\n      var tmp$ret$1 = tzdbData.zones;\n      var tmp_0 = toList(tmp$ret$1);\n      // Inline function 'kotlin.js.unsafeCast' call\n      var tmp$ret$2 = tzdbData.links;\n      tmp = to(tmp_0, toList(tmp$ret$2));\n    } catch ($p) {\n      var tmp_1;\n      if ($p instanceof Error) {\n        var _unused_var__etf5q3 = $p;\n        tmp_1 = null;\n      } else {\n        throw $p;\n      }\n      tmp = tmp_1;\n    }\n    return tmp;\n  }\n  //region block: post-declaration\n  protoOf(Builder).d17 = appendAlternativeParsingImpl;\n  protoOf(Builder).c17 = appendOptionalImpl;\n  protoOf(Builder).k16 = chars;\n  protoOf(Builder).h17 = build;\n  protoOf(Builder).l18 = addFormatStructureForYearMonth;\n  protoOf(Builder).l16 = day;\n  protoOf(Builder).m16 = day$default;\n  protoOf(Builder).n16 = date;\n  protoOf(Builder).g16 = year;\n  protoOf(Builder).h16 = year$default;\n  protoOf(Builder).i16 = monthNumber;\n  protoOf(Builder).j16 = monthNumber$default;\n  protoOf(Builder_0).d17 = appendAlternativeParsingImpl;\n  protoOf(Builder_0).c17 = appendOptionalImpl;\n  protoOf(Builder_0).k16 = chars;\n  protoOf(Builder_0).h17 = build;\n  protoOf(Builder_0).k18 = addFormatStructureForDate;\n  protoOf(Builder_0).k17 = addFormatStructureForTime;\n  protoOf(Builder_0).l18 = addFormatStructureForYearMonth;\n  protoOf(Builder_0).l16 = day;\n  protoOf(Builder_0).m16 = day$default;\n  protoOf(Builder_0).n16 = date;\n  protoOf(Builder_0).g16 = year;\n  protoOf(Builder_0).h16 = year$default;\n  protoOf(Builder_0).i16 = monthNumber;\n  protoOf(Builder_0).j16 = monthNumber$default;\n  protoOf(Builder_0).o16 = hour;\n  protoOf(Builder_0).p16 = hour$default;\n  protoOf(Builder_0).q16 = minute;\n  protoOf(Builder_0).r16 = minute$default;\n  protoOf(Builder_0).s16 = second;\n  protoOf(Builder_0).t16 = second$default;\n  protoOf(Builder_0).u16 = secondFraction;\n  protoOf(Builder_0).v16 = time;\n  protoOf(IncompleteLocalTime).g1a = set_fractionOfSecond;\n  protoOf(IncompleteLocalTime).h1a = get_fractionOfSecond;\n  protoOf(Builder_1).d17 = appendAlternativeParsingImpl;\n  protoOf(Builder_1).c17 = appendOptionalImpl;\n  protoOf(Builder_1).k16 = chars;\n  protoOf(Builder_1).h17 = build;\n  protoOf(Builder_1).o16 = hour;\n  protoOf(Builder_1).p16 = hour$default;\n  protoOf(Builder_1).q16 = minute;\n  protoOf(Builder_1).r16 = minute$default;\n  protoOf(Builder_1).s16 = second;\n  protoOf(Builder_1).t16 = second$default;\n  protoOf(Builder_1).u16 = secondFraction;\n  protoOf(Builder_1).v16 = time;\n  protoOf(Builder_2).d17 = appendAlternativeParsingImpl;\n  protoOf(Builder_2).c17 = appendOptionalImpl;\n  protoOf(Builder_2).k16 = chars;\n  protoOf(Builder_2).h17 = build;\n  protoOf(Builder_2).w16 = offsetHours;\n  protoOf(Builder_2).x16 = offsetHours$default;\n  protoOf(Builder_2).y16 = offsetMinutesOfHour;\n  protoOf(Builder_2).z16 = offsetMinutesOfHour$default;\n  protoOf(Builder_2).a17 = offsetSecondsOfMinute;\n  protoOf(Builder_2).b17 = offsetSecondsOfMinute$default;\n  protoOf(Builder_3).d17 = appendAlternativeParsingImpl;\n  protoOf(Builder_3).c17 = appendOptionalImpl;\n  protoOf(Builder_3).k16 = chars;\n  protoOf(Builder_3).h17 = build;\n  protoOf(Builder_3).g16 = year;\n  protoOf(Builder_3).h16 = year$default;\n  protoOf(Builder_3).i16 = monthNumber;\n  protoOf(Builder_3).j16 = monthNumber$default;\n  protoOf(PropertyAccessor).v1e = getterNotNull;\n  protoOf(SpacePaddedFormatter).e16 = format$default;\n  protoOf(SignedFormatter).e16 = format$default;\n  protoOf(ConditionalFormatter).e16 = format$default;\n  protoOf(ConcatenatedFormatter).e16 = format$default;\n  protoOf(UnsignedIntFormatterStructure).e16 = format$default;\n  protoOf(DecimalFractionFormatterStructure).e16 = format$default;\n  protoOf(SignedIntFormatterStructure).e16 = format$default;\n  protoOf(ConstantStringFormatterStructure).e16 = format$default;\n  //endregion\n  //region block: init\n  Companion_instance_0 = new Companion();\n  Companion_instance_1 = new Companion_0();\n  Companion_instance_2 = new Companion_1();\n  Companion_instance_3 = new Companion_2();\n  Companion_instance_6 = new Companion_5();\n  Companion_instance_7 = new Companion_6();\n  Companion_instance_8 = new Companion_7();\n  Companion_instance_10 = new Companion_9();\n  Companion_instance_11 = new Companion_10();\n  Companion_instance_12 = new Companion_11();\n  Truth_instance = new Truth();\n  ExpectedInt_instance = new ExpectedInt();\n  Companion_instance_13 = new Companion_12();\n  Formats_instance_1 = new Formats_1();\n  Companion_instance_17 = new Companion_16();\n  Formats_instance_2 = new Formats_2();\n  Companion_instance_20 = new Companion_19();\n  Formats_instance_3 = new Formats_3();\n  //endregion\n  //region block: exports\n  _.$_$ = _.$_$ || {};\n  _.$_$.a = LocalDateSerializer_getInstance;\n  _.$_$.b = Formats_getInstance;\n  _.$_$.c = Companion_getInstance_18;\n  _.$_$.d = format;\n  _.$_$.e = todayIn;\n  //endregion\n  return _;\n}));\n\n"}}]);