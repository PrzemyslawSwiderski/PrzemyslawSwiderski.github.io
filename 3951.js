"use strict";(globalThis.webpackChunkpswidersk_page=globalThis.webpackChunkpswidersk_page||[]).push([[3951],{3951:n=>{n.exports="(function (factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', './kotlin-kotlin-stdlib.js'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));\n  else {\n    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlinx-atomicfu'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'kotlinx-atomicfu'.\");\n    }\n    globalThis['kotlinx-atomicfu'] = factory(typeof globalThis['kotlinx-atomicfu'] === 'undefined' ? {} : globalThis['kotlinx-atomicfu'], globalThis['kotlin-kotlin-stdlib']);\n  }\n}(function (_, kotlin_kotlin) {\n  'use strict';\n  //region block: imports\n  var protoOf = kotlin_kotlin.$_$.r9;\n  var initMetadataForObject = kotlin_kotlin.$_$.y8;\n  var VOID = kotlin_kotlin.$_$.b;\n  var initMetadataForClass = kotlin_kotlin.$_$.t8;\n  var toString = kotlin_kotlin.$_$.ad;\n  //endregion\n  //region block: pre-declaration\n  initMetadataForClass(atomicfu$TraceBase, 'TraceBase');\n  initMetadataForObject(None, 'None', VOID, atomicfu$TraceBase);\n  initMetadataForClass(AtomicRef, 'AtomicRef');\n  initMetadataForClass(AtomicBoolean, 'AtomicBoolean');\n  //endregion\n  function None() {\n    None_instance = this;\n    atomicfu$TraceBase.call(this);\n  }\n  var None_instance;\n  function None_getInstance() {\n    if (None_instance == null)\n      new None();\n    return None_instance;\n  }\n  function atomicfu$TraceBase() {\n  }\n  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$1 = function (event) {\n  };\n  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$2 = function (event1, event2) {\n  };\n  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$3 = function (event1, event2, event3) {\n  };\n  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$4 = function (event1, event2, event3, event4) {\n  };\n  function AtomicRef(value) {\n    this.kotlinx$atomicfu$value = value;\n  }\n  protoOf(AtomicRef).j1l = function (_set____db54di) {\n    this.kotlinx$atomicfu$value = _set____db54di;\n  };\n  protoOf(AtomicRef).k1l = function () {\n    return this.kotlinx$atomicfu$value;\n  };\n  protoOf(AtomicRef).atomicfu$compareAndSet = function (expect, update) {\n    if (!(this.kotlinx$atomicfu$value === expect))\n      return false;\n    this.kotlinx$atomicfu$value = update;\n    return true;\n  };\n  protoOf(AtomicRef).atomicfu$getAndSet = function (value) {\n    var oldValue = this.kotlinx$atomicfu$value;\n    this.kotlinx$atomicfu$value = value;\n    return oldValue;\n  };\n  protoOf(AtomicRef).toString = function () {\n    return toString(this.kotlinx$atomicfu$value);\n  };\n  function atomic$ref$1(initial) {\n    return atomic$ref$(initial, None_getInstance());\n  }\n  function AtomicBoolean(value) {\n    this.kotlinx$atomicfu$value = value;\n  }\n  protoOf(AtomicBoolean).l1l = function (_set____db54di) {\n    this.kotlinx$atomicfu$value = _set____db54di;\n  };\n  protoOf(AtomicBoolean).k1l = function () {\n    return this.kotlinx$atomicfu$value;\n  };\n  protoOf(AtomicBoolean).atomicfu$compareAndSet = function (expect, update) {\n    if (!(this.kotlinx$atomicfu$value === expect))\n      return false;\n    this.kotlinx$atomicfu$value = update;\n    return true;\n  };\n  protoOf(AtomicBoolean).atomicfu$getAndSet = function (value) {\n    var oldValue = this.kotlinx$atomicfu$value;\n    this.kotlinx$atomicfu$value = value;\n    return oldValue;\n  };\n  protoOf(AtomicBoolean).toString = function () {\n    return this.kotlinx$atomicfu$value.toString();\n  };\n  function atomic$boolean$1(initial) {\n    return atomic$boolean$(initial, None_getInstance());\n  }\n  function atomic$ref$(initial, trace) {\n    trace = trace === VOID ? None_getInstance() : trace;\n    return new AtomicRef(initial);\n  }\n  function atomic$boolean$(initial, trace) {\n    trace = trace === VOID ? None_getInstance() : trace;\n    return new AtomicBoolean(initial);\n  }\n  //region block: exports\n  _.$_$ = _.$_$ || {};\n  _.$_$.a = atomic$boolean$1;\n  _.$_$.b = atomic$ref$1;\n  //endregion\n  return _;\n}));\n\n"}}]);