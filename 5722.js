"use strict";(this.webpackChunkpswidersk_page=this.webpackChunkpswidersk_page||[]).push([[5722],{5722:e=>{e.exports='<h2>Introduction <a href="/posts/how-it-was-created#intro" class="anchor-link" id="intro">ðŸ”—</a></h2><p>Initially my personal blog page was using the <a href="https://jekyllrb.com/">Jekyll</a> static site generator.\nIt was very well-supported by GitHub at that time (Jan 28, 2016).</p><p>Recently I wanted to refresh it. Unfortunately, some time ago I reinstalled my local system,\nso I do not have Jekyll Gem package installed anymore. Because of my laziness, I decided to create a whole new site\ngeneration engine in Kotlin ðŸ˜….\nOther reason was that I am more familiar with Kotlin than Ruby and wanted to try something new, especially\nsince there was the new <a href="https://kotlinlang.org/docs/whatsnew20.html">2.0 Kotlin</a> version released lately ðŸ˜‰.</p><p>To keep it simple, I wanted the new generation engine to work in a similar way as Jekyll.\nIt is processing the Markdown files and generates HTML code based on those.</p><p>In this post I would like to show some technical details of how it was done.</p><p>The whole project and repository can be found\n<strong><a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/">HERE</a></strong>.</p><h2>Building with Gradle <a href="/posts/how-it-was-created#gradle-build" class="anchor-link" id="gradle-build">ðŸ”—</a></h2><p><a href="https://gradle.org/">Gradle</a> is the build system <a href="https://www.jetbrains.com/lp/devecosystem-2023/java/">widely used</a> in\nmany JVM projects.\nSince it is supporting writing build scripts with the Kotlin DSL and has got out off the box Kotlin plugins\nit was pretty clear to use it for the Kotlin project.</p><p>What I like the most is that only the Java RE is required to run the build.\nIt can be invoked by simply calling:</p><ul><li><p><code>./gradlew build</code> on Unix systems</p></li><li><p>or <code>gradlew.bat build</code> on Windows</p></li></ul><p>in the project directory.</p><p>All Java dependencies, Node.js, and NPM packages will be installed in the background.</p><h2>Backend and MD ðŸ‘‰ HTML conversion <a href="/posts/how-it-was-created#backend" class="anchor-link" id="backend">ðŸ”—</a></h2><p>In order to convert Markdown to HTML files, Kotlin JVM script\n<a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/blob/master/src/jvmMain/kotlin/app/MdToHtmlConverter.kt"><code>MdToHtmlConverter.kt</code></a>\nwas added. It processes the input catalog and produces the output to the specified directory.\nApart from converting the <code>.md</code> files to HTML ones, it copies other files like images and\nproduces <code>markdown-metadata.yaml</code> which is later used for the post\'s entries generation and routes mapping.</p><p>To run the script the <code>generateHtmlFiles</code> task was added. It can be executed solely in a standard way by running:</p><pre><code class="language-commandline">./gradlew generateHtmlFiles\n</code></pre><h2>Frontend <a href="/posts/how-it-was-created#frontend" class="anchor-link" id="frontend">ðŸ”—</a></h2><h3>Kotlin/JS <a href="/posts/how-it-was-created#kotlinjs" class="anchor-link" id="kotlinjs">ðŸ”—</a></h3><p>For the frontend I am using <a href="https://kotlinlang.org/docs/js-overview.html">Kotlin/JS</a>.\nI have to admit that initially it was not easy to get familiar with how it is compiled to a JavaScript.\nAfter understanding <code>external</code>, <code>dynamic</code> concepts and how to import regular JS modules, the development process became\nmore pleasant.</p><p>Since I am familiar with ReactJS and Kotlin/JS has a <a href="https://kotlinlang.org/docs/js-react.html">support</a> for it,\nI decided to choose it as the SPA framework.\nJetBrains team is releasing some wrappers for the React e.g. <code>org.jetbrains.kotlin-wrappers:kotlin-react</code>.\nThey have type mappings for the JavaScript and lets the user write type-safe React code in Kotlin like this:</p><pre><code class="language-kotlin">import react.FC\nimport react.dom.html.ReactHTML.li\nimport react.dom.html.ReactHTML.nav\nimport react.dom.html.ReactHTML.ul\nimport react.router.dom.NavLink\n\nval NavBar = FC {\n    nav {\n        withClasses(&quot;navbar navbar-expand-sm&quot;)\n        ul {\n            withClasses(&quot;navbar-nav&quot;)\n            li {\n                asNavItem()\n                NavLink {\n                    withClasses(&quot;nav-link&quot;)\n                    to = &quot;/&quot;\n                    +&quot;About&quot;\n                }\n            }\n            (...)\n</code></pre><p>which matches the following Typescript code:</p><pre><code class="language-html">import React from &quot;react&quot;;\n\nconst NavBar: React.FC = () =&gt; {\nreturn (\n&lt;nav class=&quot;navbar navbar-expand-sm&quot;&gt;\n    &lt;ul class=&quot;navbar-nav&quot;&gt;\n        &lt;li class=&quot;nav-item&quot;&gt;\n            &lt;NavLink class=&quot;nav-link active&quot; to=&quot;/&quot;&gt;About&lt;/NavLink&gt;\n        &lt;/li&gt;\n&lt;/nav&gt;;\n);\n};\n</code></pre><p>This is pretty good alternative for someone who do not like XML tags (like me ðŸ˜…) and finds it easier to read.\nIt is also quite powerful with Kotlin extension function like <code>withClasses()</code> and <code>asNavItem()</code> in the example.\nAFAIK it is not possible in JS or Typescript to do such things that easily.</p><h3>Bootstrap <a href="/posts/how-it-was-created#bootstrap" class="anchor-link" id="bootstrap">ðŸ”—</a></h3><p>In order to make the application responsive Bootstrap and Sass toolkit was used.\nThe integration wasn\'t so smooth and I spent some time on setting up the Webpack config.\nInstead of the separate CSS modules I wanted to make a single <code>main.css</code> which I could include in <code>index.html</code>.</p><p>Initially I thought Kotlin Multiplatform plugin would help me with it, unfortunately it is not possible and its\nKotlinDSL options does not allow such things. I had to create a custom <code>webpack.config.d/loaders.config.js</code>\nand add <code>css</code>, <code>sass</code> etc. dependencies manually.</p><p>After some hard time spent while setting this up, I was able to make <code>src/jsMain/resources/scss</code> to be bundled into\na single CSS file ðŸ¥³.</p><h3>GitHub Pages SPA support <a href="/posts/how-it-was-created#gh-pages" class="anchor-link" id="gh-pages">ðŸ”—</a></h3><p>Since GitHub Pages does not support SPA apps out of the box some additional actions were needed.\nI used the existing solution found <a href="https://github.com/rafgraph/spa-github-pages">here</a>.\nSome additional JS scripts and custom <code>404.html</code> page was needed, but I managed to <code>&lt;BrowserRouter/&gt;</code> React component\nwork properly.</p><h2>Common <a href="/posts/how-it-was-created#common" class="anchor-link" id="common">ðŸ”—</a></h2><p>Using Kotlin Multiplatform setup can be also useful if we would like to define a common Frontend and Backend components.\nIn this project I created\n<a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/blob/master/src/commonMain/kotlin/app/model/MdMetadata.kt"><code>MdMetadata.kt</code></a>\nfile which is the model class for the metadata output from Backend and the same is being used as the input to a\nfrontend router and HTML imports.</p><p>Serialization/Deserialization was done thanks to Kotlinx serialization dependency compatible for both JVM and JS parts.</p><h2>Development <a href="/posts/how-it-was-created#development" class="anchor-link" id="development">ðŸ”—</a></h2><p>For the local development there is a separate <code>jsRun</code> Gradle task.</p><p>By executing <code>./gradlew jsRun -t</code> Gradle is running the development server locally and rebuilds the application if the\nsource files changes.</p><p>Changes are visible in few seconds:</p><p><img class="responsive-img" src="/pages/posts/how-it-was-created/live-changes.gif" alt="Live reload"></img></p><p>As it can be seen in the <code>jsRun</code> task\'s logs, changes done in <code>content.md</code> file triggered rebuilding because the\nwhole <code>pages</code> catalog was specified as the input of <code>generateHtmlFiles</code> task in\n<a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/blob/master/build.gradle.kts">build.gradle.kts</a>\nfile.\nGradle is somehow able to figure out that the build cache is invalid and due to dependency on <code>jsProcessResources</code> task:</p><pre><code class="language-kotlin">named(&quot;jsProcessResources&quot;) {\n    dependsOn(generateHtmlFiles)\n}\n</code></pre><p>it detects changes and rebuilds the app.</p><p>It is pretty impressive that we can execute some Kotlin JVM code with <code>generateHtmlFiles</code> task and see the output on\nfrontend almost instantly ðŸ˜Ž.</p><h2>CI/CD <a href="/posts/how-it-was-created#ci-cd" class="anchor-link" id="ci-cd">ðŸ”—</a></h2><p>On each push to master the GitHub action specified\nin <a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/blob/master/.github/workflows/gh-pages.yml">gh-pages.yml</a>\nis invoked. It builds project with Gradle and deploys new static resource by simply pushing output files to <code>gh-pages</code>\nbranch. The push/commit is executed by <a href="https://github.com/peaceiris/actions-gh-pages"><code>peaceiris/actions-gh-pages</code></a>\naction.</p><p>Cool thing is that you can edit MD files directly from GitHub site:</p><p><img class="responsive-img" src="/pages/posts/how-it-was-created/github-edit.png" alt="Edit MD file directly"></img></p><p>and see the changes in a few minutes after\ncommiting the changes to master.</p><h2>Conclusions <a href="/posts/how-it-was-created#conclusions" class="anchor-link" id="conclusions">ðŸ”—</a></h2><p>To sum up, because of the Gradle and its Kotlin (both JVM and JS) support I was able to create basic Jekyll like Single\nPage Application template which lets the user to easily manage the blog entries and structure.</p><p>To be fair I am not sure yet whether I would use Kotlin/JS in more complex enterprise scenarios, but I definitely see\nsome potential in terms of making JS frontend apps easier to maintain and less error-prone.</p><p>I also need to admit that both Kotlin and Gradle are becoming better in terms of performance and development experience\nwith each new version. Intellij IDE support for these tools is also priceless.\nI feel like the autocompletion, compilation times and development experience improved a lot comparing to some older\n2018 versions. I don\'t have the exact numbers but with the new Kotlin 2.0\n<a href="https://blog.jetbrains.com/kotlin/2024/05/celebrating-kotlin-2-0-fast-smart-and-multiplatform/">improvements</a>\nI can confirm that it is noticeably faster.</p><p>Project can be found in the following\n<a href="https://github.com/PrzemyslawSwiderski/PrzemyslawSwiderski.github.io/">repo</a>.\nFeel free to use it as the template for the personal blog or some more sophisticated case ðŸ˜„.</p>'}}]);